{
    "543": [
        "SELECT T1.AnswerCount FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT MAX(p.AnswerCount) FROM posts p WHERE p.OwnerDisplayName = 'csgillespie'",
        "SELECT T1.AnswerCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT T1.AnswerCount FROM posts AS T1 WHERE T1.OwnerDisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    ],
    "202": [
        "SELECT COUNT(*) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(*) AS triple_bond_count FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '#'"
    ],
    "357": [
        "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "SELECT promoTypes FROM cards WHERE name = 'Duress'",
        "SELECT promoTypes FROM cards WHERE name = 'Duress'"
    ],
    "264": [
        "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')"
    ],
    "886": [
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1",
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1",
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1",
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1",
        "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1"
    ],
    "957": [
        "SELECT COUNT(*) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.time IS NULL AND D.nationality = 'Italian'",
        "SELECT COUNT(DISTINCT results.driverId) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.time IS NULL AND drivers.nationality = 'Italian'",
        "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
        "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.time IS NULL AND T1.nationality = 'Italian'",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers T1 JOIN results T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.time IS NULL",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.time IS NULL"
    ],
    "540": [
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1",
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1",
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' ORDER BY posts.ViewCount DESC LIMIT 1",
        "###SQL: SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Title FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = T2.Id)"
    ],
    "162": [
        "SELECT T3.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
        "SELECT D.A3 FROM client AS C JOIN district AS D ON C.district_id = D.district_id WHERE C.client_id = 3541",
        "SELECT district.A3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541",
        "SELECT T2.region FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3916",
        "SELECT T2.A3 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
        "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541"
    ],
    "472": [
        "SELECT COUNT(DISTINCT S.code) FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE S.block = 'Ice Age' AND T.language = 'Italian' AND T.translation IS NOT NULL",
        "SELECT COUNT(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'",
        "SELECT COUNT(DISTINCT S.code) FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE S.block = 'Ice Age' AND T.language = 'Italian' AND T.translation IS NOT NULL",
        "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "SELECT COUNT(*) FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL"
    ],
    "907": [
        "SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date",
        "SELECT races.name, circuits.country FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date",
        "SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date",
        "SELECT r.name, c.country FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date",
        "SELECT R.name, C.country FROM races AS R JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date",
        "SELECT R.name, C.country FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date"
    ],
    "1402": [
        "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "SELECT T1.t_shirt_size FROM member AS T1 GROUP BY T1.t_shirt_size ORDER BY COUNT(T1.t_shirt_size) DESC LIMIT 1",
        "###SQL: SELECT member.t_shirt_size FROM member GROUP BY member.t_shirt_size ORDER BY COUNT(member.t_shirt_size) DESC LIMIT 1",
        "SELECT member.t_shirt_size FROM member GROUP BY member.t_shirt_size ORDER BY COUNT(member.t_shirt_size) DESC LIMIT 1",
        "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1"
    ],
    "280": [
        "SELECT T1.bond_id, CASE WHEN T2.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS tell FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "SELECT T1.bond_id, CASE WHEN T2.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS tell FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label IN ('+', '-')",
        "SELECT T1.bond_id, T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'"
    ],
    "814": [
        "SELECT C.colour FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE HA.attribute_value = 100",
        "SELECT C.colour FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE HA.attribute_value = 100",
        "SELECT colour.colour AS skin_colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100",
        "SELECT T2.colour FROM hero_attribute AS T1 INNER JOIN superhero AS T3 ON T1.hero_id = T3.id INNER JOIN colour AS T2 ON T3.skin_colour_id = T2.id WHERE T1.attribute_value = 100",
        "SELECT C.colour FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN colour AS C ON S.skin_colour_id = C.id WHERE HA.attribute_value = 100",
        "SELECT T2.colour FROM hero_attribute AS T1 INNER JOIN superhero AS T3 ON T1.hero_id = T3.id INNER JOIN colour AS T2 ON T3.skin_colour_id = T2.id WHERE T1.attribute_value = 100"
    ],
    "982": [
        "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'Puncture'",
        "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'Puncture'",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T1.nationality = 'American' AND T3.status = 'Puncture'",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T1.nationality = 'American' AND T3.status = 'Puncture'",
        "SELECT COUNT(D.driverId) FROM drivers AS D JOIN results AS R ON D.driverId = R.driverId JOIN status AS S ON R.statusId = S.statusId WHERE D.nationality = 'American' AND S.status = 'Puncture'",
        "SELECT COUNT(DISTINCT T1.driverId)  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'American' AND T2.statusId = (SELECT statusId FROM status WHERE status = 'Puncture')"
    ],
    "161": [
        "SELECT T1.type, T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
        "SELECT T2.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
        "SELECT T1.type, T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
        "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 1373",
        "SELECT C.type FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id INNER JOIN client AS CL ON D.client_id = CL.client_id WHERE CL.client_id = 13539",
        "SELECT T3.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T3.client_id = 13539"
    ],
    "935": [
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL",
        "SELECT COUNT(DISTINCT R.driverId) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Australian Grand Prix' AND RA.year = 2008 AND R.time IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL",
        "SELECT COUNT(DISTINCT T2.driverId) FROM results AS T2 JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL"
    ],
    "977": [
        "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NULL",
        "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NULL",
        "SELECT COUNT(T1.resultId) FROM results AS T1 WHERE T1.statusId = 2 AND T1.time IS NOT NULL AND T1.raceId > 50 AND T1.raceId < 100",
        "SELECT COUNT(*) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.raceId > 50 AND T2.raceId < 100 AND T1.time IS NOT NULL AND T1.statusId = 2",
        "SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL"
    ],
    "911": [
        "SELECT C.name FROM circuits AS C WHERE C.lat = (SELECT MAX(lat) FROM circuits)",
        "SELECT C.name FROM circuits AS C WHERE C.lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))",
        "SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))",
        "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
        "SELECT circuitId FROM circuits WHERE circuitRef IN ('silverstone', 'hockenheimring', 'hungaroring') ORDER BY lat DESC LIMIT 1",
        "SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))"
    ],
    "461": [
        "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3",
        "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3",
        "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3",
        "SELECT cards.name FROM cards WHERE cards.frameVersion = '2003' ORDER BY cards.convertedManaCost DESC LIMIT 3",
        "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3",
        "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3"
    ],
    "784": [
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT T2.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT T1.full_name FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"
    ],
    "4": [
        "SELECT schools.Phone FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.OpenDate > '2000-01-01' AND frpm.`Charter Funding Type` = 'Directly funded'",
        "SELECT schools.Phone FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND schools.OpenDate > '2000-01-01' AND frpm.`Charter Funding Type` = 'Directly funded'",
        "SELECT schools.Phone FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`Charter Funding Type` = 'Directly funded' AND schools.OpenDate > '2000-01-01'",
        "SELECT schools.Phone FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.OpenDate > '2000-01-01' AND frpm.`Charter School (Y/N)` = 1",
        "SELECT T2.Phone FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
        "SELECT T2.Phone  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'"
    ],
    "743": [
        "SELECT (COUNT(CASE WHEN A.alignment = 'Bad' THEN 1 END) * 100.0 / COUNT(S.id)) AS PercentageBadSuperheroes, COUNT(CASE WHEN A.alignment = 'Bad' AND P.publisher_name = 'Marvel Comics' THEN 1 END) AS CountBadMarvelSuperheroes FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN publisher AS P ON S.publisher_id = P.id",
        "SELECT (COUNT(CASE WHEN T1.alignment = 'Bad' THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage, COUNT(CASE WHEN T1.alignment = 'Bad' AND T2.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "SELECT ROUND(CAST(SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(superhero.id), 2) AS percentage_bad_superheroes, SUM(CASE WHEN alignment.alignment = 'Bad' AND publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS count_marvel_bad_superheroes FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN publisher ON superhero.publisher_id = publisher.id",
        "SELECT CAST(SUM(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage, COUNT(T1.id) AS marvel_count FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT (COUNT(CASE WHEN T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage, COUNT(CASE WHEN T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') AND T2.publisher_name = 'Marvel Comics' THEN 1 END) AS count_marvel FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "SELECT      (COUNT(CASE WHEN T1.alignment = 'Bad' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_bad_superheroes,     COUNT(CASE WHEN T1.alignment = 'Bad' AND T2.publisher_name = 'Marvel Comics' THEN 1 END) AS count_marvel_bad_superheroes FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id"
    ],
    "1022": [
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)",
        "SELECT T1.preferred_foot FROM Player_Attributes AS T1 ORDER BY T1.potential ASC LIMIT 1",
        "SELECT PA.preferred_foot FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.potential = (SELECT MIN(potential) FROM Player_Attributes WHERE potential IS NOT NULL)",
        "SELECT DISTINCT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)"
    ],
    "74": [
        "SELECT schools.`Low Grade` FROM schools WHERE schools.NCESDist = '0613360' AND schools.EdOpsCode = 'SPECON'",
        "SELECT schools.`Low Grade` FROM schools WHERE schools.NCESDist = '0613360' AND schools.EdOpsCode = 'SPECON'",
        "SELECT schools.LowGrade FROM schools WHERE schools.NCEDDist = '0613360' AND schools.EdOpsCode = 'SPECON'",
        "SELECT LowGrade FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE EdOpsCode = 'SPECON' AND NCESDist = '0613360'",
        "SELECT T1.`Low Grade` FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Educational Option Type` = 'Special Education School' AND T2.NCESDist = '0613360' ORDER BY T1.`Low Grade` LIMIT 1",
        "SELECT Low_Grade FROM schools WHERE EdOpsCode = 'SPECON' AND NCESDist = '0613360'"
    ],
    "1277": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description = ''",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL"
    ],
    "39": [
        "SELECT AVG(ss.NumTstTakr) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND (s.County = 'Fresno' OR s.City = 'Fresno' OR s.MailCity = 'Fresno')",
        "SELECT AVG(ss.NumTstTakr) FROM schools s INNER JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND s.County = 'Fresno'",
        "SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT AVG(T2.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T2.County = 'Fresno'",
        "SELECT AVG(T2.NumTstTakr) FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT AVG(T2.NumTstTakr)  FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE STRFTIME('%Y', T1.OpenDate) = '1980' AND T1.County = 'Fresno'"
    ],
    "265": [
        "SELECT molecule_id FROM molecule WHERE label = '-'",
        "SELECT molecule_id FROM molecule WHERE label = '-'",
        "SELECT molecule_id FROM molecule WHERE label = '-'",
        "SELECT DISTINCT molecule_id FROM molecule WHERE label = '-'",
        "SELECT T1.molecule_id FROM molecule AS T1 WHERE T1.label = '-'",
        "SELECT molecule_id FROM molecule WHERE label = '-'"
    ],
    "1168": [
        "SELECT MAX(Laboratory.Date), (STRFTIME('%Y', Patient.`First Date`) - STRFTIME('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SJS' GROUP BY Patient.ID ORDER BY MIN(Patient.Birthday) LIMIT 1",
        "SELECT Laboratory.Date, (STRFTIME('%Y', Patient.`First Date`) - STRFTIME('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SJS' ORDER BY Patient.Birthday ASC LIMIT 1",
        "SELECT MAX(Laboratory.Date), (strftime('%Y', Patient.`First Date`) - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SJS' GROUP BY Patient.ID ORDER BY Patient.Birthday LIMIT 1",
        "SELECT T1.Date, (CAST(STRFTIME('%Y', T2.`First Date`) AS INTEGER) - CAST(STRFTIME('%Y', T2.Birthday) AS INTEGER)) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' ORDER BY T2.Birthday LIMIT 1",
        "SELECT MIN(T2.`Examination Date`) AS LabWorkDate, (strftime('%Y', T1.`First Date`) - strftime('%Y', T1.Birthday)) AS AgeAtArrival FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.Diagnosis LIKE '%SJS%' GROUP BY T1.ID ORDER BY T1.Birthday ASC LIMIT 1",
        "SELECT T1.`Date`, (STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.Birthday)) AS age  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T1.Diagnosis LIKE '%SJS%'  ORDER BY T1.Birthday ASC  LIMIT 1"
    ],
    "1143": [
        "SELECT MAX(M.home_team_goal) FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE L.name = 'Eredivisie' AND L.country_id = (SELECT id FROM Country WHERE name = 'Netherlands')",
        "SELECT MAX(M.home_team_goal) AS highest_score FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Eredivisie' AND M.country_id = (SELECT id FROM Country WHERE name = 'Netherlands')",
        "SELECT MAX(home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Eredivisie' AND M.country_id = (SELECT id FROM Country WHERE name = 'Netherlands')",
        "SELECT MAX(M.home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Eredivisie'",
        "SELECT MAX(T1.home_team_goal) FROM Match T1 JOIN League T2 ON T1.league_id = T2.id WHERE T2.name = 'Netherlands Eredivisie'",
        "SELECT MAX(M.home_team_goal)  FROM Match AS M  INNER JOIN League AS L ON M.league_id = L.id  WHERE L.name = 'Netherlands Eredivisie'"
    ],
    "1530": [
        "SELECT P.Description FROM transactions_1k AS T JOIN products AS P ON T.ProductID = P.ProductID GROUP BY P.Description ORDER BY SUM(T.Amount) DESC LIMIT 5",
        "SELECT p.Description FROM products AS p INNER JOIN transactions_1k AS t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5",
        "SELECT P.Description FROM transactions_1k AS T JOIN products AS P ON T.ProductID = P.ProductID GROUP BY P.Description ORDER BY SUM(T.Amount) DESC LIMIT 5",
        "SELECT P.Description FROM products AS P INNER JOIN transactions_1k AS T ON P.ProductID = T.ProductID GROUP BY P.Description ORDER BY SUM(T.Amount) DESC LIMIT 5",
        "SELECT P.Description FROM (SELECT T.ProductID, SUM(T.Amount) as TotalSales FROM transactions_1k T GROUP BY T.ProductID ORDER BY TotalSales DESC LIMIT 5) AS BestSelling INNER JOIN products P ON BestSelling.ProductID = P.ProductID",
        "SELECT T2.Description FROM products AS T2 INNER JOIN (SELECT ProductID, SUM(Amount * Price) AS total_sales FROM transactions_1k GROUP BY ProductID ORDER BY total_sales DESC LIMIT 5) AS T1 ON T1.ProductID = T2.ProductID"
    ],
    "1184": [
        "SELECT E.Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1993-09-27'",
        "SELECT E.Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1993-09-27'",
        "SELECT E.Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1993-09-27'",
        "SELECT E.Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1995-03-17'",
        "SELECT T1.Symptoms FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'",
        "SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'"
    ],
    "1206": [
        "SELECT L.Date FROM Laboratory AS L WHERE L.ID = 48473 AND L.GOT >= 60",
        "SELECT Laboratory.Date FROM Laboratory WHERE Laboratory.ID = 48473 AND Laboratory.GOT >= 60",
        "SELECT `Laboratory.Date` FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
        "SELECT Date FROM Laboratory WHERE GOT >= 60 AND ID = 48473",
        "SELECT L.Date FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 48473 AND L.GOT >= 60",
        "SELECT Laboratory.Date FROM Laboratory WHERE Laboratory.ID = 48473 AND Laboratory.GOT >= 60"
    ],
    "600": [
        "SELECT T2.Id AS post, T2.ViewCount AS popularity FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = 61217",
        "SELECT posts.Id, posts.ViewCount FROM postLinks INNER JOIN posts ON postLinks.RelatedPostId = posts.Id WHERE postLinks.PostId = 61217",
        "SELECT posts.Id AS post, posts.ViewCount AS popularity FROM postLinks INNER JOIN posts ON postLinks.RelatedPostId = posts.Id WHERE postLinks.PostId = 61217",
        "SELECT PL.RelatedPostId, P.ViewCount FROM postLinks AS PL INNER JOIN posts AS P ON PL.RelatedPostId = P.Id WHERE PL.PostId = 61217",
        "SELECT T2.Id, T2.ViewCount FROM postLinks AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 61217",
        "SELECT T2.Id, T2.ViewCount FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 61217"
    ],
    "276": [
        "SELECT C.atom_id AS first_atom_id, C.atom_id2 AS second_atom_id FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_type = '#'",
        "SELECT C.atom_id AS first_atom_id, C.atom_id2 AS second_atom_id FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_type = '#'",
        "SELECT T1.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'",
        "SELECT C.atom_id, C.atom_id2 FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_type = '#'",
        "SELECT T1.atom_id, T2.atom_id2  FROM bond AS T1  INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id  WHERE T1.bond_type = '#'"
    ],
    "864": [
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL",
        "SELECT COUNT(T1.driverId) FROM results AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
        "SELECT COUNT(DISTINCT R.driverId) FROM results AS R JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.date = '2015-11-29' AND R.time IS NOT NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL"
    ],
    "622": [
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'",
        "SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Sharpie'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'",
        "SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'"
    ],
    "380": [
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'",
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'",
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'",
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'",
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'",
        "SELECT edhrecRank FROM cards WHERE frameVersion = '2015'"
    ],
    "1231": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) BETWEEN '1936' AND '1956' AND P.SEX = 'M' AND L.CPK >= 250",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND strftime('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T2.CPK >= 250",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE year(T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250"
    ],
    "695": [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'",
        "SELECT COUNT(UserId) FROM badges WHERE Name = 'Citizen Patrol'"
    ],
    "708": [
        "SELECT users.CreationDate, users.Age FROM users JOIN comments ON users.Id = comments.UserId WHERE users.WebsiteUrl LIKE 'http://%'",
        "SELECT users.CreationDate, users.Age FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE users.WebsiteUrl LIKE 'http://%'",
        "SELECT u.CreationDate, u.Age FROM users AS u JOIN comments AS c ON u.Id = c.UserId WHERE u.WebsiteUrl LIKE 'http://%'",
        "###SQL: SELECT CreationDate, Age FROM users WHERE WebsiteUrl LIKE '%http://%'",
        "SELECT c.CreationDate, u.Age FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE c.Text LIKE '%http://%'",
        "SELECT U.CreationDate, U.Age  FROM comments AS C  INNER JOIN users AS U ON C.UserId = U.Id  WHERE C.Text LIKE '%http://%'"
    ],
    "1200": [
        "SELECT (SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS proportion FROM Examination WHERE Symptoms LIKE '%thrombocytopenia%'",
        "SELECT (SUM(CASE WHEN E.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0) / NULLIF(COUNT(CASE WHEN E.Symptoms = 'thrombocytopenia' THEN 1 END), 0) AS Proportion FROM Examination AS E JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms = 'thrombocytopenia'",
        "SELECT (SUM(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END), 0)) AS Proportion FROM Examination E INNER JOIN Patient P ON E.ID = P.ID",
        "SELECT (CAST(SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL) * 100.0 / NULLIF(SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END), 0)) AS proportion FROM Examination AS T1 WHERE T1.Symptoms LIKE '%thrombocytopenia%'",
        "SELECT (SUM(CASE WHEN p.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Proportion FROM Patient AS p JOIN Laboratory AS l ON p.ID = l.ID WHERE l.PLT < 100",
        "SELECT (SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS proportion FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms LIKE '%ITP%'"
    ],
    "196": [
        "SELECT COUNT(DISTINCT a.molecule_id) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl'",
        "SELECT COUNT(DISTINCT atom.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'",
        "SELECT COUNT(DISTINCT molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'cl'"
    ],
    "1532": [
        "SELECT T1.Country, T2.GasStationID, T3.ProductID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductID = 2 ORDER BY T2.Price DESC LIMIT 1",
        "SELECT G.Country, G.GasStationID, P.ProductID FROM gasstations AS G INNER JOIN transactions_1k AS T ON G.GasStationID = T.GasStationID INNER JOIN products AS P ON T.ProductID = P.ProductID WHERE P.ProductID = 2 ORDER BY T.Price DESC LIMIT 1",
        "SELECT T2.Country FROM products AS T1 INNER JOIN transactions_1k AS T3 ON T1.ProductID = T3.ProductID INNER JOIN gasstations AS T2 ON T3.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T3.Price DESC LIMIT 1",
        "SELECT g.Country FROM transactions_1k AS t INNER JOIN products AS p ON t.ProductID = p.ProductID INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 44) AND p.ProductID = 44",
        "SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1",
        "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 AND T1.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2)"
    ],
    "352": [
        "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) AS percentage, COUNT(cards.id) AS cards FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid",
        "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) AS percentage, COUNT(cards.id) AS cards FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid",
        "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) AS percentage, COUNT(cards.id) AS cards FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "SELECT (SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage FROM foreign_data AS T1",
        "SELECT (SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage  FROM cards AS T1  LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid"
    ],
    "1354": [
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"
    ],
    "132": [
        "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'",
        "SELECT AVG(T1.amount) AS average_loan_amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.account_id = T3.account_id WHERE T3.gender = 'M'",
        "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'",
        "SELECT AVG(loan.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
        "SELECT AVG(L.amount) AS average_loan_amount FROM loan AS L JOIN disp AS D ON L.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M' AND L.amount IS NOT NULL",
        "SELECT AVG(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'"
    ],
    "343": [
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100",
        "SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100",
        "SELECT id FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100"
    ],
    "306": [
        "SELECT DISTINCT M.molecule_id, A.element FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '#'",
        "SELECT DISTINCT B.molecule_id, A.element FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id JOIN atom AS A ON C.atom_id = A.atom_id WHERE B.bond_type = '#'",
        "SELECT DISTINCT T2.molecule_id, T1.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
        "SELECT bond.molecule_id, atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#'",
        "SELECT DISTINCT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'",
        "SELECT DISTINCT T2.element  FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.bond_type = '#'"
    ],
    "500": [
        "SELECT set_translations.translation FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
        "SELECT set_translations.translation FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
        "SELECT set_translations.translation FROM set_translations INNER JOIN cards ON cards.setCode = set_translations.setCode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
        "SELECT ST.translation FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE C.name = 'Fellwar Stone' AND ST.language = 'Japanese'",
        "SELECT ST.translation FROM cards AS C JOIN sets AS S ON C.setCode = S.code JOIN set_translations AS ST ON S.code = ST.setCode WHERE C.name = 'Fellwar Stone' AND ST.language = 'Japanese'",
        "SELECT ST.translation FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE C.name = 'Fellwar Stone' AND ST.language = 'Japanese'"
    ],
    "450": [
        "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(id) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"
    ],
    "706": [
        "SELECT c.Text FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title LIKE '%linear regression%'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
        "SELECT c.Text FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title LIKE '%linear regression%'",
        "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%linear regression%'",
        "SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%linear regression%'",
        "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%linear regression%'"
    ],
    "938": [
        "SELECT T1.forename, T1.surname, T1.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.time IS NOT NULL AND T1.position = 1 AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'",
        "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T2.time IS NOT NULL ORDER BY T2.time ASC LIMIT 1",
        "SELECT T1.driverId, T1.time, T2.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "SELECT T1.time, T3.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL LIMIT 1",
        "SELECT D.driverId, D.url FROM races R JOIN results Res ON R.raceId = Res.raceId JOIN drivers D ON Res.driverId = D.driverId WHERE R.name = 'Australian Grand Prix' AND R.year = 2008 AND Res.position = 1",
        "SELECT D.forename || ' ' || D.surname AS champion_name, D.url  FROM results AS R  INNER JOIN races AS RA ON R.raceId = RA.raceId  INNER JOIN drivers AS D ON R.driverId = D.driverId  WHERE RA.year = 2008 AND RA.name = 'Australian Grand Prix' AND R.time IS NOT NULL"
    ],
    "899": [
        "SELECT T1.circuitId, T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4",
        "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE strftime('%Y', races.date) BETWEEN '1990' AND '2000' GROUP BY circuits.name HAVING COUNT(DISTINCT races.year) = 4",
        "SELECT T1.circuitId, T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4",
        "SELECT T1.circuitId, T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4",
        "SELECT T1.circuitId, T1.circuitRef FROM races T2 JOIN circuits T1 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4",
        "SELECT T1.circuitId, T1.name FROM circuits AS T1 INNER JOIN (SELECT circuitId, COUNT(raceId) AS race_count              FROM races              WHERE year BETWEEN 1990 AND 2000              GROUP BY circuitId              HAVING COUNT(raceId) = 4) AS T2  ON T1.circuitId = T2.circuitId"
    ],
    "879": [
        "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results) LIMIT 1",
        "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
        "SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)",
        "SELECT T1.nationality FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(T3.fastestLapSpeed) FROM lapTimes AS T3)",
        "SELECT D.nationality FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.fastestLapSpeed IS NOT NULL ORDER BY R.fastestLapSpeed DESC LIMIT 1",
        "SELECT T2.nationality  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)"
    ],
    "152": [
        "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND T2.date >= '1997-01-01' GROUP BY T1.A3",
        "SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01')",
        "SELECT AVG(district.A15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.A15 > 4000 AND account.date >= '1997-01-01'",
        "SELECT T2.A3, AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.date >= '1997-01-01' AND T1.A15 > 4000 GROUP BY T2.A3",
        "SELECT AVG(district.A15) FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND T2.date >= '1997-01-01'",
        "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND T2.date >= '1997-01-01'"
    ],
    "1179": [
        "SELECT CASE WHEN E.`aCL IgM` < 40 THEN 'Normal' WHEN E.`aCL IgM` >= 40 THEN 'Abnormal' END AS status FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.`Examination Date` = '1993-11-12'",
        "SELECT E.`aCL IgM` FROM Examination E INNER JOIN Patient P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.`Examination Date` = '1993-11-12'",
        "SELECT E.`aCL IgM` FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.`Examination Date` = '1993-11-12'",
        "###SQL: SELECT T1.`aCL IgM` FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'",
        "SELECT T2.`aCL IgM` FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'",
        "SELECT T1.`aCL IgM` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'"
    ],
    "441": [
        "SELECT code FROM sets WHERE releaseDate = '2007-07-13'",
        "SELECT sets.code FROM sets WHERE sets.releaseDate = '2007-07-13'",
        "SELECT code FROM sets WHERE releaseDate = '2007-07-13'",
        "SELECT code FROM sets WHERE releaseDate = '2007-07-13'",
        "SELECT code FROM sets WHERE releaseDate = '2007-07-13'",
        "SELECT setCode FROM sets WHERE releaseDate = '2007-07-13'"
    ],
    "1127": [
        "SELECT Player.player_name, Country.name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Team ON Player.player_api_id = Team.team_api_id JOIN League ON Team.team_api_id = League.id JOIN Country ON League.country_id = Country.id WHERE Player_Attributes.vision > 89",
        "SELECT P.player_name, C.name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id INNER JOIN Team AS T ON P.team_api_id = T.team_api_id INNER JOIN League AS L ON T.team_api_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE PA.vision > 89",
        "SELECT p.player_name, c.name FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id INNER JOIN Match AS m ON p.player_api_id IN (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11, m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5, m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11) INNER JOIN Country AS c ON m.country_id = c.id WHERE pa.vision > 89",
        "SELECT T1.player_name, T2.name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.player_api_id = T2.id WHERE T1.vision > 89",
        "SELECT C.name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id JOIN Team T ON P.player_api_id = T.team_api_id JOIN League L ON T.team_api_id = L.id JOIN Country C ON L.country_id = C.id WHERE PA.vision > 89",
        "SELECT DISTINCT C.name FROM Player_Attributes AS PA  INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id  INNER JOIN Team AS T ON P.team_api_id = T.team_api_id  INNER JOIN League AS L ON T.team_fifa_api_id = L.country_id  INNER JOIN Country AS C ON L.country_id = C.id  WHERE PA.vision > 89"
    ],
    "792": [
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS S ON T1.hero_id = S.id WHERE S.superhero_name = 'Abomination'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"
    ],
    "1432": [
        "SELECT (COUNT(CASE WHEN income.amount = 50 THEN 1 END) * 100.0 / COUNT(member.member_id)) AS percentage FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'",
        "SELECT (COUNT(CASE WHEN income.amount = 50 THEN 1 END) * 100.0 / COUNT(member_id)) AS percentage FROM member WHERE t_shirt_size = 'Medium' AND position = 'Member'",
        "SELECT (CAST(SUM(CASE WHEN i.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(m.member_id)) AS percentage FROM member AS m JOIN income AS i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member'",
        "SELECT CAST(COUNT(CASE WHEN T2.amount = 50 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium'",
        "SELECT (COUNT(CASE WHEN I.amount = 50 THEN 1 END) * 100.0 / COUNT(M.member_id)) as percentage FROM member M LEFT JOIN income I ON M.member_id = I.link_to_member WHERE M.t_shirt_size = 'Medium' AND M.position = 'Member'",
        "SELECT (COUNT(CASE WHEN I.amount = 50 THEN 1 END) * 100.0 / COUNT(M.member_id)) AS percentage FROM member AS M LEFT JOIN income AS I ON M.member_id = I.link_to_member WHERE M.t_shirt_size = 'Medium' AND M.position = 'Member'"
    ],
    "1376": [
        "SELECT e.event_name FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' ORDER BY (b.spent / b.amount) DESC LIMIT 1",
        "SELECT e.event_name FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.status = 'Closed' ORDER BY (b.spent / b.amount) DESC LIMIT 1",
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.status = 'Closed' ORDER BY (B.spent / B.amount) DESC LIMIT 1",
        "SELECT T1.event_name, MAX(CAST(T2.spent AS REAL) / CAST(T2.amount AS REAL)) AS ratio FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' GROUP BY T1.event_name ORDER BY ratio DESC LIMIT 1",
        "SELECT T2.event_id FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' AND T1.amount > 0 AND T1.spent > 0 ORDER BY (T1.spent / T1.amount) DESC LIMIT 1",
        "SELECT T1.event_name, (SUM(T3.cost) / T2.amount) AS spend_to_budget_ratio  FROM event AS T1  INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event  INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget  WHERE T1.status = 'Closed'  GROUP BY T1.event_name  ORDER BY spend_to_budget_ratio DESC  LIMIT 1"
    ],
    "447": [
        "SELECT S.code FROM sets AS S WHERE S.type = 'expansion' AND S.block = 'Commander'",
        "SELECT sets.code FROM sets WHERE sets.type = 'commander' AND sets.block = 'Commander'",
        "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander' GROUP BY T2.setCode",
        "SELECT code FROM sets WHERE type = 'commander'",
        "SELECT code FROM sets WHERE type = 'commander'",
        "SELECT setCode FROM sets WHERE type = 'commander'"
    ],
    "1147": [
        "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1",
        "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1",
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "SELECT Player.player_api_id FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1",
        "SELECT name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)"
    ],
    "337": [
        "SELECT DISTINCT A.element, B.bond_type FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE A.molecule_id = 'TR002'",
        "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "SELECT A.element, B.bond_type FROM atom AS A JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE A.molecule_id = 'TR002'",
        "SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "SELECT a.element, b.bond_type FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.molecule_id = 'TR002'",
        "SELECT T1.element, T2.bond_type  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.molecule_id = 'TR002'"
    ],
    "453": [
        "SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor's Chosen'",
        "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\\'s Chosen'"
    ],
    "493": [
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'"
    ],
    "1392": [
        "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1",
        "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1",
        "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1",
        "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1",
        "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1",
        "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1"
    ],
    "1172": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` >= 2.0",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` >= 2.0",
        "SELECT COUNT(DISTINCT P.ID) AS male_patient_count, COUNT(L.`T-BIL`) AS elevated_total_bilirubin_count FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` >= 2.0",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` >= 2.0",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` >= 2.0"
    ],
    "742": [
        "SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire')",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT COUNT(*) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"
    ],
    "898": [
        "SELECT D.forename, D.surname, (strftime('%Y', 'now') - strftime('%Y', D.dob)) AS age FROM drivers AS D WHERE D.nationality = 'Japanese' ORDER BY D.dob DESC LIMIT 1",
        "SELECT (strftime('%Y', 'now') - strftime('%Y', D.dob)) AS age, D.forename || ' ' || D.surname AS \"youngest Japanese driver\" FROM drivers AS D WHERE D.nationality = 'Japanese' ORDER BY D.dob DESC LIMIT 1",
        "SELECT YEAR(CURRENT_TIMESTAMP) - YEAR(D.dob) AS age, D.forename || ' ' || D.surname AS \"youngest Japanese driver\" FROM drivers AS D WHERE D.nationality = 'Japanese' ORDER BY D.dob DESC LIMIT 1",
        "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1",
        "SELECT drivers.driverId, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1",
        "SELECT (STRFTIME('%Y', 'now') - STRFTIME('%Y', dob)) AS age, CONCAT(forename, ' ', surname) AS name  FROM drivers  WHERE nationality = 'Japanese'  ORDER BY dob DESC  LIMIT 1"
    ],
    "683": [
        "SELECT (COUNT(CASE WHEN users.Reputation > 1000 THEN posts.Id END) * 100.0) / COUNT(posts.Id) AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE strftime('%Y', posts.CreaionDate) = '2011'",
        "SELECT (COUNT(posts.Id) * 100.0) / (SELECT COUNT(Id) FROM posts WHERE strftime('%Y', CreationDate) = '2011') AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE strftime('%Y', posts.CreationDate) = '2011' AND users.Reputation > 1000",
        "SELECT (COUNT(posts.Id) * 100.0 / (SELECT COUNT(Id) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS percentage FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE strftime('%Y', posts.CreationDate) = '2011' AND users.Reputation > 1000",
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', T1.CreationDate) = '2011' AND T2.Reputation > 1000 THEN T1.Id END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id",
        "SELECT (COUNT(T1.Id) * 100.0 / (SELECT COUNT(*) FROM posts T2 WHERE strftime('%Y', T2.CreaionDate) = '2011')) AS percentage FROM posts T1 JOIN users T3 ON T1.OwnerUserId = T3.Id WHERE strftime('%Y', T1.CreaionDate) = '2011' AND T3.Reputation > 1000",
        "SELECT (COUNT(T1.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE STRFTIME('%Y', CreationDate) = '2011')) AS percentage  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T2.Reputation > 1000"
    ],
    "797": [
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN colour T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "SELECT S.superhero_name FROM superhero AS S INNER JOIN colour AS C1 ON S.eye_colour_id = C1.id INNER JOIN colour AS C2 ON S.hair_colour_id = C2.id WHERE C1.colour = 'Blue' AND C2.colour = 'Brown'",
        "SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND T1.hair_colour_id = (SELECT id FROM colour WHERE colour = 'Brown')",
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN colour T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'"
    ],
    "1131": [
        "SELECT AVG(P.height) FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN League AS L ON T.team_api_id = L.country_id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Italy'",
        "SELECT AVG(Player.height) FROM Player INNER JOIN Team ON Player.player_api_id = Team.team_api_id INNER JOIN League ON Team.team_api_id = League.id INNER JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Italy'",
        "SELECT AVG(P.height) FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN League AS L ON T.team_api_id = L.country_id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Italy'",
        "SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Team AS T3 ON T1.player_api_id = T3.team_api_id INNER JOIN League AS T4 ON T3.team_fifa_api_id = T4.country_id INNER JOIN Country AS T5 ON T4.country_id = T5.id WHERE T5.name = 'Italy'",
        "SELECT AVG(PA.height) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id JOIN Country AS C ON C.id = (SELECT id FROM Country WHERE name = 'Italy') WHERE P.player_api_id IS NOT NULL",
        "SELECT AVG(P.height) FROM Player AS P  INNER JOIN Team AS T ON P.team_api_id = T.team_api_id  INNER JOIN League AS L ON T.team_fifa_api_id = L.country_id  INNER JOIN Country AS C ON L.country_id = C.id  WHERE C.name = 'Italy'"
    ],
    "1140": [
        "SELECT T2.sprint_speed, T2.agility, T2.acceleration FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Alexis Blin'",
        "SELECT PA.sprint_speed, PA.agility, PA.acceleration FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Alexis Blin'",
        "SELECT PA.sprint_speed, PA.agility, PA.acceleration FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Alexis Blin'",
        "SELECT T1.sprint_speed, T1.agility, T1.acceleration FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Alexis Blin'",
        "SELECT PA.player_api_id, PA.sprint_speed, PA.agility, PA.acceleration FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Alexis Blin'",
        "SELECT T1.sprint_speed, T2.agility, T2.acceleration  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T1.player_name = 'Alexis Blin'"
    ],
    "481": [
        "SELECT FD.language FROM foreign_data FD JOIN cards C ON FD.uuid = C.uuid WHERE C.name = 'Ancestor''s Chosen' AND FD.flavorText IS NOT NULL",
        "SELECT DISTINCT FD.language FROM foreign_data FD JOIN cards C ON FD.uuid = C.uuid WHERE C.name = 'Ancestor''s Chosen' AND FD.flavorText IS NOT NULL",
        "SELECT DISTINCT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavorText IS NOT NULL",
        "SELECT DISTINCT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T2.flavorName IS NOT NULL",
        "SELECT T2.language FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
        "SELECT DISTINCT T2.language  FROM cards AS T1  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL"
    ],
    "366": [
        "SELECT L.status FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Benalish Knight'",
        "SELECT legalities.status FROM cards WHERE name = 'Benalish Knight'",
        "SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Benalish Knight'",
        "SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Benalish Knight'",
        "SELECT L.format FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Benalish Knight'",
        "SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Benalish Knight'"
    ],
    "1105": [
        "SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Migliore' AND PA.date LIKE '2015-05-01%'",
        "SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Migliore' AND PA.date LIKE '2015-05-01%'",
        "SELECT PA.attacking_work_rate FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Migliore' AND PA.date LIKE '2015-05-01%'",
        "SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date LIKE '2015-05-01%'",
        "SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Migliore' AND PA.date LIKE '2015-05-01%'",
        "SELECT T2.attacking_work_rate  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T1.player_name = 'Francesco Migliore' AND T2.date LIKE '2015-05-01%'"
    ],
    "77": [
        "SELECT schools.School, (frpm.`FRPM Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) * 100 AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.GSserved = 'K-9' AND schools.County = 'Los Angeles'",
        "SELECT schools.School, (frpm.`FRPM Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND schools.GSserved = 'K-9'",
        "SELECT schools.School, (frpm.`FRPM Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.GSserved = 'K-9' AND schools.County = 'Los Angeles'",
        "SELECT T1.County, T1.GSserved, CAST((T2.\"FRPM Count (Ages 5-17)\" AS REAL) / CAST(T2.\"Enrollment (Ages 5-17)\" AS REAL) * 100 AS REAL) AS \"Percent Eligible FRPM (Ages 5-17)\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T2.GSserved = 'K-12'",
        "SELECT (frpm.`FRPM Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.GSserved LIKE '%K-9%'",
        "SELECT S.School, (FRPM.`FRPM Count (Ages 5-17)` / FRPM.`Enrollment (Ages 5-17)` * 100) AS PercentEligibleFRPM FROM schools AS S INNER JOIN frpm AS FRPM ON S.CDSCode = FRPM.CDSCode WHERE S.County = 'Los Angeles'  AND S.GSserved LIKE 'K-%'  AND S.GSserved LIKE '%9'"
    ],
    "1501": [
        "SELECT DISTINCT gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE SUBSTR(yearmonth.Date, 1, 6) = '201306'",
        "SELECT DISTINCT g.Country FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID INNER JOIN yearmonth AS ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306%'",
        "SELECT DISTINCT gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201306'",
        "SELECT DISTINCT g.Country FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID INNER JOIN yearmonth AS ym ON t.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306'",
        "SELECT DISTINCT G.Country FROM yearmonth Y JOIN transactions_1k T ON Y.CustomerID = T.CustomerID JOIN gasstations G ON T.GasStationID = G.GasStationID WHERE Y.Date = '201306'",
        "SELECT DISTINCT G.Country FROM gasstations AS G INNER JOIN transactions_1k AS T ON G.GasStationID = T.GasStationID INNER JOIN yearmonth AS Y ON T.CustomerID = Y.CustomerID WHERE Y.Date LIKE '201306%'"
    ],
    "1081": [
        "SELECT C.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'",
        "SELECT C.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'",
        "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'",
        "SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'",
        "SELECT C.name FROM League AS L JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'",
        "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'"
    ],
    "1055": [
        "SELECT birthday FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)",
        "SELECT Player.birthday FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1",
        "SELECT birthday FROM Player WHERE id = (SELECT id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)",
        "SELECT birthday FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player)",
        "SELECT P.birthday FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL)",
        "SELECT P.birthday FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"
    ],
    "709": [
        "SELECT COUNT(DISTINCT p.Id) FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE c.Score = 0 AND p.ViewCount < 5",
        "SELECT COUNT(DISTINCT posts.Id) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.Score = 0 AND posts.ViewCount < 5",
        "SELECT COUNT(DISTINCT p.Id) FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE c.Score = 0 AND p.ViewCount < 5",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5",
        "SELECT COUNT(DISTINCT T2.Id) FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5"
    ],
    "1018": [
        "SELECT AVG(pitStops.milliseconds) FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
        "SELECT AVG(p.milliseconds) FROM pitStops AS p INNER JOIN drivers AS d ON p.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'",
        "SELECT AVG(PS.milliseconds) FROM pitStops AS PS INNER JOIN drivers AS D ON PS.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT AVG(T1.milliseconds) FROM pitStops T1 INNER JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')"
    ],
    "1085": [
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY Player_Attributes.crossing DESC LIMIT 1",
        "SELECT player_name, MAX(crossing) AS best_crossing FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY player_name ORDER BY best_crossing DESC LIMIT 1",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY PA.crossing DESC LIMIT 1",
        "SELECT P.player_name, MAX(PA.crossing) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY P.player_name ORDER BY MAX(PA.crossing) DESC LIMIT 1",
        "SELECT P.id FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY PA.crossing DESC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T2.crossing DESC LIMIT 1"
    ],
    "345": [
        "SELECT legalities.status FROM cards AS T1 JOIN legalities ON T1.uuid = legalities.uuid WHERE T1.type = 'Artifact' AND T1.side IS NULL AND legalities.format = 'vintage'",
        "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.type = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'",
        "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.type = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'",
        "SELECT T2.status FROM legalities AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'",
        "SELECT L.status FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.type = 'Artifact' AND C.side IS NULL AND L.format = 'vintage'",
        "SELECT L.status  FROM cards AS C  INNER JOIN legalities AS L ON C.uuid = L.uuid  WHERE C.type = 'Artifact' AND C.side IS NULL AND L.format = 'vintage'"
    ],
    "1056": [
        "SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands'",
        "SELECT L.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands'",
        "SELECT L.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands'",
        "SELECT T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Netherlands'",
        "SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands'",
        "SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Netherlands'"
    ],
    "1258": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.RA IN ('-', '+-') AND E.KCT = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.RA IN ('-', '+-') AND E.KCT = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RA IN ('-', '+-') AND E.KCT = '+'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.KCT = '+' AND T2.RA IN ('-', '+-')",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.RA IN ('-', '+-') AND E.KCT = '+'",
        "SELECT COUNT(DISTINCT P.ID)  FROM Examination E  JOIN Laboratory L ON E.ID = L.ID  JOIN Patient P ON E.ID = P.ID  WHERE E.KCT = '+' AND L.RA IN ('-', '+-')"
    ],
    "1453": [
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(T3.cost) FROM budget AS T2 INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking') GROUP BY T1.event_id",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' GROUP BY T1.event_id HAVING AVG(T3.cost) > (SELECT AVG(T3.cost) FROM budget AS T2 INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking') AND T2.remaining > 0",
        "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' AND expense.cost < (SELECT AVG(expense.cost) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking')",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.cost < (SELECT CAST(SUM(cost) AS REAL) / COUNT(link_to_event) FROM expense WHERE category = 'Parking')",
        "SELECT e.event_name FROM event AS e JOIN budget AS b ON e.event_id = b.link_to_event JOIN expense AS ex ON b.budget_id = ex.link_to_budget WHERE ex.cost < (SELECT SUM(cost) / COUNT(event_id) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE category = 'Parking'))",
        "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND budget.amount < (SELECT SUM(cost) * 1.0 / COUNT(DISTINCT budget.link_to_event) FROM budget WHERE budget.category = 'Parking')"
    ],
    "1039": [
        "SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag')",
        "SELECT AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag')",
        "SELECT AVG(pa.long_shots) AS average_long_shots FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Ahmed Samir Farag'",
        "SELECT CAST(SUM(PA.long_shots) AS REAL) / COUNT(PA.player_fifa_api_id) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.player_name = 'Ahmed Samir Farag'",
        "SELECT AVG(T2.long_shots) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ahmed Samir Farag'",
        "SELECT AVG(long_shots) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag')"
    ],
    "1489": [
        "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date = '201305'",
        "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201305' AND T2.Segment = 'KAM'",
        "SELECT SUM(yearmonth.Consumption) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = '201305'",
        "SELECT SUM(y.Consumption) FROM yearmonth AS y INNER JOIN customers AS c ON y.CustomerID = c.CustomerID WHERE y.Date = '201305' AND c.Segment = 'KAM'",
        "SELECT SUM(T2.Consumption) FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date = 201305",
        "SELECT SUM(YM.Consumption)  FROM yearmonth AS YM  INNER JOIN customers AS C ON YM.CustomerID = C.CustomerID  WHERE C.Segment = 'KAM' AND YM.Date = '201305'"
    ],
    "438": [
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 174",
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 174",
        "SELECT ST.language FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE S.id = 174",
        "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 174",
        "SELECT ST.language FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 174",
        "SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE id = 174)"
    ],
    "269": [
        "SELECT COUNT(DISTINCT C.bond_id) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id WHERE A.element = 'i'",
        "SELECT COUNT(DISTINCT C.bond_id) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id WHERE A.element = 'i'",
        "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "SELECT COUNT(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i'",
        "SELECT COUNT(DISTINCT B.bond_id) FROM atom AS A JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE A.element = 'i'",
        "SELECT COUNT(DISTINCT T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id OR T1.atom_id = T3.atom_id2 INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'i'"
    ],
    "334": [
        "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "SELECT element FROM atom WHERE atom_id = 'TR004_7' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-')",
        "SELECT T1.element, T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.atom_id = 'TR004_7'",
        "SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'"
    ],
    "1268": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SM NOT IN ('negative', '0') ORDER BY P.Birthday DESC LIMIT 3",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SM NOT IN ('negative', '0') ORDER BY P.Birthday DESC LIMIT 3",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SM NOT IN ('negative', '0') ORDER BY P.Birthday DESC LIMIT 3",
        "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative', '0') ORDER BY T1.Birthday DESC LIMIT 3",
        "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SM NOT IN ('negative', '0') ORDER BY P.Birthday DESC LIMIT 3",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative', '0') ORDER BY T1.Birthday DESC LIMIT 3"
    ],
    "335": [
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '='",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '='",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '='",
        "SELECT COUNT(DISTINCT m.molecule_id) FROM bond AS b INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a ON c.atom_id = a.atom_id INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND a.element = 'o'",
        "SELECT COUNT(DISTINCT T3.molecule_id) FROM bond T1 JOIN atom T2 ON T1.bond_id = T2.molecule_id JOIN molecule T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_type = '=' AND T2.element = 'o'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '='"
    ],
    "195": [
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond T1 GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1"
    ],
    "89": [
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.A3 = 'east Bohemia'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'west Bohemia'",
        "SELECT COUNT(T1.account_id) FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'East Bohemia'",
        "SELECT COUNT(T1.account_id) FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.client_id = T3.district_id  WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T3.A3 = 'East Bohemia'"
    ],
    "1236": [
        "SELECT Patient.ID, Patient.SEX, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS Age, Patient.Admission FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) >= 50 AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0)",
        "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Admission FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) >= 50 AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0)",
        "SELECT P.ID, P.Admission FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0)",
        "SELECT patients.Admission FROM patients WHERE patients.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', patients.Birthday)) >= 50 AND (patients.RBC <= 3.5 OR patients.RBC >= 6.0)",
        "SELECT P.Admission FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0)",
        "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) >= 50 AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)"
    ],
    "69": [
        "SELECT schools.NCESDist FROM schools WHERE schools.SOC = '31'",
        "SELECT schools.NCESDist FROM schools WHERE schools.SOC = '31'",
        "SELECT schools.NCESDist FROM schools WHERE schools.SOC = '31'",
        "SELECT NCESDist FROM schools WHERE SOC = '11'",
        "SELECT NCESDist FROM schools WHERE SOC = '31'",
        "SELECT NCESDist FROM schools WHERE SOC = 31"
    ],
    "1076": [
        "SELECT (SELECT AVG(PA.ball_control) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Abdou Diallo') - (SELECT AVG(PA.ball_control) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Appindangoye') AS difference_of_average_ball_control",
        "SELECT (SELECT AVG(PA.ball_control) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Abdou Diallo') - (SELECT AVG(PA.ball_control) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Appindangoye') AS difference_of_average_ball_control",
        "SELECT (SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) / NULLIF(COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN P.id ELSE NULL END), 0)) - (SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) / NULLIF(COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN P.id ELSE NULL END), 0)) AS difference FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id",
        "SELECT (CAST(SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN 1 ELSE 0 END), 0)) - (CAST(SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN 1 ELSE 0 END), 0)) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id",
        "SELECT (SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN P.id ELSE NULL END)) - (SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) / COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN P.id ELSE NULL END)) AS difference FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id",
        "SELECT      (SUM(CASE WHEN P.player_name = 'Abdou Diallo' THEN PA.ball_control ELSE 0 END) /      NULLIF(COUNT(CASE WHEN P.player_name = 'Abdou Diallo' THEN P.id ELSE NULL END), 0)) -     (SUM(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN PA.ball_control ELSE 0 END) /      NULLIF(COUNT(CASE WHEN P.player_name = 'Aaron Appindangoye' THEN P.id ELSE NULL END), 0)) AS ball_control_difference FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Abdou Diallo', 'Aaron Appindangoye')"
    ],
    "339": [
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'",
        "SELECT T.atom_id FROM atom AS T INNER JOIN molecule AS M ON T.molecule_id = M.molecule_id WHERE M.label = '+' AND T.element = 'o'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'",
        "SELECT T1.atom_id FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'"
    ],
    "773": [
        "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id",
        "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id",
        "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id",
        "SELECT S.superhero_name, P.publisher_name FROM superhero S INNER JOIN publisher P ON S.publisher_id = P.id WHERE S.hair_colour_id = S.skin_colour_id AND S.hair_colour_id = S.eye_colour_id",
        "SELECT T1.id, T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id",
        "SELECT T1.superhero_name, T2.publisher_name  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id"
    ],
    "421": [
        "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
        "SELECT name FROM cards WHERE (power = '*' OR power IS NULL) AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
        "SELECT DISTINCT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3",
        "SELECT id, name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name LIMIT 3",
        "SELECT id, name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3",
        "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3"
    ],
    "386": [
        "SELECT COUNT(*) AS card_count, L.status FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.frameVersion = 'future' AND L.status = 'Legal'",
        "SELECT COUNT(*) AS card_count, L.status FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.frameVersion = 'future' AND L.status = 'Legal'",
        "SELECT COUNT(*) AS card_count, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = 'future' GROUP BY legalities.status",
        "SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'Legal'",
        "SELECT COUNT(T1.id) AS card_count, T2.status FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'Legal'",
        "SELECT COUNT(T1.id) AS card_count, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal' GROUP BY T2.status"
    ],
    "1351": [
        "SELECT J.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.first_name = 'Brent' AND M.last_name = 'Thomason'",
        "SELECT J.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.first_name = 'Brent' AND M.last_name = 'Thomason'",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'",
        "SELECT T3.major_name FROM member AS T1 INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'"
    ],
    "1322": [
        "SELECT COUNT(DISTINCT T1.link_to_event) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id GROUP BY T2.type HAVING T2.type = 'Meeting' AND COUNT(T1.link_to_member) > 10",
        "SELECT COUNT(T3.event_id) FROM attendance AS T1 INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id GROUP BY T3.event_id HAVING COUNT(T1.link_to_member) > 10 AND T3.type = 'Meeting'",
        "SELECT COUNT(T1.event_id) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T1.link_to_event HAVING COUNT(T1.link_to_member) > 10 AND T2.type = 'Meeting'",
        "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' GROUP BY T1.link_to_event HAVING COUNT(T1.link_to_event) > 10",
        "SELECT COUNT(T1.event_id) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' GROUP BY T1.link_to_event HAVING COUNT(T1.link_to_member) > 10",
        "SELECT COUNT(*)  FROM event AS T1  INNER JOIN attendance AS T2  ON T1.event_id = T2.link_to_event  WHERE T1.type = 'Meeting'  GROUP BY T1.event_id  HAVING COUNT(T2.link_to_member) > 10"
    ],
    "1069": [
        "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1",
        "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1",
        "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1",
        "SELECT player_name, height FROM Player ORDER BY height ASC LIMIT 1",
        "SELECT Player.id FROM Player WHERE Player.height IS NOT NULL ORDER BY Player.height ASC LIMIT 1",
        "SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player)"
    ],
    "516": [
        "SELECT COUNT(*) FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid WHERE FD.language = 'French' AND C.artist = 'Volkan Baǵa'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French'",
        "SELECT COUNT(*) FROM cards C JOIN foreign_data FD ON C.uuid = FD.uuid WHERE C.artist = 'Volkan Baǵa' AND FD.language = 'French'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'French' AND T1.artist = 'Volkan Baǵa'",
        "SELECT COUNT(*) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan BaÇµa' AND T2.language = 'French'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan BaÇµa' AND T2.language = 'French'"
    ],
    "548": [
        "SELECT T2.Location, T1.OwnerDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "SELECT u.Location FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts'",
        "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "SELECT U.Location FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Eliciting priors from experts'",
        "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'"
    ],
    "1510": [
        "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "SELECT AVG(transactions_1k.Price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE'",
        "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'"
    ],
    "888": [
        "SELECT circuits.country, circuits.name AS circuit, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name LIKE '%European Grand Prix%' ORDER BY races.year LIMIT 1",
        "SELECT circuits.country, circuits.name AS circuit, circuits.location FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'European Grand Prix' AND races.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')",
        "SELECT T2.country, T1.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix' AND T1.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')",
        "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year = (SELECT MIN(year) FROM races WHERE name LIKE '%European Grand Prix%') ",
        "SELECT T2.name, T2.location FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix' ORDER BY T1.year ASC LIMIT 1",
        "SELECT T2.country, T2.name AS circuit_name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix' AND T1.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')"
    ],
    "1404": [
        "SELECT expense.expense_description AS expense_type, SUM(expense.cost) AS total_value FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
        "SELECT expense.expense_description, SUM(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
        "SELECT expense.expense_description, SUM(expense.cost) AS total_value FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
        "SELECT T1.expense_description, SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' GROUP BY T1.expense_description",
        "SELECT expense.expense_description, SUM(expense.cost) AS total_value FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_budget JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id WHERE T1.event_name = 'October Meeting' AND T2.approved = 'true' GROUP BY expense.expense_description",
        "SELECT expense.expense_description, SUM(expense.cost) AS total_value  FROM expense  INNER JOIN budget ON expense.link_to_budget = budget.budget_id  INNER JOIN event ON budget.link_to_event = event.event_id  WHERE event.event_name = 'October Meeting' AND expense.approved = 'true'  GROUP BY expense.expense_description"
    ],
    "902": [
        "SELECT R.name FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Alex' AND D.surname = 'Yoong' AND R.position < 20",
        "SELECT R.name FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Alex' AND D.surname = 'Yoong' AND R.position < 20",
        "SELECT R.raceId FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Alex' AND D.surname = 'Yoong' AND R.position < 20",
        "SELECT T1.name FROM Races AS T1 INNER JOIN Results AS T2 ON T1.raceId = T2.raceId INNER JOIN Drivers AS T3 ON T2.driverId = T3.driverId WHERE CONCAT(T3.forename, ' ', T3.surname) = 'Alex Yoong' AND T2.position < 20",
        "SELECT T3.name FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId JOIN races T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Alex' AND T2.surname = 'Yoong' AND T1.position < 20",
        "SELECT T3.name FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Alex' AND T2.surname = 'Yoong' AND T1.position < 20"
    ],
    "1416": [
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'",
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'",
        "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Business' AND M.t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Agribusiness' AND T1.t_shirt_size = 'Medium'",
        "SELECT COUNT(*) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'"
    ],
    "1218": [
        "SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F'",
        "SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA > 6.5 AND Patient.SEX = 'F'",
        "SELECT (COUNT(Patient.ID) * CAST(100.0 AS REAL) / (SELECT COUNT(Patient.ID) FROM Patient WHERE SEX = 'F')) AS percentage FROM Patient WHERE Patient.UA > 6.5 AND Patient.SEX = 'F'",
        "SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_females_above_normal FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F'",
        "SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.SEX = 'F'"
    ],
    "614": [
        "SELECT (COUNT(UserId) * 100.0 / (SELECT COUNT(*) FROM badges)) AS percentage FROM badges WHERE Name = 'Teacher'",
        "SELECT CAST(COUNT(CASE WHEN B.Name = 'Teacher' THEN 1 END) AS REAL) * 100 / COUNT(U.Id) AS percentage FROM badges B JOIN users U ON B.UserId = U.Id",
        "SELECT CAST(COUNT(CASE WHEN badges.Name = 'Teacher' THEN 1 END) AS REAL) * 100 / COUNT(users.Id) AS percentage FROM badges INNER JOIN users ON badges.UserId = users.Id",
        "SELECT CAST(COUNT(CASE WHEN Name = 'Teacher' THEN UserId END) AS REAL) * 100 / COUNT(UserId) FROM badges",
        "SELECT (SELECT COUNT(DISTINCT T1.UserId) FROM badges T1 WHERE T1.Name = 'Teacher') * 100.0 / COUNT(DISTINCT T2.Id) AS percentage FROM users T2",
        "SELECT (COUNT(T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS percentage  FROM badges AS T1  WHERE T1.Name = 'Teacher'"
    ],
    "458": [
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%'",
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%'",
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'",
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'",
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%'",
        "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'"
    ],
    "1214": [
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.ID, P.SEX, P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TP < 6.0"
    ],
    "1304": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0",
        "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.GLU < 180 AND T2.Thrombosis = 0",
        "SELECT COUNT(*) FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Laboratory AS T1  INNER JOIN Examination AS T2 ON T1.ID = T2.ID  INNER JOIN Patient AS T3 ON T1.ID = T3.ID  WHERE T1.GLU < 180 AND T1.Thrombosis = 0"
    ],
    "25": [
        "SELECT s.School, s.FundingType FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Riverside' GROUP BY s.School HAVING AVG(ss.AvgScrMath) > 400",
        "SELECT s.FundingType FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Riverside' GROUP BY s.FundingType HAVING AVG(ss.AvgScrMath) > 400",
        "SELECT s.School, f.FundingType FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Riverside' AND (SELECT AVG(satscores.AvgScrMath) FROM satscores WHERE satscores.cds = s.CDSCode) > 400",
        "SELECT schools.School, schools.FundingType FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.School HAVING (SUM(satscores.AvgScrMath) / CAST(COUNT(satscores.sname) AS REAL)) > 400",
        "SELECT S.FundingType FROM schools AS S JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.City = 'Riverside' GROUP BY S.CDSCode HAVING AVG(SAT.AvgScrMath) > 400",
        "SELECT T1.`School Name`, T1.`FundingType`  FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE T1.`County` = 'Riverside'  GROUP BY T1.`School Name`, T1.`FundingType`  HAVING AVG(T2.AvgScrMath) > 400"
    ],
    "1282": [
        "SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3",
        "SELECT P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3",
        "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
        "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
        "SELECT T1.Birthday FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
        "SELECT T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GPT < 60 ORDER BY T1.GPT DESC LIMIT 3"
    ],
    "103": [
        "SELECT T1.client_id FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE T2.issued = '1994-03-03'",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1996-10-21'",
        "SELECT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '940303'",
        "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '1994-03-03'"
    ],
    "1358": [
        "SELECT M.first_name, M.last_name FROM member AS M JOIN income AS I ON M.member_id = I.link_to_member WHERE I.source = 'Dues' AND I.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues')",
        "SELECT M.first_name || ' ' || M.last_name AS full_name FROM member AS M JOIN income AS I ON M.member_id = I.link_to_member WHERE I.source = 'Dues' ORDER BY I.date_received LIMIT 1",
        "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE member.member_id IN (SELECT link_to_member FROM income WHERE source = 'Dues' ORDER BY date_received ASC LIMIT 1)",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received ASC LIMIT 1",
        "SELECT m.first_name, m.last_name FROM income AS i JOIN member AS m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' AND i.date_received = (SELECT MIN(i2.date_received) FROM income AS i2 WHERE i2.source = 'Dues')",
        "SELECT T2.first_name || ' ' || T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' AND T1.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues')"
    ],
    "790": [
        "SELECT (SUM(T1.weight_kg) - (SELECT SUM(T2.weight_kg) FROM superhero AS T2 WHERE T2.full_name = 'Charles Chandler')) AS weight_difference FROM superhero AS T1 WHERE T1.full_name = 'Emil Blonsky'",
        "SELECT (SUM(weight_kg) WHERE full_name = 'Emil Blonsky') - (SUM(weight_kg) WHERE full_name = 'Charles Chandler') AS weight_difference FROM superhero",
        "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference",
        "SELECT (CAST(SUM(CASE WHEN T1.full_name = 'Emil Blonsky' THEN T1.weight_kg ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN T1.full_name = 'Charles Chandler' THEN T1.weight_kg ELSE 0 END) AS REAL)) FROM superhero AS T1",
        "SELECT (SUM(weight_kg) WHERE full_name = 'Emil Blonsky') - (SUM(weight_kg) WHERE full_name = 'Charles Chandler') AS weight_difference FROM superhero WHERE full_name IN ('Emil Blonsky', 'Charles Chandler')",
        "SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky'  MINUS  SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler'"
    ],
    "514": [
        "SELECT name FROM cards WHERE manaCost IS NOT NULL AND cards.id IN (SELECT id FROM legalities WHERE format = 'duel') ORDER BY CAST(SUBSTR(manaCost, 2, LENGTH(manaCost) - 2) AS REAL) DESC LIMIT 10",
        "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.manaCost DESC LIMIT 10",
        "SELECT name, manaCost FROM cards WHERE availability LIKE '%duels%' ORDER BY LENGTH(manaCost) DESC LIMIT 10",
        "SELECT id, manaCost FROM cards WHERE promoTypes = 'duels' ORDER BY manaCost DESC LIMIT 10",
        "SELECT T1.id FROM cards T1 JOIN legalities T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.manaCost DESC LIMIT 10",
        "SELECT name, manaCost FROM cards WHERE format = 'duel' ORDER BY manaCost DESC LIMIT 10"
    ],
    "884": [
        "SELECT name FROM races WHERE year = (SELECT MIN(year) FROM races) AND strftime('%m', date) = (SELECT strftime('%m', MIN(date)) FROM races) ORDER BY name",
        "SELECT races.name FROM races WHERE year = (SELECT MIN(year) FROM races) AND strftime('%m', date) = (SELECT strftime('%m', MIN(date)) FROM races)",
        "SELECT name FROM races WHERE date = (SELECT MIN(date) FROM races) ORDER BY name",
        "SELECT name FROM races WHERE strftime('%Y', date) = (SELECT strftime('%Y', min(date)) FROM races) AND strftime('%m', date) = (SELECT strftime('%m', min(date)) FROM races)",
        "SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', min(date)) FROM races)",
        "SELECT name FROM races WHERE STRFTIME('%Y', date) = (SELECT STRFTIME('%Y', MIN(date)) FROM races) AND STRFTIME('%m', date) = (SELECT STRFTIME('%m', MIN(date)) FROM races)"
    ],
    "1193": [
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'P')",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) BETWEEN '1980' AND '1989' AND `ANA Pattern` != 'P'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'P')",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND Patient.ID IN (SELECT ID FROM Examination WHERE `ANA Pattern` != 'P')",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND T2.`ANA Pattern` != 'P'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'P')"
    ],
    "1334": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'South Carolina'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.state = 'Illinois'"
    ],
    "477": [
        "SELECT artist FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "SELECT DISTINCT artist FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "SELECT DISTINCT artist FROM cards WHERE uuid IN (SELECT uuid FROM sets WHERE name = 'Coldsnap') AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.id = T2.id WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "SELECT T1.artist FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')"
    ],
    "1203": [
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5"
    ],
    "17": [
        "SELECT s.CharterNum, ss.AvgScrWrite FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL ORDER BY ss.AvgScrWrite",
        "SELECT s.CharterNum, ss.AvgScrWrite FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL ORDER BY ss.AvgScrWrite",
        "SELECT schools.CharterNum, AVG(satscores.AvgScrWrite) AS avg_writing_score FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite > 499 AND schools.CharterNum IS NOT NULL GROUP BY schools.CharterNum ORDER BY avg_writing_score DESC",
        "###SQL: SELECT T1.CharterNum, T2.AvgScrWrite FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND T1.CharterNum IS NOT NULL ORDER BY T2.AvgScrWrite DESC",
        "SELECT T2.CharterNum, T1.AvgScrWrite FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL ORDER BY T1.AvgScrWrite DESC",
        "SELECT T1.sname, T1.CharterNum, RANK() OVER (ORDER BY AVG(T1.AvgScrWrite) DESC) AS rank FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL GROUP BY T1.sname, T2.CharterNum"
    ],
    "1381": [
        "SELECT DISTINCT T2.first_name || ' ' || T2.last_name AS full_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T1.link_to_member HAVING COUNT(T1.link_to_event) > 7",
        "SELECT DISTINCT T2.first_name || ' ' || T2.last_name AS full_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.member_id HAVING COUNT(T1.link_to_event) > 7",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name HAVING COUNT(T2.link_to_event) > 7",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member  GROUP BY T1.member_id  HAVING COUNT(T2.link_to_event) > 7"
    ],
    "990": [
        "SELECT C.constructorRef, D.forename || ' ' || D.surname AS champion, R.name AS race_name, C.url FROM results AS R INNER JOIN constructors AS C ON R.constructorId = C.constructorId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId IN (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix') ORDER BY R.time LIMIT 1",
        "SELECT C.constructorRef, D.forename || ' ' || D.surname AS champion, R.name AS race_name, C.url FROM results AS R INNER JOIN constructors AS C ON R.constructorId = C.constructorId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId IN (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix') AND R.position = 1",
        "SELECT C.constructorRef, D.forename || ' ' || D.surname AS champion, R.name, C.url FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN constructors AS C ON R.constructorId = C.constructorId WHERE R.position = 1 AND R.raceId = (SELECT raceId FROM races WHERE name = 'Singapore Grand Prix' AND year = 2009) LIMIT 1",
        "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T1.position = 1",
        "SELECT C.constructorRef, C.url FROM results R JOIN constructors C ON R.constructorId = C.constructorId WHERE R.raceId = (SELECT raceId FROM races WHERE name = 'Singapore Grand Prix' AND year = 2009) AND R.time IS NOT NULL ORDER BY R.milliseconds LIMIT 1",
        "SELECT T2.constructorRef, T2.url  FROM results AS T1  INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId  WHERE T1.raceId = (SELECT T3.raceId FROM races AS T3 WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix')  ORDER BY T1.time ASC  LIMIT 1"
    ],
    "23": [
        "SELECT schools.School, schools.MailStreet FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30",
        "SELECT frpm.`School Name`, schools.MailStreet FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE ABS(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30",
        "SELECT f.`School Name`, s.MailStreet FROM frpm AS f INNER JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30",
        "SELECT s.`School Name`, s.Street, s.City, s.State, s.Zip FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE (CAST(f.`Enrollment (K-12)` AS REAL) - CAST(f.`Enrollment (Ages 5-17)` AS REAL)) > 30",
        "SELECT T1.`School Name`, T2.`MailStreet` FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL",
        "SELECT T1.`School Name`, T2.`MailStreet` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30"
    ],
    "432": [
        "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1",
        "SELECT T1.name, MAX(T1.baseSetSize) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.name ORDER BY MAX(T1.baseSetSize) DESC LIMIT 1",
        "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1",
        "SELECT sets.id, sets.baseSetSize FROM sets INNER JOIN foreign_data ON sets.code = foreign_data.setCode WHERE foreign_data.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1",
        "SELECT S.id FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Russian' ORDER BY S.baseSetSize DESC LIMIT 1",
        "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' AND T1.baseSetSize = (SELECT MAX(T3.baseSetSize) FROM sets AS T3 INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T4.language = 'Russian')"
    ],
    "519": [
        "SELECT language FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE sets.name = 'Battlebond'",
        "SELECT ST.language FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Battlebond'",
        "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Battlebond'",
        "SELECT set_translations.language FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Battlebond'",
        "SELECT ST.language FROM sets S JOIN set_translations ST ON S.code = ST.setCode WHERE S.name = 'Battlebond'",
        "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Battlebond'"
    ],
    "1335": [
        "SELECT T1.spent FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'",
        "SELECT T1.spent FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'",
        "SELECT SUM(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting'",
        "SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'",
        "SELECT SUM(T1.spent) FROM expense T1 INNER JOIN budget T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND T1.approved = 'true'",
        "SELECT SUM(T3.spent) FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  INNER JOIN expense AS T3 ON T1.budget_id = T3.link_to_budget  WHERE T2.event_name = 'September Meeting' AND T1.category = 'Advertisement'"
    ],
    "336": [
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.bond_type = '#' AND T2.label = '-'"
    ],
    "611": [
        "SELECT users.Reputation FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0'",
        "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'",
        "SELECT users.Reputation FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0'",
        "SELECT T2.reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'",
        "SELECT U.Reputation FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE B.Date = '2010-07-19 19:39:08.0'",
        "SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'"
    ],
    "969": [
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "SELECT T1.driverId, T1.forename, T1.surname FROM drivers AS T1 WHERE strftime('%Y', T1.dob) = '1980' AND T1.nationality = 'British'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob LIKE '1980-%'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'"
    ],
    "1063": [
        "SELECT Player_Attributes.potential FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Doran'",
        "SELECT Player_Attributes.potential FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Doran'",
        "SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran'",
        "SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran'",
        "SELECT PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran'",
        "SELECT T2.potential FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'"
    ],
    "173": [
        "SELECT account.frequency, SUM(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3 OR order.amount = 3539 GROUP BY account.frequency",
        "SELECT account.frequency, SUM(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3 AND order.k_symbol = 'UVER' GROUP BY account.frequency",
        "SELECT COUNT(*) AS statement_requests FROM order WHERE account_id = 3 AND k_symbol = 'SLUZBY'; SELECT SUM(amount) AS total_debit FROM order WHERE account_id = 3539",
        "SELECT COUNT(account_id), k_symbol FROM order WHERE account_id = 3 AND amount = 3539 GROUP BY k_symbol",
        "SELECT COUNT(*) AS frequency, (SELECT k_symbol FROM trans WHERE amount = 3539 AND k_symbol IS NOT NULL LIMIT 1) AS aim FROM order WHERE account_id = 3 AND k_symbol = 'SLUZBY'",
        "SELECT      (SELECT COUNT(*) FROM `order` WHERE `account_id` = 3 AND `k_symbol` = 'SLUZBY') AS statement_requests,     (SELECT `k_symbol` FROM `order` WHERE `amount` = 3539 LIMIT 1) AS debit_purpose"
    ],
    "389": [
        "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf'",
        "SELECT C.name, R.date FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.originalType = 'Creature - Elf'",
        "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf'",
        "SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "SELECT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature — Elf'",
        "SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'"
    ],
    "171": [
        "SELECT (SELECT A16 FROM district WHERE A3 = 'north Bohemia') - (SELECT A16 FROM district WHERE A3 = 'east Bohemia') AS crime_difference",
        "SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'north Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'east Bohemia') AS difference_in_crimes",
        "SELECT (SELECT A16 FROM district WHERE A3 = 'north Bohemia') - (SELECT A16 FROM district WHERE A3 = 'east Bohemia') AS crime_difference",
        "SELECT (SELECT COUNT(A16) FROM district WHERE region = 'north Bohemia' AND A16 IS NOT NULL) - (SELECT COUNT(A16) FROM district WHERE region = 'north Moravia' AND A16 IS NOT NULL) AS crime_difference",
        "SELECT (SELECT SUM(d.A16) FROM district AS d WHERE d.A3 = 'north Bohemia') - (SELECT SUM(d.A16) FROM district AS d WHERE d.A3 = 'East Bohemia') AS crime_difference",
        "SELECT (SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END)) AS crime_difference FROM district WHERE A3 IN ('north Bohemia', 'east Bohemia')"
    ],
    "802": [
        "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero WHERE height_cm IS NOT NULL AND height_cm > 0 ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"
    ],
    "588": [
        "SELECT COUNT(*) FROM comments WHERE UserId = 13",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13",
        "SELECT COUNT(*) AS total_number_of_comments FROM comments WHERE UserId = 13",
        "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13"
    ],
    "1222": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5",
        "SELECT COUNT(T1.SEX) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5"
    ],
    "1074": [
        "SELECT T.team_short_name FROM Match M JOIN Team T ON M.home_team_api_id = T.team_api_id WHERE M.home_team_goal = 10",
        "SELECT T.team_short_name FROM Match M JOIN Team T ON M.home_team_api_id = T.team_api_id WHERE M.home_team_goal = 10",
        "SELECT team_short_name FROM Team INNER JOIN Match ON Team.team_api_id = Match.home_team_api_id WHERE Match.home_team_goal = 10",
        "###SQL: SELECT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10",
        "SELECT T1.team_short_name FROM Match T2 JOIN Team T1 ON T2.home_team_api_id = T1.team_api_id WHERE T2.home_team_goal = 10",
        "SELECT DISTINCT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10"
    ],
    "1227": [
        "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS average_age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250",
        "SELECT CAST(SUM(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS REAL) / COUNT(P.ID) AS average_age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250",
        "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS average_age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250",
        "SELECT CAST(SUM(STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.Birthday)) AS REAL) / COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.`T-CHO` >= 250",
        "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS average_age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250",
        "SELECT AVG(YEAR('now') - DATE(birthday)) AS average_age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250"
    ],
    "259": [
        "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.element) AS How_many_elements FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.element) FROM bond T2 JOIN atom T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.element)  FROM bond AS T2  INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id  WHERE T2.bond_type = '-'"
    ],
    "287": [
        "SELECT ROUND(CAST(COUNT(CASE WHEN T1.bond_type = '=' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id), 5) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'",
        "SELECT (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR047'",
        "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id), 5) AS percent FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR047'",
        "SELECT (SUM(CASE WHEN T2.bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.bond_id)) AS percent FROM bond AS T2 WHERE T2.molecule_id = 'TR047'",
        "SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR047'"
    ],
    "1428": [
        "SELECT zip_code.city, zip_code.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code ON T1.zip = zip_code.zip_code WHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'",
        "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'",
        "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'",
        "SELECT Z.city, Z.state FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE MA.department = 'Electrical and Computer Engineering Department' AND M.position = 'Member'",
        "SELECT Z.city, Z.state FROM member AS M JOIN major AS MJ ON M.link_to_major = MJ.major_id JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE MJ.department = 'Electrical and Computer Engineering Department' AND M.position = 'Member'",
        "SELECT zip_code.city, zip_code.state  FROM member  INNER JOIN major ON member.link_to_major = major.major_id  INNER JOIN zip_code ON member.zip = zip_code.zip_code  WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'"
    ],
    "853": [
        "SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain'",
        "SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain'",
        "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain'",
        "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'",
        "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'",
        "SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain'"
    ],
    "436": [
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'",
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'",
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'",
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'",
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'",
        "SELECT id FROM cards WHERE frameEffects = 'extendedart'"
    ],
    "54": [
        "SELECT schools.School, schools.MailZip FROM schools WHERE schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian'",
        "SELECT schools.School, schools.MailZip FROM schools WHERE schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian'",
        "SELECT schools.School, schools.MailZip FROM schools WHERE schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian'",
        "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "SELECT School, MailZip FROM schools T1 WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "SELECT School, MailZip FROM schools WHERE (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') OR (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian')"
    ],
    "1141": [
        "SELECT TA.buildUpPlaySpeedClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'KSV Cercle Brugge'",
        "SELECT TA.buildUpPlaySpeedClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'KSV Cercle Brugge'",
        "SELECT TA.buildUpPlaySpeedClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'KSV Cercle Brugge'",
        "SELECT ta.buildUpPlaySpeedClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'KSV Cercle Brugge'",
        "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge'",
        "SELECT T2.buildUpPlaySpeedClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_long_name = 'KSV Cercle Brugge'"
    ],
    "11": [
        "SELECT frpm.CDSCode FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)`) > 500",
        "SELECT schools.CDSCode FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)`) > 500",
        "SELECT frpm.`CDSCode` FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500",
        "SELECT \"School Code\" FROM frpm WHERE (CAST(\"Enrollment (K-12)\" AS REAL) + CAST(\"Enrollment (Ages 5-17)\" AS REAL)) > 500",
        "SELECT CDSCode FROM frpm WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500",
        "SELECT CDSCode FROM frpm WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500"
    ],
    "12": [
        "SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE (T1.NumGE1500 / T1.NumTstTakr) > 0.3",
        "SELECT MAX(CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL)) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) > 0.3",
        "SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) FROM satscores INNER JOIN frpm ON satscores.cds = frpm.CDSCode WHERE (satscores.NumGE1500 / satscores.NumTstTakr) > 0.3",
        "SELECT MAX(frpm.Free Meal Count (Ages 5-17) / frpm.Enrollment (Ages 5-17)) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode INNER JOIN frpm ON frpm.CDSCode = schools.CDSCode WHERE (satscores.NumGE1500 / CAST(satscores.NumTstTakr AS REAL)) > 0.3",
        "SELECT (T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS Eligible_Free_Rate FROM satscores AS T1 JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE (T1.NumGE1500 * 1.0 / T1.NumTstTakr) > 0.3 AND T2.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T2.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY Eligible_Free_Rate DESC LIMIT 1",
        "SELECT MAX((frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) )  FROM satscores  INNER JOIN frpm ON satscores.cds = frpm.CDSCode  WHERE (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) > 0.3"
    ],
    "699": [
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "SELECT CreationDate FROM users AS T1 WHERE T1.DisplayName = 'IrishStat'",
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'"
    ],
    "1462": [
        "SELECT b.category, b.amount FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker'",
        "SELECT b.category, b.amount FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker'",
        "SELECT T2.category, T2.amount FROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'January Speaker'",
        "SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'",
        "SELECT T2.category, T2.amount FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
        "SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'"
    ],
    "307": [
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_2_3'",
        "SELECT T.element FROM atom AS T INNER JOIN connected AS C ON T.atom_id = C.atom_id OR T.atom_id = C.atom_id2 INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR000_2_3'",
        "SELECT A.element FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR000_2_3'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_2_3'",
        "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR000_2_3'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.atom_id = T2.bond_id WHERE T2.bond_id = 'TR000_2_3'"
    ],
    "1414": [
        "SELECT major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
        "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
        "SELECT M.major_name FROM member AS M WHERE M.first_name = 'Phillip' AND M.last_name = 'Cullen'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'"
    ],
    "1529": [
        "SELECT SUM(T1.Price) AS TotalSpent, SUM(T2.Consumption) AS JanuarySpent FROM transactions_1k AS T1 LEFT JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 38508 AND T2.Date = '201201'",
        "SELECT SUM(transactions_1k.Price) AS AmountSpent FROM transactions_1k WHERE transactions_1k.CustomerID = 38508; SELECT SUM(yearmonth.Consumption) AS AmountSpentInJanuary FROM yearmonth WHERE yearmonth.CustomerID = 38508 AND yearmonth.Date = '201201'",
        "SELECT SUM(T1.Amount) AS total_spent, SUM(T2.Consumption) AS january_spent FROM transactions_1k AS T1 LEFT JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 38508 AND T1.GasStationID IS NOT NULL AND T2.Date = '201201'",
        "SELECT SUM(T1.Amount) FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 38508 AND T2.Date = '201201'",
        "(SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508), (SELECT SUM(Amount) FROM transactions_1k T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 38508 AND T2.Date = '201201')",
        "SELECT SUM(Amount) AS total_spent, SUM(CASE WHEN Date = '201201' THEN Amount ELSE 0 END) AS january_spent  FROM transactions_1k  WHERE CustomerID = 38508"
    ],
    "553": [
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND strftime('%Y', T1.Date) = '2011'",
        "SELECT COUNT(badges.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011'",
        "SELECT COUNT(T1.Id) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND strftime('%Y', T1.Date) = '2011'",
        "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND STRFTIME('%Y', T1.Date) = '2011'"
    ],
    "1356": [
        "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'",
        "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "SELECT T2.department FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'"
    ],
    "676": [
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65"
    ],
    "53": [
        "SELECT SUM(s.NumTstTakr) FROM schools AS s WHERE s.MailCity = 'Fresno'",
        "SELECT SUM(satscores.NumTstTakr) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Fresno'",
        "SELECT SUM(satscores.NumTstTakr) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Fresno'",
        "SELECT COUNT(satscores.NumTstTakr) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Fresno'",
        "SELECT SUM(T2.NumTstTakr) FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno' AND T2.NumTstTakr IS NOT NULL",
        "SELECT SUM(satscores.NumTstTakr) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Fresno'"
    ],
    "397": [
        "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "SELECT manaCost, name FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "SELECT cards.manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2015' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
        "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%mtgo%' AND availability LIKE '%paper%'"
    ],
    "478": [
        "SELECT * FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = '4'",
        "SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = '4'",
        "SELECT id FROM cards WHERE number = '4' AND uuid IN (SELECT uuid FROM sets WHERE name = 'Coldsnap')",
        "SELECT id FROM cards WHERE setCode = 'COLD' AND number = '4'",
        "SELECT T1.id FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'",
        "SELECT T1.* FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'"
    ],
    "655": [
        "SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')",
        "SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')",
        "SELECT P2.Title, PL.LinkTypeId FROM posts AS P1 INNER JOIN postLinks AS PL ON P1.Id = PL.PostId INNER JOIN posts AS P2 ON PL.RelatedPostId = P2.Id WHERE P1.Title = 'What are principal component scores?'",
        "SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')",
        "SELECT T2.Title, T1.LinkTypeId FROM postLinks T1 JOIN posts T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')",
        "SELECT P2.Title, PL.LinkTypeId FROM posts AS P1 INNER JOIN postLinks AS PL ON P1.Id = PL.PostId INNER JOIN posts AS P2 ON PL.RelatedPostId = P2.Id WHERE P1.Title = 'What are principal component scores?'"
    ],
    "602": [
        "SELECT posts.Id AS post_id, posts.OwnerUserId AS user_id FROM posts WHERE posts.Score > 60",
        "SELECT posts.Id AS post_ID, posts.OwnerUserId AS user_ID FROM posts WHERE posts.Score > 60",
        "SELECT posts.Id AS post_id, posts.OwnerUserId AS user_id FROM posts WHERE posts.Score > 60",
        "SELECT posts.Id, posts.OwnerUserId FROM posts WHERE posts.Score > 60",
        "SELECT Id, OwnerUserId FROM posts WHERE Score > 60",
        "SELECT posts.Id, posts.OwnerUserId FROM posts WHERE posts.Score > 60"
    ],
    "1041": [
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(TA1.chanceCreationPassing) FROM Team_Attributes TA1 WHERE TA1.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00') ORDER BY TA.chanceCreationPassing DESC",
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date >= '2014-01-01 00:00:00' AND TA.date <= '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(T1.chanceCreationPassing) FROM Team_Attributes T1 WHERE T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-01-31 00:00:00') ORDER BY TA.chanceCreationPassing DESC",
        "SELECT t.team_long_name FROM Team AS t INNER JOIN Team_Attributes AS ta ON t.team_api_id = ta.team_api_id WHERE ta.buildUpPlayDribblingClass = 'Normal' AND ta.date >= '2014-01-01 00:00:00' AND ta.date <= '2014-01-31 00:00:00' AND ta.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY ta.chanceCreationPassing DESC",
        "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date >= '2014-01-01 00:00:00' AND T2.date <= '2014-01-31 23:59:59' AND 100.0 * SUM(T2.chanceCreationPassing) / COUNT(T2.id) < (SELECT AVG(T3.chanceCreationPassing) FROM Team_Attributes AS T3 WHERE T3.date >= '2014-01-01 00:00:00' AND T3.date <= '2014-01-31 23:59:59') GROUP BY T1.team_long_name ORDER BY SUM(T2.chanceCreationPassing) DESC",
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date >= '2014-01-01 00:00:00' AND TA.date <= '2014-01-31 00:00:00' AND TA.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY TA.chanceCreationPassing DESC",
        "SELECT T2.team_long_name  FROM Team_Attributes AS T1  INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.buildUpPlayDribblingClass = 'Normal'  AND T1.date >= '2014-01-01 00:00:00'  AND T1.date <= '2014-12-31 23:59:59'  AND T1.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-12-31 23:59:59') ORDER BY T1.chanceCreationPassing DESC"
    ],
    "1": [
        "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL) AS eligible_free_rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Educational Option Type` = 'Continuation School' ORDER BY eligible_free_rate ASC LIMIT 3",
        "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL) AS eligible_free_rate FROM frpm WHERE frpm.`Educational Option Type` = 'Continuation School' ORDER BY eligible_free_rate LIMIT 3",
        "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17` AS eligible_free_rate FROM frpm WHERE `School Type` = 'Continuation High Schools' ORDER BY eligible_free_rate ASC LIMIT 3",
        "SELECT CAST(T1.\"Free Meal Count (Ages 5-17)\" AS REAL) / CAST(T1.\"Enrollment (Ages 5-17)\" AS REAL) AS Eligible_Free_Rate FROM frpm AS T1 WHERE T1.\"School Type\" = 'Continuation High Schools' ORDER BY Eligible_Free_Rate ASC LIMIT 3",
        "SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SchoolType LIKE 'Continuation School' AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL AND frpm.`Free Meal Count (Ages 5-17)` IS NOT NULL ORDER BY eligible_free_rate ASC LIMIT 3",
        "SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS eligible_free_rate  FROM frpm  INNER JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.EdOpsName = 'Continuation School' AND frpm.`Enrollment (Ages 5-17)` > 0  ORDER BY eligible_free_rate ASC  LIMIT 3"
    ],
    "9": [
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath > 560 AND s.FundingType = 'Directly funded'",
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath > 560 AND s.FundingType = 'Directly funded'",
        "SELECT COUNT(*) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.FundingType = 'Directly funded'",
        "SELECT COUNT(schools.School) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 560 AND schools.FundingType = 'Directly funded'",
        "SELECT COUNT(*) FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
        "SELECT COUNT(*) FROM satscores AS S INNER JOIN schools AS SC ON S.cds = SC.CDSCode WHERE S.AvgScrMath > 560 AND SC.Charter = 1"
    ],
    "897": [
        "SELECT D.forename, D.surname, D.nationality, MAX(DS.points) FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE DS.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY D.driverId",
        "SELECT D.forename || ' ' || D.surname AS full_name, D.nationality, MAX(DS.points) AS max_points FROM drivers D INNER JOIN driverStandings DS ON D.driverId = DS.driverId WHERE DS.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY D.driverId, D.nationality",
        "SELECT D.forename || ' ' || D.surname AS driver_name, D.nationality, MAX(CS.points) FROM drivers AS D INNER JOIN constructorStandings AS CS ON D.driverId = CS.constructorId INNER JOIN (SELECT driverId, COUNT(wins) AS wins_count FROM driverStandings GROUP BY driverId) AS W ON D.driverId = W.driverId WHERE W.wins_count = (SELECT MAX(wins_count) FROM (SELECT driverId, COUNT(wins) AS wins_count FROM driverStandings GROUP BY driverId)) GROUP BY D.driverId",
        "SELECT T1.forename, T1.surname, T1.nationality, MAX(T3.points) FROM drivers AS T1 INNER JOIN driverStandings AS T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId ORDER BY SUM(T3.wins) DESC LIMIT 1",
        "SELECT T1.driverId, T1.wins, MAX(T2.points), T3.nationality FROM driverStandings T1 JOIN drivers T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId ORDER BY T1.wins DESC LIMIT 1",
        "SELECT T1.forename || ' ' || T1.surname AS driver_name, T1.nationality, MAX(T2.points) AS max_points FROM drivers AS T1 INNER JOIN results AS T3 ON T1.driverId = T3.driverId INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T3.positionOrder = 1 GROUP BY T1.driverId HAVING COUNT(T3.wins) = (SELECT MAX(win_count) FROM (SELECT COUNT(*) AS win_count FROM results WHERE positionOrder = 1 GROUP BY driverId))"
    ],
    "356": [
        "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "SELECT COUNT(id) FROM cards WHERE power = '*'",
        "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "SELECT COUNT(*) FROM cards WHERE power = '*'"
    ],
    "125": [
        "SELECT d.A2 AS district, ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_increment_rate FROM district AS d INNER JOIN loan AS l ON d.district_id = l.account_id WHERE l.status = 'D'",
        "SELECT district.A2 AS district, ((district.A13 - district.A12) / district.A12) * 100 AS state FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D'",
        "SELECT district.A3 AS state, district.A2 AS district, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_increment_rate FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D'",
        "SELECT T3.A2, CAST((T2.A13 - T2.A12) AS REAL) * 100.0 / CAST(T2.A12 AS REAL) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.client_id = T3.district_id WHERE T1.status = 'D'",
        "SELECT d.A2 AS district_name, ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_increment_percentage FROM loan AS l JOIN account AS a ON l.account_id = a.account_id JOIN district AS d ON a.district_id = d.district_id WHERE l.status = 'D'",
        "SELECT T3.A2 AS district, ((T3.A13 - T3.A12) / T3.A12) * 100 AS unemployment_increment  FROM loan AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T4 ON T2.client_id = T4.client_id  INNER JOIN district AS T3 ON T4.district_id = T3.district_id  WHERE T1.status = 'D'"
    ],
    "978": [
        "SELECT COUNT(races.raceId) AS race_count, circuits.location, circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Austria' GROUP BY circuits.location, circuits.lat, circuits.lng",
        "SELECT COUNT(DISTINCT circuits.location), COUNT(DISTINCT circuits.lat), COUNT(DISTINCT circuits.lng) FROM circuits WHERE circuits.country = 'Austria'",
        "SELECT COUNT(races.raceId) AS 'How many times', circuits.location AS 'How many location', '(' || circuits.lat || ',' || circuits.lng || ')' AS 'How many coordinates' FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'Austria' GROUP BY circuits.location, circuits.lat, circuits.lng",
        "###SQL: SELECT COUNT(T1.circuitId), T1.location, T1.lat, T1.lng FROM circuits AS T1 WHERE T1.country = 'Austria' GROUP BY T1.location, T1.lat, T1.lng",
        "SELECT COUNT(T1.raceId) AS race_count, T2.location, T2.lat, T2.lng FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Austria' GROUP BY T2.location, T2.lat, T2.lng",
        "SELECT COUNT(*) AS circuit_count, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng"
    ],
    "36": [
        "SELECT schools.AdmFName1 || ' ' || schools.AdmLName1 AS FullName FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 > 0 ORDER BY satscores.NumGE1500 DESC LIMIT 1",
        "SELECT schools.AdmFName1 || ' ' || schools.AdmLName1 AS FullName FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) LIMIT 1",
        "SELECT schools.School, MAX(satscores.NumGE1500) AS max_num_ge_1500, GROUP_CONCAT(schools.AdmFName1 || ' ' || schools.AdmLName1) AS full_names FROM satscores JOIN schools ON satscores.cds = schools.CDSCode GROUP BY schools.School ORDER BY max_num_ge_1500 DESC LIMIT 1",
        "SELECT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 >= 1500 ORDER BY T2.NumGE1500 DESC LIMIT 1",
        "SELECT AdmFName1, AdmLName1 FROM schools AS S JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE SAT.NumGE1500 IS NOT NULL ORDER BY SAT.NumGE1500 DESC LIMIT 1",
        "SELECT T1.AdmFName1 || ' ' || T1.AdmLName1 AS FullName FROM satscores AS T2 INNER JOIN schools AS T1 ON T2.cds = T1.CDSCode WHERE T2.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) UNION SELECT T1.AdmFName2 || ' ' || T1.AdmLName2 AS FullName FROM satscores AS T2 INNER JOIN schools AS T1 ON T2.cds = T1.CDSCode WHERE T2.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) UNION SELECT T1.AdmFName3 || ' ' || T1.AdmLName3 AS FullName FROM satscores AS T2 INNER JOIN schools AS T1 ON T2.cds = T1.CDSCode WHERE T2.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)"
    ],
    "1104": [
        "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00'",
        "SELECT PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Parravicini' AND PA.date = '2010-08-30 00:00:00'",
        "SELECT pa.potential FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francesco Parravicini' AND pa.date = '2010-08-30 00:00:00'",
        "SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'",
        "SELECT PA.potential FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francesco Parravicini' AND PA.date = '2010-08-30 00:00:00'",
        "SELECT T2.potential FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Parravicini' AND T2.date = '2010-08-30 00:00:00'"
    ],
    "1518": [
        "SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00'",
        "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date = '2012-08-24' AND T2.Time = '12:42:00'",
        "SELECT gasstations.Country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '12:42:00'",
        "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
        "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
        "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"
    ],
    "191": [
        "SELECT COUNT(DISTINCT T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(DISTINCT loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(DISTINCT loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(DISTINCT L.loan_id) FROM loan AS L JOIN account AS A ON L.account_id = A.account_id WHERE L.duration = 24 AND A.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.duration = 24 AND A.frequency = 'POPLATEK TYDNE'"
    ],
    "1113": [
        "SELECT TA.defenceAggressionClass FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Hannover 96' AND TA.date LIKE '2015-09-10%'",
        "SELECT T1.defenceAggressionClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date LIKE '2015-09-10%'",
        "SELECT TA.defenceAggressionClass FROM Team_Attributes TA INNER JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Hannover 96' AND TA.date LIKE '2015-09-10%'",
        "SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'",
        "SELECT TA.defenceAggressionClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Hannover 96' AND TA.date LIKE '2015-09-10%'",
        "SELECT T2.defenceAggressionClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'"
    ],
    "761": [
        "SELECT superhero_name FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id WHERE G.gender = 'Male' AND S.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
        "SELECT superhero_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > CAST((SELECT AVG(weight_kg) FROM superhero) AS FLOAT) * 0.79",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN gender AS T2 ON T1.gender_id = T2.id  WHERE T2.gender = 'Male'  AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)"
    ],
    "1190": [
        "SELECT (COUNT(CASE WHEN L.UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.`U-PRO` > 0 AND L.`U-PRO` < 30 THEN 1 END)) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT (COUNT(CASE WHEN L.UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.`U-PRO` > 0 AND L.`U-PRO` < 30 THEN 1 END)) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT CAST((COUNT(CASE WHEN L.UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.`U-PRO` > 0 AND L.`U-PRO` < 30 THEN 1 END)) AS REAL) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT CAST(SUM(CASE WHEN T1.UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100.0 / CAST(COUNT(T1.ID) AS REAL) FROM Laboratory AS T1 WHERE T1.`U-PRO` > 0 AND T1.`U-PRO` < 30",
        "SELECT (COUNT(CASE WHEN L.UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.`U-PRO` > 0 AND L.`U-PRO` < 30 THEN 1 END)) AS percentage FROM Laboratory L WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT (COUNT(CASE WHEN L.UA <= 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM Laboratory AS L  WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30"
    ],
    "258": [
        "SELECT DISTINCT T3.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'sn'",
        "SELECT DISTINCT B.bond_type FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id OR C.atom_id2 = A.atom_id WHERE A.element = 'sn'",
        "SELECT T2.bond_type, T1.atom_id, T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'sn' INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id",
        "SELECT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'sn'",
        "SELECT T2.bond_type FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'sn'",
        "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'"
    ],
    "1102": [
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 77 AND PA.date LIKE '2016-06-23%' ORDER BY P.birthday ASC LIMIT 1",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 77 AND PA.date LIKE '2016-06-23%' ORDER BY P.birthday ASC LIMIT 1",
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date LIKE '2016-06-23%' ORDER BY Player.birthday ASC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 60 AND T2.date LIKE '2016-06-23%' ORDER BY T1.birthday ASC LIMIT 1",
        "SELECT P.player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating = 77 AND PA.date LIKE '2016-06-23%' ORDER BY P.birthday ASC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date LIKE '2016-06-23%' ORDER BY T1.birthday ASC LIMIT 1"
    ],
    "139": [
        "SELECT COUNT(T1.card_id) FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT COUNT(DISTINCT card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
        "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT COUNT(*) FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT COUNT(*) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'"
    ],
    "764": [
        "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1",
        "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1",
        "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1",
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "SELECT T2.power_name FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1"
    ],
    "1111": [
        "SELECT TA.chanceCreationPassingClass FROM Team_Attributes TA INNER JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00'",
        "SELECT TA.chanceCreationPassingClass FROM Team_Attributes TA INNER JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00'",
        "SELECT Team_Attributes.chanceCreationPassingClass FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'PEC Zwolle' AND Team_Attributes.date = '2013-09-20 00:00:00'",
        "SELECT T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'PEC Zwolle' AND T1.date = '2013-09-20 00:00:00'",
        "SELECT TA.chanceCreationPassingClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00'",
        "SELECT T2.chanceCreationPassingClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'"
    ],
    "1344": [
        "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "SELECT notes FROM income WHERE source = 'Sponsorship' AND date_received = '2019-09-14'",
        "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'"
    ],
    "342": [
        "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
        "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
        "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
        "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
        "SELECT name FROM cards WHERE faceConvertedManaCost IS NOT NULL ORDER BY faceConvertedManaCost DESC LIMIT 1",
        "SELECT DISTINCT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)"
    ],
    "945": [
        "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'",
        "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'",
        "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'",
        "###SQL: SELECT COUNT(circuits.circuitId) FROM circuits WHERE circuits.location = 'Adelaide' AND circuits.country = 'Australia'",
        "SELECT COUNT(circuitId) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'",
        "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'"
    ],
    "1272": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` ASC LIMIT 1",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` ASC LIMIT 1",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` LIMIT 1",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
        "SELECT T1.ID FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1"
    ],
    "1021": [
        "SELECT MAX(height) AS height, player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT MAX(height) AS height, player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT MAX(height) AS height, player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)",
        "SELECT T1.player_name, T2.height FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.height DESC LIMIT 1",
        "SELECT height, player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)",
        "SELECT T1.player_name, T1.height FROM Player AS T1 WHERE T1.height = (SELECT MAX(T2.height) FROM Player AS T2)"
    ],
    "328": [
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T3.molecule_id = 'TR024'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T3.molecule_id = 'TR024'",
        "SELECT A.element FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE B.bond_type = '=' AND A.molecule_id = 'TR024'",
        "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND bond.molecule_id = 'TR024'",
        "SELECT DISTINCT T1.element FROM atom T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T2.molecule_id = 'TR024'",
        "SELECT DISTINCT T1.element  FROM bond AS T2  INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id  WHERE T2.bond_type = '=' AND T2.molecule_id = 'TR024'"
    ],
    "248": [
        "SELECT C.atom_id, C.atom_id2 FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.molecule_id = 'TR041' AND B.bond_type = '#'",
        "SELECT T1.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR041' AND T1.bond_type = '#'",
        "SELECT C.atom_id, C.atom_id2 FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.molecule_id = 'TR041' AND B.bond_type = '#'",
        "SELECT T1.atom_id FROM connected AS T3 INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id WHERE T2.bond_type = '#' AND T2.molecule_id = 'TR041'",
        "SELECT T2.atom_id FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR041' AND T1.bond_type = '#'",
        "SELECT T1.atom_id FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T1.molecule_id = 'TR041'"
    ],
    "80": [
        "SELECT schools.SchoolType, schools.School, schools.Latitude FROM schools ORDER BY schools.Latitude DESC LIMIT 1",
        "SELECT schools.SchoolType, schools.School, schools.Latitude FROM schools ORDER BY schools.Latitude DESC LIMIT 1",
        "SELECT schools.`School Type`, schools.`School`, schools.`Latitude` FROM schools ORDER BY schools.`Latitude` DESC LIMIT 1",
        "SELECT T1.`School Type`, T1.`School Name`, T1.`Latitude` FROM schools AS T1 WHERE T1.Latitude = (SELECT MAX(Latitude) FROM schools)",
        "SELECT T1.`School Type`, T1.`School Name`, T1.`Latitude` FROM schools AS T1 ORDER BY T1.`Latitude` DESC LIMIT 1",
        "SELECT School, School_Type, Latitude FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools)"
    ],
    "696": [
        "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%<careers>%'",
        "SELECT COUNT(*) FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE TagName = 'careers')",
        "SELECT COUNT(*) FROM posts INNER JOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%' WHERE tags.TagName = 'careers'",
        "SELECT COUNT(T2.PostId) FROM tags AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.TagId WHERE T1.TagName = 'careers'",
        "SELECT COUNT(T1.Id) FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Tags WHERE T1.TagName = 'careers'",
        "SELECT COUNT(DISTINCT PL.PostId) FROM postLinks AS PL INNER JOIN tags AS T ON PL.LinkTypeId = T.Id WHERE T.TagName = 'careers'"
    ],
    "702": [
        "SELECT COUNT(*) FROM posts WHERE Score < 20",
        "SELECT COUNT(*) FROM posts WHERE Score < 20",
        "SELECT COUNT(*) FROM posts WHERE Score < 20",
        "SELECT COUNT(Id) FROM posts WHERE Score < 20",
        "SELECT COUNT(*) FROM posts WHERE Score < 20",
        "SELECT COUNT(*) FROM posts WHERE Score < 20"
    ],
    "741": [
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero T1 JOIN hero_power T2 ON T1.id = T2.hero_id GROUP BY T1.id ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
        "SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) = (SELECT MAX(power_count) FROM (SELECT COUNT(power_id) AS power_count FROM hero_power GROUP BY hero_id)))"
    ],
    "1525": [
        "SELECT (COUNT(DISTINCT c.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers)) AS percentage_eur_customers FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR'",
        "SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*) AS percentage FROM customers WHERE CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25')",
        "SELECT (COUNT(DISTINCT c.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers)) AS percentage FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-25' AND c.Currency = 'EUR'",
        "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.CustomerID) AS REAL) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'",
        "SELECT (COUNT(CASE WHEN C.Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM transactions_1k T1 JOIN customers C ON T1.CustomerID = C.CustomerID WHERE T1.Date = '2012-08-25'",
        "SELECT (COUNT(DISTINCT CASE WHEN C.Currency = 'EUR' THEN T.CustomerID END) * 100.0 / COUNT(DISTINCT T.CustomerID)) AS percentage FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-25'"
    ],
    "1298": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P.S'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'"
    ],
    "442": [
        "SELECT S.baseSetSize, S.code FROM sets AS S WHERE S.block IN ('Masques', 'Mirage')",
        "SELECT S.baseSetSize, S.code FROM sets AS S WHERE S.block IN ('Masques', 'Mirage')",
        "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')",
        "SELECT T1.baseSetSize, T1.code FROM sets AS T1 WHERE T1.block IN ('Masques', 'Mirage')",
        "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')",
        "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')"
    ],
    "653": [
        "SELECT T1.OwnerDisplayName FROM posts AS T1 ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1",
        "SELECT p.OwnerDisplayName FROM posts p ORDER BY p.ViewCount DESC LIMIT 1",
        "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)",
        "SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1",
        "SELECT T2.DisplayName  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T1.ViewCount = (SELECT MAX(ViewCount) FROM posts)"
    ],
    "154": [
        "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A2 = 'Hl.m. Praha'",
        "SELECT COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'"
    ],
    "1406": [
        "SELECT budget.amount FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
        "SELECT MAX(budget.amount) FROM budget WHERE budget.category = 'Food'",
        "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
        "SELECT category, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
        "SELECT amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
        "SELECT MAX(amount) FROM budget WHERE category = 'Food'"
    ],
    "947": [
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'",
        "SELECT COUNT(driverId) FROM drivers WHERE strftime('%Y', dob) > '1980' AND nationality = 'British'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'",
        "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01'"
    ],
    "310": [
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT B.molecule_id) FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '=' AND M.label = '+'",
        "SELECT COUNT(DISTINCT m.molecule_id) AS total_double_bonds, COUNT(DISTINCT CASE WHEN m.label = '+' THEN m.molecule_id END) AS total_carcinogenic FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '='",
        "SELECT COUNT(DISTINCT T2.molecule_id)  FROM bond AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.bond_type = ' = ' AND T2.label = '+'"
    ],
    "1441": [
        "SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Education' AND college = 'College of Education & Human Services') AND position = 'Member'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name LIKE '%education%' AND T1.position = 'Member' AND T2.college = 'College of Education & Human Services'",
        "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name LIKE '%Education%' AND M.position = 'Member'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business Education' AND T1.position = 'Member'",
        "SELECT COUNT(T1.member_id) FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name LIKE '%education%' AND T1.position = 'Member'",
        "SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T1.position = 'Member'"
    ],
    "79": [
        "SELECT schools.County, COUNT(schools.School) AS amount FROM schools WHERE schools.Virtual = 'F' GROUP BY schools.County ORDER BY amount DESC LIMIT 1",
        "SELECT schools.County, COUNT(*) AS `amount` FROM schools WHERE schools.Virtual = 'F' GROUP BY schools.County ORDER BY `amount` DESC LIMIT 1",
        "SELECT T1.County, COUNT(T1.School) AS SchoolCount FROM schools AS T1 WHERE T1.Virtual = 'F' AND T1.County IN ('San Diego', 'Santa Barbara') GROUP BY T1.County ORDER BY SchoolCount DESC LIMIT 1",
        "SELECT schools.County, COUNT(schools.CDSCode) FROM schools WHERE schools.County IN ('San Diego', 'Santa Barbara') AND schools.Virtual = 'F' GROUP BY schools.County",
        "SELECT schools.County, COUNT(*) AS school_count FROM schools WHERE schools.Virtual = 'F' AND schools.County IN ('San Diego', 'Santa Barbara') GROUP BY schools.County ORDER BY school_count DESC LIMIT 1",
        "SELECT County, COUNT(*) as SchoolCount  FROM schools  WHERE Virtual = 'F' AND (County = 'San Diego' OR County = 'Santa Barbara')  GROUP BY County  ORDER BY SchoolCount DESC  LIMIT 1"
    ],
    "522": [
        "SELECT T1.name, T2.format FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
        "SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'Banned'",
        "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
        "SELECT T1.name, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
        "SELECT cards.id, cards.name, legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'Banned'",
        "SELECT T1.name, T2.format  FROM cards AS T1  INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'"
    ],
    "917": [
        "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "SELECT url FROM drivers WHERE driverRef = 'davidson'",
        "SELECT url FROM drivers WHERE driverRef = 'davidson'",
        "###SQL: SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"
    ],
    "1095": [
        "SELECT AVG(TA.buildUpPlaySpeed) FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Heart of Midlothian'",
        "SELECT AVG(TA.buildUpPlaySpeed) FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Heart of Midlothian'",
        "SELECT AVG(ta.buildUpPlaySpeed) FROM Team_Attributes AS ta INNER JOIN Team AS t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Heart of Midlothian'",
        "SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Heart of Midlothian'",
        "SELECT AVG(TA.buildUpPlaySpeed) FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Heart of Midlothian'",
        "SELECT AVG(TA.buildUpPlaySpeed)  FROM Team AS T  INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id  WHERE T.team_long_name = 'Heart of Midlothian'"
    ],
    "133": [
        "SELECT district.A10 AS branch_location, district.A2 AS district_name FROM district ORDER BY district.A13 DESC",
        "SELECT district.A4 AS branch_location, district.A2 AS district_name FROM district WHERE district.A13 = (SELECT MAX(A13) FROM district)",
        "SELECT district.A4 AS branch_location, district.A2 AS district_name FROM district WHERE district.A13 = (SELECT MAX(A13) FROM district)",
        "SELECT district.district_id, district.A2 FROM district WHERE A13 = (SELECT MAX(A13) FROM district)",
        "SELECT district.A2, district.district_id FROM district WHERE district.A13 = (SELECT MAX(A13) FROM district)",
        "SELECT district_id, A2 FROM district WHERE A13 = (SELECT MAX(A13) FROM district WHERE A13 IS NOT NULL)"
    ],
    "1213": [
        "SELECT P.ID, CASE WHEN L.ALP < 300 THEN 'Yes' ELSE 'No' END AS Is FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01'",
        "SELECT Patient.ID, CASE WHEN Laboratory.ALP < 300 THEN 'Yes' ELSE 'No' END AS Is FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01'",
        "SELECT T1.ID, CASE WHEN T2.ALP < 300 THEN 'Yes' ELSE 'No' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
        "SELECT P.ID, L.ALP FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01' AND L.ALP < 300",
        "SELECT P.ID, CASE WHEN L.ALP < 300 THEN 'Yes' ELSE 'No' END AS ALP_within_normal_range FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01'",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01' AND L.ALP < 300"
    ],
    "887": [
        "SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000) ORDER BY name",
        "SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000)",
        "SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000) ORDER BY name",
        "SELECT T1.name FROM races AS T1 WHERE T1.year = 2017",
        "SELECT T1.name FROM races T1 WHERE T1.year = 2017 AND T1.raceId NOT IN (SELECT T2.raceId FROM races T2 WHERE T2.year = 2000)",
        "SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000)"
    ],
    "338": [
        "SELECT a.atom_id FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element = 'c' AND b.bond_type = '=' AND a.molecule_id = 'TR012'",
        "SELECT atom.atom_id FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type = '=' AND atom.molecule_id = 'TR012'",
        "SELECT A.atom_id FROM atom AS A JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE A.element = 'c' AND B.bond_type = '=' AND A.molecule_id = 'TR012'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'c' AND T2.bond_type = '=' AND T1.molecule_id = 'TR012'",
        "SELECT T1.atom_id FROM atom T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = ' = ' AND T1.molecule_id = 'TR012'",
        "SELECT T1.atom_id  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '=' AND T2.molecule_id = 'TR012' AND T1.element = 'c'"
    ],
    "531": [
        "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1",
        "SELECT Id, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1"
    ],
    "1058": [
        "SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing IS NOT NULL AND height IN (SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player) GROUP BY T1.player_fifa_api_id ORDER BY AVG(T2.finishing) DESC LIMIT 1",
        "SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height IN (SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player) GROUP BY T1.player_fifa_api_id ORDER BY AVG(T2.finishing) DESC LIMIT 1",
        "SELECT player_name FROM Player WHERE height IN (SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player) GROUP BY player_name ORDER BY AVG(finishing) DESC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM Player) OR T1.height = (SELECT MIN(height) FROM Player) GROUP BY T1.player_name ORDER BY AVG(T2.finishing) DESC LIMIT 1",
        "SELECT MAX(avg_finishing) FROM (SELECT AVG(PA.finishing) as avg_finishing FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height = (SELECT MAX(height) FROM Player) UNION ALL SELECT AVG(PA.finishing) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height = (SELECT MIN(height) FROM Player)) as averages",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player) GROUP BY T1.player_name ORDER BY AVG(T2.finishing) DESC LIMIT 1"
    ],
    "256": [
        "SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('c', 'h')",
        "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')",
        "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 WHERE T1.element IN ('c', 'h')",
        "SELECT COUNT(atom_id) FROM atom WHERE element IN ('c', 'h')",
        "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')"
    ],
    "953": [
        "SELECT COUNT(DISTINCT C.constructorId) FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE C.nationality = 'French' AND CR.lap > 50",
        "SELECT COUNT(DISTINCT C.constructorId) FROM constructors C INNER JOIN constructorResults CR ON C.constructorId = CR.constructorId WHERE C.nationality = 'French' AND CR.lap > 50",
        "SELECT COUNT(DISTINCT C.constructorId) FROM constructors AS C INNER JOIN results AS R ON C.constructorId = R.constructorId WHERE C.nationality = 'French' AND R.laps > 50",
        "SELECT COUNT(DISTINCT CR.constructorId) FROM constructorResults AS CR INNER JOIN drivers AS D ON CR.driverId = D.driverId INNER JOIN results AS R ON CR.raceId = R.raceId WHERE D.nationality = 'French' AND R.laps > 50",
        "SELECT COUNT(DISTINCT T1.constructorId) FROM constructors T1 JOIN results T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50",
        "SELECT COUNT(DISTINCT T1.constructorId)  FROM results AS T1  INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId  WHERE T1.laps > 50 AND T2.nationality = 'French'"
    ],
    "341": [
        "SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)",
        "SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)",
        "SELECT * FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)",
        "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NULL",
        "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL",
        "SELECT name FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)"
    ],
    "121": [
        "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'",
        "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'",
        "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'",
        "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "SELECT T1.account_id, T1.date FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "SELECT T1.account_id, T1.date  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Prachatice'"
    ],
    "211": [
        "SELECT DISTINCT a.atom_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-'",
        "SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected AS c JOIN molecule AS m ON c.bond_id = m.molecule_id WHERE m.label = '-'",
        "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '-'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN molecule AS T2 ON T1.bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = T2.molecule_id) WHERE T2.label = '-'",
        "SELECT DISTINCT C.atom_id, C.atom_id2 FROM molecule AS M JOIN connected AS C ON M.molecule_id = C.bond_id WHERE M.label = '-'",
        "SELECT connected.atom_id, connected.atom_id2  FROM connected  INNER JOIN molecule ON connected.bond_id = molecule.molecule_id  WHERE molecule.label = '-'"
    ],
    "749": [
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"
    ],
    "712": [
        "SELECT p.Id, c.Text FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item'",
        "SELECT T1.PostId, T1.Text FROM comments T1 INNER JOIN posts T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
        "SELECT p.Id, c.Text FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item'",
        "SELECT T1.Id, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'",
        "SELECT P.Id, C.Text FROM posts AS P JOIN comments AS C ON P.Id = C.PostId WHERE P.Title = 'Group differences on a five point Likert item'",
        "SELECT T1.Id AS post_id, T2.Text AS comment_text  FROM posts AS T1  INNER JOIN comments AS T2 ON T1.Id = T2.PostId  WHERE T1.Title = 'Group differences on a five point Likert item'"
    ],
    "1067": [
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70",
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70",
        "SELECT Team.team_short_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.buildUpPlayPassing > 70",
        "SELECT team_short_name FROM Team_Attributes WHERE buildUpPlayPassing > 70",
        "SELECT T2.team_short_name FROM Team_Attributes T1 JOIN Team T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70",
        "SELECT T2.team_short_name  FROM Team_Attributes AS T1  INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.buildUpPlayPassing > 70"
    ],
    "826": [
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1",
        "SELECT T1.superhero_name, T1.weight_kg FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "SELECT T1.id FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' AND T1.weight_kg IS NOT NULL AND T1.weight_kg > 0 ORDER BY T1.weight_kg DESC LIMIT 1",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  WHERE T2.publisher_name = 'DC Comics'  ORDER BY T1.weight_kg DESC  LIMIT 1"
    ],
    "1286": [
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+'",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
        "SELECT COUNT(P1.ID) FROM Laboratory AS P1 INNER JOIN Patient AS P2 ON P1.ID = P2.ID WHERE P1.ALP >= 300 AND P2.Admission = '+'",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
        "SELECT COUNT(DISTINCT Patient.ID)  FROM Laboratory  INNER JOIN Patient ON Laboratory.ID = Patient.ID  WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+'"
    ],
    "1164": [
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND STRFTIME('%Y', T1.Description) = '1997'",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND STRFTIME('%Y', T1.Description) = '1997'",
        "SELECT COUNT(Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 1 AND strftime('%Y', Examination.`Examination Date`) = '1997' AND Patient.SEX = 'F'",
        "###SQL: SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.SEX = 'F' AND strftime('%Y', T1.`Examination Date`) = '1997'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND strftime('%Y', E.`Examination Date`) = '1997'",
        "SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND STRFTIME('%Y', E.`Examination Date`) = '1997' AND P.SEX = 'F'"
    ],
    "293": [
        "SELECT COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
        "SELECT COUNT(a.atom_id) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+'",
        "SELECT COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    ],
    "1225": [
        "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS patients FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX",
        "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS patients FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX",
        "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS patients FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX",
        "SELECT GROUP_CONCAT(DISTINCT T1.ID), T2.SEX FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 GROUP BY T2.SEX",
        "SELECT P.SEX, GROUP_CONCAT(DISTINCT P.ID) AS Patient_IDs FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 GROUP BY P.SEX",
        "SELECT P.SEX, GROUP_CONCAT(DISTINCT L.ID) AS Patient_IDs  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.`T-BIL` >= 2.0  GROUP BY P.SEX"
    ],
    "165": [
        "SELECT trans.trans_id, trans.amount, trans.date FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5",
        "SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5",
        "SELECT trans.trans_id, trans.amount, trans.date FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5",
        "SELECT T1.trans_id, T1.account_id, T1.date, T1.type, T1.operation, T1.amount, T1.balance, T1.k_symbol FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5",
        "SELECT T1.* FROM trans T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5",
        "SELECT T1.trans_id, T1.amount, T1.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5"
    ],
    "73": [
        "SELECT frpm.`Free Meal Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.`MailStreet` = 'PO Box 1040' AND frpm.`Educational Option Type` = 'Youth Authority School'",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsName = 'Youth Authority School' AND schools.MailStreet = 'PO Box 1040'",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.MailStreet = 'PO Box 1040' AND frpm.`Educational Option Type` = 'Youth Authority School'",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.MailStreet = 'PO Box 1040'",
        "SELECT T1.`Free Meal Count (Ages 5-17)` FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Youth Authority School' AND T2.MailStreet = 'PO Box 1040'",
        "SELECT frpm.`Free Meal Count (Ages 5-17)`  FROM frpm  INNER JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.EdOpsName = 'Youth Authority School' AND schools.MailStreet = 'PO Box 1040'"
    ],
    "698": [
        "SELECT COUNT(c.Id) AS CommentCount, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data'",
        "SELECT COUNT(*) AS CommentsCount, (SELECT COUNT(*) FROM posts WHERE Title = 'Clustering 1D data') AS AnswersCount FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')",
        "SELECT COUNT(c.Id) AS CommentCount, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data'",
        "SELECT COUNT(CM.Id) AS CommentCount, P.AnswerCount AS AnswerCount FROM comments AS CM INNER JOIN posts AS P ON CM.PostId = P.Id WHERE P.Title = 'Clustering 1D data'",
        "SELECT (SELECT COUNT(*) FROM comments T1 WHERE T1.PostId = (SELECT Id FROM posts T2 WHERE T2.Title = 'Clustering 1D data')) AS CommentCount, (SELECT COUNT(*) FROM posts T3 WHERE T3.ParentId = (SELECT Id FROM posts T4 WHERE T4.Title = 'Clustering 1D data')) AS AnswerCount",
        "SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) + (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') AS TotalCommentsAndAnswers"
    ],
    "954": [
        "SELECT CAST(COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(R.driverId) AS \"race completion percentage\", D.nationality AS \"Japanese drivers\" FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE D.nationality = 'Japanese' AND RA.year BETWEEN 2007 AND 2009",
        "SELECT CAST(COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(R.driverId) AS \"race completion percentage\", 'Japanese drivers' FROM results AS R JOIN drivers AS D ON R.driverId = D.driverId JOIN races AS RA ON R.raceId = RA.raceId WHERE D.nationality = 'Japanese' AND RA.year BETWEEN 2007 AND 2009",
        "SELECT CAST(COUNT(T1.driverId) AS REAL) * 100 / COUNT(T1.driverId) AS race_completion_percentage, 'Japanese drivers' FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009 AND T1.time IS NOT NULL",
        "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.DriverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year BETWEEN 2007 AND 2009",
        "SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS race_completion_percentage FROM drivers D JOIN results R ON D.driverId = R.driverId JOIN races RA ON R.raceId = RA.raceId WHERE D.nationality = 'Japanese' AND RA.year BETWEEN 2007 AND 2009",
        "SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_percentage  FROM results AS R  INNER JOIN drivers AS D ON R.driverId = D.driverId  INNER JOIN races AS RA ON R.raceId = RA.raceId  WHERE D.nationality = 'Japanese' AND RA.year BETWEEN 2007 AND 2009"
    ],
    "440": [
        "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'A Pedra Fellwar'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'A Pedra Fellwar'",
        "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar'",
        "SELECT FD.language FROM cards AS C JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.name = 'A Pedra Fellwar'",
        "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'A Pedra Fellwar'"
    ],
    "1350": [
        "SELECT event.status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20'",
        "SELECT e.event_status FROM expense AS exp INNER JOIN budget AS b ON exp.link_to_budget = b.budget_id INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE exp.expense_description = 'Post Cards, Posters' AND exp.expense_date = '2019-08-20'",
        "SELECT event.status FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20'",
        "SELECT T1.event_status FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.link_to_budget = T3.link_to_budget WHERE T3.expense_description = 'Post Cards, Posters' AND T3.expense_date = '2019-08-20'",
        "SELECT T3.event_status FROM expense AS T1 JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'",
        "SELECT T3.status FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'"
    ],
    "1270": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SC170 IN ('negative', '0') AND P.SEX = 'F' AND P.Symptoms IS NULL",
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', (SELECT COUNT(DISTINCT P2.ID) FROM Patient AS P2 INNER JOIN Examination AS E2 ON P2.ID = E2.ID WHERE P2.SEX = 'F' AND E2.Symptoms IS NULL AND P2.ID IN (SELECT DISTINCT L.ID FROM Laboratory AS L WHERE L.SC170 IN ('negative', '0'))) AS 'how many female' FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.SC170 IN ('negative', '0') AND P.ID IN (SELECT DISTINCT E.ID FROM Examination AS E WHERE E.Symptoms IS NULL)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SC170 IN ('negative', '0') AND P.SEX = 'F' AND P.Symptoms IS NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative', '0') AND T1.SEX = 'F' AND T2.SYMPTOMS IS NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Symptoms IS NULL AND E.SC170 IN ('negative', '0')",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.SC170 IN ('negative', '0') AND P.SEX = 'F' AND P.Symptoms IS NULL"
    ],
    "260": [
        "SELECT COUNT(DISTINCT T1.atom_id) AS total_atoms FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')",
        "SELECT COUNT(DISTINCT A.atom_id) FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE B.bond_type = '#' AND (A.element = 'p' OR A.element = 'br')",
        "SELECT COUNT(DISTINCT T1.atom_id) AS total_atoms FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')",
        "SELECT COUNT(T2.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')",
        "SELECT COUNT(DISTINCT T1.atom_id) FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND (T2.element = 'p' OR T2.element = 'br')",
        "SELECT COUNT(T1.atom_id)  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')"
    ],
    "1064": [
        "SELECT player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left'",
        "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left'",
        "SELECT p.player_name FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE pa.preferred_foot = 'left'",
        "###SQL: SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left'",
        "SELECT P.id FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left'",
        "SELECT player_name FROM Player WHERE preferred_foot = 'left'"
    ],
    "490": [
        "SELECT T1.mcmId FROM sets AS T1 WHERE T1.code = 'SS2'",
        "SELECT sets.mcmId FROM sets WHERE sets.code = 'SS2'",
        "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "SELECT mcmId FROM sets WHERE code = 'SS2'"
    ],
    "1221": [
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30",
        "SELECT P.ID, P.SEX, P.Birthday  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE E.Diagnosis = 'RA' AND L.UN < 30"
    ],
    "1040": [
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.height > 180 GROUP BY P.player_fifa_api_id ORDER BY AVG(PA.heading_accuracy) DESC LIMIT 10",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.height > 180 GROUP BY P.player_fifa_api_id ORDER BY AVG(PA.heading_accuracy) DESC LIMIT 10",
        "SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.height > 180 GROUP BY P.player_fifa_api_id ORDER BY AVG(PA.heading_accuracy) DESC LIMIT 10",
        "SELECT T1.player_name, CAST(SUM(T2.heading_accuracy) AS FLOAT) / COUNT(T1.player_fifa_api_id) AS average_heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY average_heading_accuracy DESC LIMIT 10",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE P.height > 180 GROUP BY P.player_fifa_api_id ORDER BY AVG(PA.heading_accuracy) DESC LIMIT 10",
        "SELECT T1.player_name  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T1.height > 180  GROUP BY T1.player_fifa_api_id  ORDER BY AVG(T2.heading_accuracy) DESC  LIMIT 10"
    ],
    "984": [
        "SELECT C.url, C.name FROM constructors AS C JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId ORDER BY CS.wins DESC LIMIT 1",
        "SELECT C.url, C.name FROM constructors AS C JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId ORDER BY CS.wins DESC LIMIT 1",
        "SELECT C.url, C.name FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE CS.wins = (SELECT MAX(wins) FROM constructorStandings)",
        "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T2.wins) DESC LIMIT 1",
        "SELECT T2.url FROM (SELECT constructorId, SUM(wins) AS total_wins FROM constructorStandings GROUP BY constructorId ORDER BY total_wins DESC LIMIT 1) AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId",
        "SELECT T1.url FROM constructors AS T1 INNER JOIN (SELECT constructorId, COUNT(*) as total_wins FROM results WHERE positionOrder = 1 GROUP BY constructorId ORDER BY total_wins DESC LIMIT 1) AS T2 ON T1.constructorId = T2.constructorId"
    ],
    "739": [
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"
    ],
    "1480": [
        "SELECT SUBSTR(Y.Date, 1, 6) AS Month, SUM(Y.Consumption) AS TotalConsumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201301' AND '201312' AND C.Segment = 'SME' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1",
        "SELECT SUBSTR(T1.Date, 5, 2) AS Month, SUM(T1.Consumption) AS Total_Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME' GROUP BY Month ORDER BY Total_Consumption DESC LIMIT 1",
        "SELECT SUBSTR(T2.Date, 1, 6) AS Month, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1",
        "SELECT T1.Date, MAX(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME' GROUP BY T1.Date ORDER BY MAX(T1.Consumption) DESC LIMIT 1",
        "SELECT T1.Date FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME' GROUP BY substr(T1.Date, 5, 2) ORDER BY SUM(T1.Consumption) DESC LIMIT 1",
        "SELECT SUBSTR(T1.Date, 5, 2) AS peak_month FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME' GROUP BY SUBSTR(T1.Date, 5, 2) ORDER BY SUM(T1.Consumption) DESC LIMIT 1"
    ],
    "558": [
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "SELECT COUNT(Id) FROM votes WHERE UserId = 252 AND CreationDate = '2010-12-02'",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'"
    ],
    "82": [
        "SELECT T2.GSoffered FROM schools AS T2 ORDER BY ABS(T2.Longitude) DESC LIMIT 1",
        "SELECT schools.GSoffered FROM schools ORDER BY ABS(schools.Longitude) DESC LIMIT 1",
        "SELECT T1.GSoffered FROM schools AS T1 ORDER BY ABS(T1.Longitude) DESC LIMIT 1",
        "SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(ABS(Longitude)) FROM schools)",
        "SELECT T1.GSoffered FROM schools T1 ORDER BY ABS(T1.Longitude) DESC LIMIT 1",
        "SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(ABS(Longitude)) FROM schools)"
    ],
    "235": [
        "SELECT COUNT(DISTINCT a.molecule_id) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'br'",
        "SELECT COUNT(DISTINCT m.molecule_id) FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'br'",
        "SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'br')",
        "SELECT COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE M.label = '+' AND A.element = 'br'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'",
        "SELECT COUNT(DISTINCT T1.molecule_id)  FROM molecule AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '+' AND T2.element = 'br'"
    ],
    "1202": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis LIKE '%Behcet%' AND P.Admission = '-'",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND Examination.Diagnosis LIKE '%Behcet%' AND Patient.Admission = '-'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis LIKE '%Behcet%' AND P.Admission = '-'",
        "SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T1.Diagnosis = 'Behcet' AND T2.Admission = '-'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis LIKE '%Behcet%' AND P.Admission = '-'",
        "SELECT COUNT(*)  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE P.SEX = 'M'  AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'  AND P.Diagnosis LIKE '%Behcet%'  AND P.Admission = '-'"
    ],
    "603": [
        "SELECT SUM(T2.FavoriteCount) FROM posts AS T2 INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T1.Id = 686 AND strftime('%Y', T2.CreaionDate) = '2011'",
        "SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreationDate) = '2011'",
        "SELECT SUM(posts.FavoriteCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 686 AND strftime('%Y', posts.CreaionDate) = '2011'",
        "SELECT SUM(posts.FavoriteCount) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE votes.UserId = 686 AND strftime('%Y', votes.CreationDate) = '2011'",
        "SELECT SUM(FavoriteCount) FROM posts AS T1 WHERE OwnerUserId = 686 AND strftime('%Y', CreationDate) = '2011'",
        "SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND STRFTIME('%Y', CreaionDate) = '2011'"
    ],
    "460": [
        "SELECT artist, name FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "SELECT cards.artist, cards.name FROM cards WHERE cards.flavorName = 'Battra, Dark Destroyer'",
        "SELECT artist, name FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'"
    ],
    "1391": [
        "SELECT CAST(COUNT(CASE WHEN major_name = 'Finance' THEN 1 END) AS REAL) / NULLIF(COUNT(CASE WHEN major_name = 'Physics' THEN 1 END), 0) AS ratio FROM major",
        "SELECT (SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance')) * 1.0 / (SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics')) AS finance_physics_ratio",
        "SELECT CAST(SUM(major.major_name = 'Finance') AS REAL) / NULLIF(SUM(major.major_name = 'Physics'), 0) AS ratio FROM major",
        "SELECT CAST(SUM(CASE WHEN T1.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.major_name = 'Physics' THEN 1 ELSE 0 END) FROM major AS T1",
        "SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END), 0) AS ratio FROM major",
        "SELECT      (SELECT COUNT(*) FROM major WHERE major_name = 'Finance') * 1.0 /      NULLIF((SELECT COUNT(*) FROM major WHERE major_name = 'Physics'), 0) AS ratio"
    ],
    "1455": [
        "SELECT budget.budget_id FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, cookies, chips' ORDER BY expense.cost DESC LIMIT 1",
        "SELECT budget.amount FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description IN ('Water', 'cookies', 'chips') ORDER BY expense.cost DESC LIMIT 1",
        "SELECT budget.link_to_event FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, cookies, chips' ORDER BY expense.cost DESC LIMIT 1",
        "SELECT MAX(budget.amount) FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, cookies, chips'",
        "SELECT T2.budget_id FROM expense AS T1 JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
        "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1"
    ],
    "302": [
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_2_4'",
        "SELECT A.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_2_4'",
        "SELECT A.element FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_2_4'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_2_4'",
        "SELECT T2.element FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_2_4'",
        "SELECT DISTINCT T3.element  FROM bond AS T1  INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id  INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id  WHERE T1.bond_id = 'TR001_2_4'"
    ],
    "785": [
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "SELECT superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "###SQL: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'N/A'",
        "SELECT T1.superhero_name FROM superhero T1 JOIN alignment T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"
    ],
    "715": [
        "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.DownVotes = 0 AND comments.Score BETWEEN 1 AND 5",
        "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 1 AND 5 AND users.DownVotes = 0",
        "SELECT c.UserDisplayName FROM comments AS c INNER JOIN users AS u ON c.UserId = u.Id WHERE u.DownVotes = 0 AND c.Score BETWEEN 1 AND 5",
        "SELECT comments.UserDisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 1 AND 5 AND users.DownVotes = 0",
        "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.DownVotes = 0 AND comments.Score BETWEEN 1 AND 5",
        "SELECT DISTINCT T2.DisplayName  FROM comments AS T1  INNER JOIN users AS T2 ON T1.UserId = T2.Id  WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0"
    ],
    "445": [
        "SELECT foreign_data.language, foreign_data.flavorText, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
        "SELECT foreign_data.language, foreign_data.flavorText, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
        "SELECT FD.language, FD.flavorText, C.type FROM cards AS C JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.watermark = 'colorpie'",
        "SELECT T1.language, T1.flavorText, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'colorpie'",
        "SELECT foreign_data.language, cards.flavorText, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
        "SELECT T1.language, T2.flavorText, T1.type  FROM cards AS T1  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T1.watermark = 'colorpie'"
    ],
    "313": [
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'",
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR001'",
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'",
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR001'",
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'",
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'"
    ],
    "752": [
        "SELECT superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
        "SELECT superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
        "SELECT superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"
    ],
    "1028": [
        "SELECT T.team_long_name FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY T.team_long_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T.team_long_name FROM Team AS T INNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id WHERE M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY T.team_long_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T.team_long_name FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY M.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T3.team_long_name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T1.away_team_api_id ORDER BY COUNT(CASE WHEN T1.away_team_goal > T1.home_team_goal THEN 1 END) DESC LIMIT 1",
        "SELECT T.team_long_name FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id JOIN League L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY M.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T3.team_long_name  FROM Match AS T1  INNER JOIN League AS T2 ON T1.league_id = T2.id  INNER JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id  WHERE T2.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND T1.away_team_goal > T1.home_team_goal  GROUP BY T1.away_team_api_id  ORDER BY COUNT(*) DESC  LIMIT 1"
    ],
    "732": [
        "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT T2.publisher_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value ASC LIMIT 1",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT T2.publisher_name FROM publisher AS T2 INNER JOIN superhero AS T1 ON T2.id = T1.publisher_id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value ASC LIMIT 1",
        "SELECT T2.publisher_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY T2.attribute_value LIMIT 1",
        "SELECT T5.publisher_name FROM (SELECT T3.hero_id, MIN(T3.attribute_value) AS min_speed FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' GROUP BY T3.hero_id) AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN publisher AS T5 ON T2.publisher_id = T5.id WHERE T1.min_speed = (SELECT MIN(T3.attribute_value) FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed')"
    ],
    "508": [
        "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1"
    ],
    "795": [
        "SELECT COUNT(id) FROM superhero WHERE alignment_id = 3",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')",
        "SELECT COUNT(id) FROM superhero WHERE alignment_id = 3",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3"
    ],
    "815": [
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2",
        "SELECT COUNT(*) FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE A.id = 1 AND G.id = 2",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN alignment AS T2 ON T1.alignment_id = T2.id JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2"
    ],
    "839": [
        "SELECT T1.full_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'",
        "SELECT full_name FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE C.colour = 'Brown' AND S.weight_kg < 100",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'No Colour'",
        "SELECT T1.full_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'"
    ],
    "324": [
        "SELECT ROUND(CAST(SUM(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id), 5) AS percentage FROM bond AS T1",
        "SELECT (SUM(bond_type = '-') * 100.0 / COUNT(bond_id)) AS percentage FROM bond",
        "SELECT CAST(COUNT(T1.atom_id) AS REAL) * 100 / (SELECT COUNT(*) FROM bond WHERE bond_type = '-') AS percentage FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'",
        "SELECT CAST(SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(bond_id) AS REAL) FROM bond",
        "SELECT (SUM(bond.bond_type = '-') * 100.0 / COUNT(bond.bond_id)) AS percentage FROM bond",
        "SELECT (SUM(bond_type = '-') * 100.0 / COUNT(bond_id)) AS percentage FROM bond"
    ],
    "995": [
        "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "SELECT AVG(R.points) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R2.name = 'Turkish Grand Prix'",
        "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "SELECT AVG(T3.points) FROM results AS T3 JOIN drivers AS T1 ON T3.driverId = T1.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'",
        "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'"
    ],
    "262": [
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' AND T1.molecule_id IS NOT NULL",
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' AND T1.molecule_id IS NOT NULL",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'",
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-'",
        "SELECT DISTINCT T2.molecule_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'",
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-'"
    ],
    "1117": [
        "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
        "SELECT Player.player_api_id FROM Player WHERE Player.weight IS NOT NULL ORDER BY Player.weight DESC LIMIT 10",
        "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10"
    ],
    "418": [
        "SELECT cards.availability, cards.name FROM cards WHERE cards.artist = 'Daren Bader'",
        "SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader'",
        "SELECT availability, name FROM cards WHERE artist = 'Daren Bader'",
        "SELECT availability FROM cards WHERE artist = 'Daren Bader'",
        "SELECT availability FROM cards WHERE artist = 'Daren Bader'",
        "SELECT availability FROM cards WHERE artist = 'Daren Bader'"
    ],
    "375": [
        "SELECT id FROM cards WHERE convertedManaCost = 0",
        "SELECT id FROM cards WHERE convertedManaCost = 0",
        "SELECT id FROM cards WHERE convertedManaCost = 0",
        "SELECT id FROM cards WHERE convertedManaCost = 0",
        "SELECT id FROM cards WHERE convertedManaCost = 0",
        "SELECT id FROM cards WHERE convertedManaCost = 0"
    ],
    "1305": [
        "SELECT COUNT(T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC > 3.5 AND L.WBC < 9.0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC > 0",
        "SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0"
    ],
    "400": [
        "SELECT sets.code FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN sets ON cards.setCode = sets.code WHERE foreign_data.language = 'Spanish'",
        "SELECT ST.setCode FROM sets AS ST INNER JOIN set_translations AS STN ON ST.code = STN.setCode WHERE STN.language = 'Spanish'",
        "SELECT sets.code FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.language = 'Spanish'",
        "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish'"
    ],
    "1145": [
        "SELECT L.name, COUNT(M.id) AS match_count FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY match_count DESC LIMIT 4",
        "SELECT L.name, COUNT(M.id) AS total_games FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY total_games DESC LIMIT 4",
        "SELECT L.name, COUNT(M.id) AS match_count FROM League AS L JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY match_count DESC LIMIT 4",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY COUNT(M.id) DESC LIMIT 4",
        "SELECT L.id, L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY COUNT(M.id) DESC LIMIT 4",
        "SELECT T2.name  FROM Match AS T1  INNER JOIN League AS T2 ON T1.league_id = T2.id  WHERE T1.season = '2015/2016'  GROUP BY T2.name  ORDER BY COUNT(T1.id) DESC  LIMIT 4"
    ],
    "1291": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP >= 6.0 AND L.TP <= 8.5",
        "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP > 6.0 AND T2.TP < 8.5",
        "SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(*)  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP > 6.0 AND T2.TP < 8.5"
    ],
    "962": [
        "SELECT (COUNT(DISTINCT D.driverId) * 100.0 / NULLIF((SELECT COUNT(DISTINCT D2.driverId) FROM drivers AS D2 INNER JOIN results AS R ON D2.driverId = R.driverId WHERE STRFTIME('%Y', R.raceId) BETWEEN '2000' AND '2005'), 0)) AS percentage FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId WHERE STRFTIME('%Y', D.dob) < '1985' AND R.laps > 50",
        "SELECT CAST(COUNT(CASE WHEN D.dob < '1985-01-01' AND R.laps > 50 THEN 1 END) AS REAL) * 100 / COUNT(D.driverId) FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId WHERE strftime('%Y', R.raceId) BETWEEN '2000' AND '2005'",
        "SELECT CAST(SUM(CASE WHEN T1.dob < '1985-01-01' AND T2.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005",
        "###SQL: SELECT CAST(COUNT(CASE WHEN year(T3.dob) < 1985 AND T2.lap > 50 THEN 1 END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year BETWEEN 2000 AND 2005",
        "SELECT (COUNT(DISTINCT T1.driverId) * 100.0 / (SELECT COUNT(DISTINCT T2.driverId) FROM results T3 JOIN races T4 ON T3.raceId = T4.raceId WHERE T4.year BETWEEN 2000 AND 2005)) AS percentage FROM drivers T1 JOIN results T2 ON T1.driverId = T2.driverId WHERE T1.dob < '1985-01-01' AND T2.laps > 50",
        "SELECT (COUNT(DISTINCT T1.driverId) * 100.0 / COUNT(DISTINCT T2.driverId)) AS percentage FROM drivers AS T1 INNER JOIN lapTimes AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE STRFTIME('%Y', T1.dob) < '1985' AND T3.lap > 50 AND T4.year BETWEEN 2000 AND 2005 GROUP BY T1.driverId"
    ],
    "1500": [
        "SELECT DISTINCT T2.Description FROM products AS T2 INNER JOIN transactions_1k AS T1 ON T1.ProductID = T2.ProductID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201309'",
        "SELECT DISTINCT products.Description FROM yearmonth INNER JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID INNER JOIN products ON transactions_1k.ProductID = products.ProductID WHERE yearmonth.Date = '201309'",
        "SELECT DISTINCT T2.Description FROM products AS T2 INNER JOIN yearmonth AS T1 ON T2.ProductID = T1.CustomerID WHERE T1.Date = '201309'",
        "SELECT products.Description FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309'",
        "SELECT P.Description FROM yearmonth AS Y JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID JOIN products AS P ON T.ProductID = P.ProductID WHERE Y.Date = '201309'",
        "SELECT DISTINCT P.Description  FROM yearmonth AS Y  INNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID  INNER JOIN products AS P ON T.ProductID = P.ProductID  WHERE Y.Date = '201309'"
    ],
    "973": [
        "SELECT D.driverId, D.forename, D.surname, MAX(L.time) AS latest_lap_time FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId WHERE D.nationality = 'Spanish' AND strftime('%Y', D.dob) < '1982' GROUP BY D.driverId ORDER BY latest_lap_time DESC LIMIT 10",
        "SELECT D.driverId, D.forename, D.surname FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId WHERE D.nationality = 'Spanish' AND strftime('%Y', D.dob) < '1982' GROUP BY D.driverId ORDER BY MAX(L.time) DESC LIMIT 10",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' AND T2.time IS NOT NULL GROUP BY T1.driverId ORDER BY MAX(T2.time) DESC LIMIT 10",
        "SELECT T1.forename, T1.surname, MAX(T2.time) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) < '1982' AND T1.nationality = 'Spanish' GROUP BY T1.driverId ORDER BY MAX(T2.time) DESC LIMIT 10",
        "SELECT D.driverId, MAX(L.time) AS latestLapTime FROM drivers AS D JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'Spanish' AND strftime('%Y', D.dob) < '1982' GROUP BY D.driverId ORDER BY latestLapTime DESC LIMIT 10",
        "SELECT T1.forename, T1.surname, MAX(T2.time) as latest_lap_time  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'Spanish' AND year(T1.dob) < 1982  GROUP BY T1.driverId  ORDER BY latest_lap_time DESC  LIMIT 10"
    ],
    "252": [
        "SELECT DISTINCT T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')",
        "SELECT DISTINCT T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')",
        "SELECT DISTINCT T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')",
        "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
        "SELECT T2.atom_id FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T1.element = 'pb' JOIN atom AS T2 ON T3.atom_id2 = T2.atom_id",
        "SELECT DISTINCT T2.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')"
    ],
    "1030": [
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT L.name FROM League L INNER JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT L.name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal = M.away_team_goal) DESC LIMIT 1",
        "SELECT L.id FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT L.name FROM League AS L INNER JOIN (SELECT league_id, SUM(home_team_goal = away_team_goal) AS total_draws FROM Match WHERE season = '2015/2016' GROUP BY league_id) AS MD ON L.id = MD.league_id WHERE MD.total_draws = (SELECT MAX(total_draws) FROM (SELECT league_id, SUM(home_team_goal = away_team_goal) AS total_draws FROM Match WHERE season = '2015/2016' GROUP BY league_id))"
    ],
    "398": [
        "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'",
        "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'",
        "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'",
        "###SQL: SELECT SUM(CAST(SUBSTR(manaCost, 2, LENGTH(manaCost)-2) AS REAL)) FROM cards WHERE artist = 'Rob Alexander'",
        "SELECT SUM(CAST(REPLACE(REPLACE(manaCost, '{', ''), '}', '') AS REAL)) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander'",
        "SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'"
    ],
    "927": [
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.fastestLapSpeed IS NOT NULL ORDER BY R.fastestLapSpeed DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.fastestLapSpeed IS NOT NULL ORDER BY R.fastestLapSpeed DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId ORDER BY R.fastestLapSpeed DESC LIMIT 1",
        "SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)",
        "SELECT T1.driverId, T2.forename, T2.surname FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
        "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)"
    ],
    "759": [
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "SELECT colour.colour AS eye_colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg IS NOT NULL AND T1.weight_kg > 0 ORDER BY T1.weight_kg DESC LIMIT 1",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)"
    ],
    "534": [
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)"
    ],
    "757": [
        "SELECT race.race, superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "SELECT race.race, superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "SELECT T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169"
    ],
    "647": [
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE strftime('%Y', b.Date) = '2011' AND u.Location = 'North Pole'",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011'",
        "SELECT B.Name FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE strftime('%Y', B.Date) = '2011' AND U.Location = 'North Pole'",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE strftime('%Y', badges.Date) = '2011' AND users.Location = 'North Pole'",
        "SELECT T1.Name FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND strftime('%Y', T1.Date) = '2011'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.Location = 'North Pole'"
    ],
    "942": [
        "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT AVG((SUBSTR(T1.fastestLapTime, 1, INSTR(T1.fastestLapTime, ':') - 1) * 60) + SUBSTR(T1.fastestLapTime, INSTR(T1.fastestLapTime, ':') + 1)) AS average_fastest_lap_time FROM results AS T1 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND T1.fastestLapTime IS NOT NULL",
        "SELECT AVG(CAST(SUBSTR(R.fastestLapTime, 1, INSTR(R.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(R.fastestLapTime, INSTR(R.fastestLapTime, ':') + 1) AS INTEGER)) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT AVG(CAST(SUBSTR(REPLACE(T3.fastestLapTime, '+', ''), 1, INSTR(REPLACE(T3.fastestLapTime, '+', ''), ':') - 1) AS REAL) * 60 + CAST(SUBSTR(REPLACE(T3.fastestLapTime, '+', ''), INSTR(REPLACE(T3.fastestLapTime, '+', '') , ':') + 1) AS REAL)) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT AVG((CAST(SUBSTR(R.time, 1, INSTR(R.time, ':') - 1) AS INTEGER) * 60) + CAST(SUBSTR(R.time, INSTR(R.time, ':') + 1) AS REAL)) AS average_fastest_lap_time FROM results AS R JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT AVG((CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60) + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL)) AS average_fastest_lap_time  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'"
    ],
    "1244": [
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.`First Date`) > '1992' AND L.PT < 14",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE year(P.`First Date`) > 1992 AND L.PT < 14",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.`First Date`) > '1992' AND L.PT < 14",
        "SELECT P.ID, P.`First Date`, L.PT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.`First Date`) > '1992' AND L.PT < 14",
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.`First Date` > '1992-12-31' AND L.PT < 14",
        "SELECT T1.ID, T1.SEX  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14"
    ],
    "970": [
        "SELECT D.forename, D.surname FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId WHERE D.nationality = 'German' AND strftime('%Y', D.dob) BETWEEN '1980' AND '1990' ORDER BY L.time ASC LIMIT 3",
        "SELECT D.forename, D.surname FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId WHERE D.nationality = 'German' AND strftime('%Y', D.dob) BETWEEN '1980' AND '1990' ORDER BY L.time LIMIT 3",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'German' AND strftime('%Y', D.dob) BETWEEN '1980' AND '1990' ORDER BY L.milliseconds ASC LIMIT 3",
        "###SQL: SELECT T1.forename, T1.surname, MIN(T2.time) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) BETWEEN '1980' AND '1990' AND T1.nationality = 'German' GROUP BY T1.driverId ORDER BY MIN(T2.time) ASC LIMIT 3",
        "SELECT d.driverId FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990' ORDER BY lt.time LIMIT 3",
        "SELECT T1.forename, T1.surname, MIN(T2.time) AS earliest_lap_time  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990'  GROUP BY T1.driverId  ORDER BY earliest_lap_time  LIMIT 3"
    ],
    "429": [
        "SELECT STN.language, S.type FROM sets AS S INNER JOIN set_translations AS STN ON S.code = STN.setCode WHERE S.id = 206",
        "SELECT foreign_data.language, sets.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN sets ON cards.id = sets.id WHERE cards.number = '206p'",
        "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206",
        "SELECT T1.language, T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 206",
        "SELECT ST.language, S.type FROM sets S JOIN set_translations ST ON S.code = ST.setCode WHERE S.id = 206",
        "SELECT language, type FROM sets WHERE id = 206"
    ],
    "246": [
        "SELECT T1.bond_type, T2.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE CAST(SUBSTR(T3.atom_id, 7, 2) AS INTEGER) = 45",
        "SELECT B.bond_type, C.bond_id FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE SUBSTR(A.atom_id, 7, 2) + 0 = 45",
        "SELECT DISTINCT T2.bond_type, T1.bond_id FROM bond AS T2 INNER JOIN connected AS T1 ON T2.bond_id = T1.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45",
        "SELECT T2.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) + 0 = 45",
        "SELECT T2.bond_type, T2.bond_id FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45",
        "SELECT T2.bond_type, T2.bond_id  FROM atom AS T1  INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id  INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id  WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45"
    ],
    "1302": [
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', SUM(CASE WHEN E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+' THEN 1 ELSE 0 END) AS 'how many measure of degree of coagulation' FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.CPK < 250",
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', COUNT(CASE WHEN E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+' THEN 1 END) AS 'how many measure of degree of coagulation' FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CPK < 250",
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', SUM(CASE WHEN E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+' THEN 1 ELSE 0 END) AS 'how many measure of degree of coagulation' FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.CPK < 250",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')",
        "SELECT COUNT(DISTINCT E.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+')"
    ],
    "704": [
        "SELECT Id, WikiPostId FROM tags WHERE TagName = 'sample'",
        "SELECT T.ExcerptPostId, T.WikiPostId FROM tags AS T WHERE T.TagName = 'sample'",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'"
    ],
    "573": [
        "SELECT Text FROM comments WHERE Score = 17",
        "SELECT Text FROM comments WHERE Score = 17",
        "SELECT Text FROM comments WHERE Score = 17",
        "SELECT Text FROM comments WHERE Score = 20",
        "SELECT Text FROM comments WHERE Score = 17",
        "SELECT Text FROM comments WHERE Score = 17"
    ],
    "827": [
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race <> 'Human'",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T3.race <> 'Human' AND T2.publisher_name = 'Dark Horse Comics'",
        "SELECT AVG(height_cm) AS average_height FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race_id <> (SELECT id FROM race WHERE race = 'Human') AND publisher.publisher_name = 'Dark Horse Comics'",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T3.race <> 'Human' AND T2.publisher_name = 'Dark Horse Comics'",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics' AND T1.height_cm IS NOT NULL",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics'"
    ],
    "226": [
        "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.bond_type = '=' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.bond_id) AS percentage_double_bonds FROM bond AS T1 WHERE T1.molecule_id = 'TR008'",
        "SELECT ROUND((SUM(bond_type = '=') * 100.0 / COUNT(bond_id)), 5) AS percentage FROM bond WHERE molecule_id = 'TR008'",
        "SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percentage_double_bonds FROM bond AS T1 WHERE T1.molecule_id = 'TR008'",
        "SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR008'",
        "SELECT ROUND((SUM(bond_type = '=') * 100.0) / COUNT(bond_id), 5) AS percent FROM bond T1 WHERE T1.molecule_id = 'TR008'",
        "SELECT ROUND((SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0) / COUNT(bond_id), 5) AS percent FROM bond WHERE molecule_id = 'TR008'"
    ],
    "833": [
        "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.full_name = 'Charles Chandler'",
        "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"
    ],
    "1073": [
        "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'",
        "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'",
        "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'",
        "SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', T1.date) BETWEEN '2008-08' AND '2008-10'",
        "SELECT COUNT(*) FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'",
        "SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND STRFTIME('%Y-%m', T1.date) BETWEEN '2008-08' AND '2008-10'"
    ],
    "466": [
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "SELECT COUNT(T1.id) FROM cards T1 JOIN set_translations T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Adam Rex' AND T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'"
    ],
    "228": [
        "SELECT ROUND(CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) * 100 / COUNT(atom_id), 4) AS percentage_hydrogen FROM atom WHERE molecule_id = 'TR206'",
        "SELECT ROUND((SUM(element = 'h') * 100.0 / COUNT(atom_id)), 4) AS percentage FROM atom WHERE molecule_id = 'TR206'",
        "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id), 4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) FROM atom WHERE molecule_id = 'TR206'",
        "SELECT ROUND((SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(atom_id), 4) AS percent FROM atom WHERE molecule_id = 'TR206'",
        "SELECT ROUND((SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(atom_id), 4) AS percent FROM atom WHERE molecule_id = 'TR206'"
    ],
    "402": [
        "SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) AS percentage, T1.id FROM cards AS T1 WHERE T1.isStorySpotlight = 1 GROUP BY T1.id",
        "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage, id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 GROUP BY id",
        "SELECT (CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id)) AS percentage, id FROM cards WHERE isStorySpotlight = 1 GROUP BY id",
        "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
        "SELECT (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0) * 100.0 / (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1) AS percentage, id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0",
        "SELECT      (SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage,     id FROM cards GROUP BY id"
    ],
    "1359": [
        "SELECT (SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END, 0))) AS budget_ratio FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement'",
        "SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / NULLIF(SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END), 0)) AS ratio FROM budget AS b JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement'",
        "SELECT SUM(T1.amount) AS total_amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'Yearly Kickoff' AND T1.amount > (SELECT SUM(T3.amount) FROM budget AS T3 INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T3.category = 'Advertisement' AND T4.event_name = 'October Meeting')",
        "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.event_name = 'October Meeting' THEN T2.amount ELSE 0 END) FROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T2.category = 'Advertisement'",
        "SELECT (SUM(CASE WHEN E.event_name = 'Yearly Kickoff' THEN B.amount ELSE 0 END) / NULLIF(SUM(CASE WHEN E.event_name = 'October Meeting' THEN B.amount ELSE 0 END), 0)) AS budget_ratio FROM budget B JOIN event E ON B.link_to_event = E.event_id WHERE B.category = 'Advertisement'",
        "SELECT COALESCE(SUM(CASE WHEN ev.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END), 0) / NULLIF(SUM(CASE WHEN ev.event_name = 'October Meeting' THEN b.amount ELSE 0 END), 0) AS budget_ratio FROM budget as b  INNER JOIN event as ev ON b.link_to_event = ev.event_id WHERE b.category = 'Advertisement'"
    ],
    "444": [
        "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
        "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
        "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'",
        "SELECT T1.name, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'boros'",
        "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
        "SELECT fd.name, c.type FROM cards AS c INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE c.watermark = 'boros'"
    ],
    "1520": [
        "SELECT yearmonth.Date, SUM(yearmonth.Consumption) AS TotalExpenses FROM yearmonth INNER JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Price = 124.05 AND transactions_1k.Date = '2012-08-24' AND yearmonth.Date LIKE '201201%' GROUP BY yearmonth.Date",
        "SELECT SUM(e.Consumption) AS total_expense, e.Date FROM yearmonth AS e INNER JOIN transactions_1k AS t ON e.CustomerID = t.CustomerID WHERE t.Price = 124.05 AND t.Date = '2012-08-24' AND e.Date LIKE '2012-01%' GROUP BY e.Date",
        "SELECT T1.Date, SUM(T1.Amount * T1.Price) AS Expenses FROM transactions_1k AS T1 WHERE T1.CustomerID = (SELECT T2.CustomerID FROM transactions_1k AS T2 WHERE T2.Date = '2012-08-24' AND T2.Amount * T2.Price = 124.05) AND strftime('%Y-%m', T1.Date) = '2012-01' GROUP BY T1.Date",
        "SELECT T2.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T2.Date LIKE '201201%'",
        "SELECT T2.Date, T2.Consumption FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price = 124.05 AND T1.Date = '2012-08-24' AND T2.Date LIKE '201201%'",
        "SELECT T1.Date, T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Price = 124.05 AND T2.Date = '2012-08-24' AND T1.Date = '201201'"
    ],
    "618": [
        "SELECT U.Age FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.Location = 'Vienna, Austria'",
        "SELECT U.Age FROM badges B JOIN users U ON B.UserId = U.Id WHERE U.Location = 'Vienna, Austria'",
        "SELECT users.Age FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria'",
        "SELECT U.Age FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria'",
        "SELECT T1.Age FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "SELECT DISTINCT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'"
    ],
    "604": [
        "SELECT (SUM(users.UpVotes) * 1.0 / COUNT(users.Id)) AS average_of_up_votes, (SUM(users.Age) * 1.0 / COUNT(users.Id)) AS average_user_age FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.Id) > 10",
        "SELECT (SUM(u.UpVotes) * 1.0 / COUNT(u.Id)) AS AverageUpVotes, (SUM(u.Age) * 1.0 / COUNT(u.Id)) AS AverageUserAge FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId GROUP BY p.OwnerUserId HAVING COUNT(p.Id) > 10",
        "SELECT AVG(users.UpVotes) AS average_up_votes, AVG(users.Age) AS average_user_age FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY posts.OwnerUserId HAVING COUNT(posts.Id) > 10",
        "SELECT CAST(SUM(users.UpVotes) AS REAL) / COUNT(users.Id), CAST(SUM(users.Age) AS REAL) / COUNT(users.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.OwnerUserId) > 10",
        "SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageAge FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.Id) > 10",
        "SELECT AVG(T3.UpVotes) AS average_up_votes, AVG(T3.Age) AS average_user_age  FROM (      SELECT T2.OwnerUserId, SUM(T2.UpVotes) AS UpVotes, SUM(T1.Age) AS Age      FROM posts AS T2      INNER JOIN users AS T1 ON T1.Id = T2.OwnerUserId      GROUP BY T2.OwnerUserId      HAVING COUNT(T2.OwnerUserId) > 10  ) AS T3"
    ],
    "832": [
        "SELECT superhero_name FROM superhero WHERE height_cm IS NOT NULL AND height_cm > 0 ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero WHERE height_cm IS NOT NULL AND height_cm > 0 ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1",
        "SELECT id FROM superhero WHERE height_cm IS NOT NULL AND height_cm > 0 ORDER BY height_cm DESC LIMIT 1",
        "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"
    ],
    "1379": [
        "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020'",
        "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'",
        "SELECT COUNT(type) FROM event WHERE type = 'Meeting' AND strftime('%Y', event.event_date) = '2020'",
        "SELECT COUNT(*) FROM event AS T1 WHERE T1.type = 'Meeting' AND strftime('%Y', T1.event_date) = '2020'",
        "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'"
    ],
    "1096": [
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'",
        "SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Pietro Marino'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'",
        "SELECT AVG(T1.overall_rating) FROM Player AS T1 WHERE T1.player_name = 'Pietro Marino'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'"
    ],
    "233": [
        "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2",
        "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2",
        "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2",
        "SELECT bond_id, bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2",
        "SELECT T1.bond_id FROM bond AS T1 WHERE T1.molecule_id = 'TR006' ORDER BY T1.bond_id LIMIT 2",
        "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2"
    ],
    "393": [
        "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "SELECT COUNT(*) FROM cards AS T1 WHERE T1.artist = 'John Avon' AND T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL"
    ],
    "646": [
        "SELECT T2.Title, GROUP_CONCAT(T1.UserDisplayName) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score > 60 GROUP BY T2.Title",
        "SELECT posts.Title, users.DisplayName FROM comments INNER JOIN posts ON comments.PostId = posts.Id INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score > 60",
        "SELECT posts.Title, GROUP_CONCAT(users.DisplayName) FROM posts INNER JOIN comments ON posts.Id = comments.PostId INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score > 60 GROUP BY posts.Title",
        "SELECT T1.Title, T2.DisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60",
        "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60",
        "SELECT T1.Title, T2.UserDisplayName  FROM posts AS T1  INNER JOIN comments AS T2  ON T1.Id = T2.PostId  WHERE T2.Score > 60"
    ],
    "848": [
        "SELECT races.year FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai'",
        "SELECT races.year FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai'",
        "SELECT races.year FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai'",
        "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'",
        "SELECT T2.year FROM races AS T2 JOIN circuits AS T1 ON T2.circuitId = T1.circuitId WHERE T1.location = 'Shanghai'",
        "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'"
    ],
    "636": [
        "SELECT COUNT(*) FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE U.DisplayName = 'Neil McGuigan' AND C.Score < 60",
        "SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan')",
        "SELECT COUNT(*) FROM comments WHERE UserDisplayName = 'Neil McGuigan' AND Score < 60",
        "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score < 60 AND T2.DisplayName = 'Neil McGuigan'",
        "SELECT COUNT(*) FROM comments AS C JOIN users AS U ON C.UserId = U.Id WHERE U.DisplayName = 'Neil McGuigan' AND C.Score < 60",
        "SELECT COUNT(*) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Score < 60 AND T3.DisplayName = 'Neil McGuigan'"
    ],
    "382": [
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese'",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese'",
        "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "SELECT T1.id, T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "SELECT T1.id FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.availability LIKE '%paper%' AND T2.language = 'Japanese'",
        "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'"
    ],
    "629": [
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 END) AS REAL) / COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 END) AS ratio_of_votes FROM votes",
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN Id END) AS FLOAT) / COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN Id END) AS Ratio FROM votes",
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN Id END) AS REAL) / COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN Id END) AS ratio_votes FROM votes",
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 END) AS REAL) / CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 END) AS REAL) FROM votes",
        "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN Id END) AS FLOAT) / NULLIF(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN Id END), 0) AS ratio FROM votes",
        "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN Id END) AS FLOAT) / NULLIF(COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN Id END), 0) AS ratio FROM votes"
    ],
    "1006": [
        "SELECT MIN(lapTimes.time) FROM lapTimes",
        "SELECT MIN(time) FROM lapTimes",
        "SELECT MIN(T2.time) FROM lapTimes AS T2 WHERE T2.time IS NOT NULL",
        "SELECT MIN(time) FROM lapTimes",
        "SELECT time FROM lapTimes ORDER BY time LIMIT 1",
        "SELECT MIN(STRFTIME('%H:%M:%S', time)) AS fastest_lap_time FROM lapTimes"
    ],
    "354": [
        "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT COUNT(DISTINCT cards.type) FROM cards WHERE cards.artist = 'Aaron Boyd'",
        "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'"
    ],
    "736": [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value IS NOT NULL ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value IS NOT NULL ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence') ORDER BY T2.attribute_value ASC LIMIT 1",
        "SELECT T1.hero_id FROM hero_attribute T1 INNER JOIN attribute T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Intelligence' ORDER BY T1.attribute_value LIMIT 1",
        "SELECT T3.superhero_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Intelligence' ORDER BY T1.attribute_value ASC LIMIT 1"
    ],
    "1235": [
        "SELECT P.Diagnosis, P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5",
        "SELECT P.Diagnosis, P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5",
        "SELECT P.Diagnosis, P.ID, (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday)) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5",
        "SELECT T1.ID, CAST((strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS REAL) AS age, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "SELECT P.ID, P.Diagnosis, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5",
        "SELECT P.ID, STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS age, P.Diagnosis  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.RBC < 3.5"
    ],
    "1052": [
        "SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight < 130 AND pa.preferred_foot = 'left'",
        "SELECT COUNT(*) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight < 130 AND PA.preferred_foot = 'left'",
        "SELECT COUNT(Player.player_api_id) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left'",
        "###SQL: SELECT COUNT(Player.id) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left'",
        "SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left'",
        "SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left'"
    ],
    "836": [
        "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'",
        "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'",
        "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'",
        "SELECT COUNT(full_name) FROM superhero WHERE full_name LIKE 'John%'",
        "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'",
        "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'"
    ],
    "916": [
        "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "SELECT T1.surname FROM drivers AS T1 WHERE T1.nationality = 'Italian'",
        "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "SELECT surname FROM drivers WHERE nationality = 'italian'"
    ],
    "1437": [
        "SELECT DISTINCT M.member_id, A.link_to_event FROM member AS M INNER JOIN expense AS E ON M.member_id = E.link_to_member INNER JOIN attendance AS A ON M.member_id = A.link_to_member WHERE E.approved = 'true' AND E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "SELECT T1.link_to_member, T1.link_to_event FROM attendance AS T1 INNER JOIN expense AS T2 ON T1.link_to_member = T2.link_to_member WHERE T2.approved = 'true' AND T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "SELECT DISTINCT member.member_id, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON expense.link_to_member = member.member_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "SELECT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'true' AND T2.expense_date BETWEEN '2019-10-01' AND '2019-11-19'",
        "SELECT T1.link_to_member, T1.link_to_event FROM expense AS T1 JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.approved = 'true' AND T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "SELECT T2.first_name, T2.last_name, T1.link_to_event  FROM expense AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T1.approved = 'true' AND T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"
    ],
    "786": [
        "SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))",
        "SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))",
        "SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))",
        "SELECT COUNT(hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength')",
        "SELECT COUNT(*) FROM hero_attribute AS T1 WHERE T1.attribute_value = (SELECT MAX(T2.attribute_value) FROM hero_attribute AS T2 JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength')",
        "SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))"
    ],
    "1101": [
        "SELECT AVG(M.away_team_goal) FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id JOIN Country C ON T.team_api_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'",
        "SELECT AVG(M.away_team_goal) FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id JOIN League L ON M.league_id = L.id WHERE T.team_long_name = 'Parma' AND L.country_id = (SELECT id FROM Country WHERE name = 'Italy')",
        "SELECT AVG(away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id WHERE T.team_long_name = 'Parma' AND M.country_id IN (SELECT id FROM Country WHERE name = 'Italy')",
        "SELECT CAST(AVG(M.away_team_goal) AS REAL) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN Country AS C ON M.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'",
        "SELECT AVG(M.away_team_goal) FROM Match AS M JOIN Team AS T ON M.away_team_api_id = T.team_api_id JOIN League AS L ON M.league_id = L.id WHERE T.team_long_name = 'Parma' AND L.country_id = (SELECT id FROM Country WHERE name = 'Italy')",
        "SELECT AVG(Match.away_team_goal) FROM Match INNER JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Parma' AND Match.country_id = (SELECT id FROM Country WHERE name = 'Italy')"
    ],
    "806": [
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "SELECT colour.colour AS eye_colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Karen Beecher-Duncan'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "SELECT C.colour FROM superhero AS S JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Karen Beecher-Duncan'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'"
    ],
    "723": [
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T4.colour = 'Blue' AND T3.power_name = 'Agility'",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T4.colour = 'Blue' AND T3.power_name = 'Agility'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'"
    ],
    "1303": [
        "SELECT MIN(Birthday) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180",
        "SELECT MIN(Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180",
        "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180",
        "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180 ORDER BY Patient.Birthday LIMIT 1",
        "SELECT MIN(P.Birthday) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180",
        "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180"
    ],
    "1374": [
        "SELECT COUNT(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
        "SELECT COUNT(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
        "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'",
        "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'",
        "SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240')",
        "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'"
    ],
    "872": [
        "SELECT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 45 AND qualifying.q3 LIKE '1:33%'",
        "SELECT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 45 AND qualifying.q3 LIKE '1:33.%'",
        "SELECT D.code FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 45 AND Q.q3 LIKE '1:33:%'",
        "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '1:33.%'",
        "SELECT T2.code FROM qualifying T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '0:01:33%'",
        "SELECT T2.code FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 45 AND T1.q3 = '0:01:33'"
    ],
    "24": [
        "SELECT schools.School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) > 0.1 AND satscores.NumGE1500 > 0",
        "SELECT schools.School FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) > 0.1 AND satscores.NumGE1500 >= 1500",
        "SELECT schools.School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) > 0.1 AND satscores.NumGE1500 > 0",
        "SELECT S.School FROM frpm AS F INNER JOIN satscores AS S ON F.CDSCode = S.cds WHERE (CAST(F.Free Meal Count (K-12) AS REAL) / CAST(F.Enrollment (K-12) AS REAL)) > 0.1 AND S.NumGE1500 >= 1500",
        "SELECT T1.`School Name` FROM frpm AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)`) > 0.1 AND T2.NumTstTakr > 0 AND T2.NumGE1500 > 0",
        "SELECT DISTINCT T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE (T2.\"Free Meal Count (K-12)\" / T2.\"Enrollment (K-12)\") > 0.1 AND T3.NumGE1500 >= 1500"
    ],
    "782": [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'",
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN colour T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'"
    ],
    "1097": [
        "SELECT SUM(PA.crossing) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Lennox'",
        "SELECT SUM(PA.crossing) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Lennox'",
        "SELECT SUM(PA.crossing) FROM Player AS T1 INNER JOIN Player_Attributes AS PA ON T1.player_api_id = PA.player_api_id WHERE T1.player_name = 'Aaron Lennox'",
        "SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'",
        "SELECT SUM(T2.crossing) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Lennox'",
        "SELECT SUM(TA.crossing) FROM Player AS T1 INNER JOIN Player_Attributes AS TA ON T1.player_api_id = TA.player_api_id WHERE T1.player_name = 'Aaron Lennox'"
    ],
    "841": [
        "SELECT weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
        "SELECT weight_kg, race.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
        "SELECT weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
        "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
        "SELECT T1.weight_kg, T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
        "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"
    ],
    "906": [
        "SELECT T1.year, T2.points FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "SELECT MIN(races.year) AS first_race_year, results.points FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY results.driverId",
        "SELECT T1.year, T2.points FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "SELECT T1.year, T2.points FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN driverStandings AS T3 ON T2.driverId = T3.driverId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE CONCAT(T4.forename, ' ', T4.surname) = 'Lewis Hamilton' ORDER BY T1.year LIMIT 1",
        "SELECT R.raceId, Res.points FROM drivers D JOIN results Res ON D.driverId = Res.driverId JOIN races R ON Res.raceId = R.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.year = (SELECT MIN(R2.year) FROM races R2 JOIN results Res2 ON Res2.raceId = R2.raceId JOIN drivers D2 ON Res2.driverId = D2.driverId WHERE D2.forename = 'Lewis' AND D2.surname = 'Hamilton')",
        "SELECT R.name, RS.points  FROM results AS RS  INNER JOIN drivers AS D ON RS.driverId = D.driverId  INNER JOIN races AS R ON RS.raceId = R.raceId  WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'  AND R.year = (SELECT MIN(R2.year)                FROM results AS RS2                INNER JOIN drivers AS D2 ON RS2.driverId = D2.driverId                INNER JOIN races AS R2 ON RS2.raceId = R2.raceId                WHERE D2.forename = 'Lewis' AND D2.surname = 'Hamilton')"
    ],
    "856": [
        "SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'",
        "SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'",
        "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'",
        "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'",
        "SELECT T2.time FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.circuitRef = 'sepang'",
        "SELECT R.time FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Sepang International Circuit'"
    ],
    "470": [
        "SELECT sets.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'",
        "SELECT sets.releaseDate FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Ancestor''s Chosen'",
        "SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE id IN (SELECT id FROM cards WHERE name = 'Ancestor''s Chosen'))",
        "SELECT s.releaseDate FROM sets s JOIN cards c ON c.setCode = s.code WHERE c.name = 'Ancestor''s Chosen'",
        "SELECT sets.releaseDate FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'",
        "SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen'"
    ],
    "596": [
        "SELECT U.DisplayName, B.Name FROM users AS U JOIN comments AS C ON U.Id = C.UserId JOIN badges AS B ON U.Id = B.UserId GROUP BY U.Id ORDER BY COUNT(C.Id) DESC LIMIT 1",
        "SELECT U.DisplayName, B.Name FROM users AS U JOIN comments AS C ON U.Id = C.UserId JOIN badges AS B ON U.Id = B.UserId GROUP BY U.Id ORDER BY COUNT(C.Id) DESC LIMIT 1",
        "SELECT users.Id, users.DisplayName, badges.Name FROM users INNER JOIN comments ON users.Id = comments.UserId LEFT JOIN badges ON users.Id = badges.UserId GROUP BY users.Id ORDER BY COUNT(comments.Id) DESC",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1) AS T2 ON T1.UserId = T2.UserId",
        "SELECT T2.Id FROM badges T2 WHERE T2.UserId = (SELECT T1.UserId FROM comments T1 GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1)",
        "SELECT T1.UserId, T2.Id, T2.Name  FROM (SELECT UserId, COUNT(Id) AS CommentCount        FROM comments        GROUP BY UserId        HAVING COUNT(Id) = (SELECT MAX(CommentCount)                            FROM (SELECT COUNT(Id) AS CommentCount                                  FROM comments                                  GROUP BY UserId))) AS T1  INNER JOIN badges AS T2 ON T1.UserId = T2.UserId"
    ],
    "666": [
        "SELECT p.Id FROM posts AS p INNER JOIN votes AS v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1",
        "SELECT T1.PostId FROM votes AS T1 WHERE T1.UserId = 1465 ORDER BY (SELECT FavoriteCount FROM posts AS T2 WHERE T2.Id = T1.PostId) DESC LIMIT 1",
        "SELECT p.Id FROM posts p INNER JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 AND T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts AS T3 INNER JOIN votes AS T4 ON T3.Id = T4.PostId WHERE T4.UserId = 1465)"
    ],
    "688": [
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "###SQL: SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "SELECT COUNT(posts.Id) FROM posts WHERE posts.ViewCount > 35000 AND posts.CommentCount = 0",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0"
    ],
    "6": [
        "SELECT schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1",
        "SELECT schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1",
        "SELECT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1",
        "SELECT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1",
        "SELECT s.School FROM schools AS s JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr > 500 AND s.Magnet = 1",
        "SELECT T2.\"School Name\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1"
    ],
    "251": [
        "SELECT element FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1",
        "SELECT element FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1",
        "SELECT element, COUNT(*) AS element_count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY element_count ASC LIMIT 1",
        "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1",
        "SELECT T1.element FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1",
        "SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1"
    ],
    "1308": [
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL",
        "SELECT COUNT(T1.PLT) FROM Laboratory AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis IS NOT NULL",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
        "SELECT COUNT(*) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis IS NOT NULL"
    ],
    "322": [
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
        "SELECT element FROM atom WHERE atom_id = 'TR000_1'"
    ],
    "1194": [
        "SELECT P.SEX FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP = '2+' AND L.CRE = 1 AND L.LDH = 123",
        "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1 AND T3.LDH = 123",
        "SELECT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP = '2+' AND L.CRE = 1 AND L.LDH = 123",
        "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'SLE, APS, SJS' AND T3.CRP IN ('2+') AND T3.CRE = 1 AND T3.LDH = 289",
        "SELECT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis LIKE '%PSS%' AND L.CRP > '2' AND L.CRE = 1 AND L.LDH = 123",
        "SELECT T1.SEX  FROM Patient AS T1  INNER JOIN Examination AS T2 ON T1.ID = T2.ID  INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID  WHERE T2.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123"
    ],
    "201": [
        "SELECT CAST(SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(a.atom_id) AS percentage FROM bond AS b INNER JOIN atom AS a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '='",
        "SELECT (SUM(a.element = 'c') * 100.0 / COUNT(a.atom_id)) AS percentage FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '='",
        "SELECT CAST(SUM(T1.element = 'c') AS REAL) * 100 / COUNT(T1.atom_id) AS percentage FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "SELECT (SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.atom_id) AS carbon_percentage FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "SELECT (SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.atom_id)) * 100 AS percentage_carbon  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '='"
    ],
    "904": [
        "SELECT R.name, R.year FROM results AS Res INNER JOIN races AS R ON Res.raceId = R.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Michael' AND D.surname = 'Schumacher' AND Res.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE driverId = D.driverId)",
        "SELECT races.name, races.year FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1",
        "SELECT T2.name, T3.year FROM results AS T1 INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher' ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "SELECT T3.name, T3.year FROM races AS T3 INNER JOIN results AS T4 ON T3.raceId = T4.raceId INNER JOIN lapTimes AS T1 ON T4.raceId = T1.raceId INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher' AND T1.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher')",
        "SELECT R.name, R.year FROM results AS Res JOIN races AS R ON Res.raceId = R.raceId JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Michael' AND D.surname = 'Schumacher' ORDER BY Res.milliseconds LIMIT 1",
        "SELECT T3.name, T3.year FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher' AND T1.milliseconds = (SELECT MIN(T4.milliseconds) FROM results AS T4 INNER JOIN drivers AS T5 ON T4.driverId = T5.driverId WHERE T5.forename = 'Michael' AND T5.surname = 'Schumacher')"
    ],
    "482": [
        "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
        "SELECT cards.types FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
        "SELECT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
        "SELECT foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen'",
        "SELECT FD.type FROM cards AS C JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.name = 'Ancestor''s Chosen' AND FD.language = 'German'",
        "SELECT fd.type FROM cards AS c INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German'"
    ],
    "1036": [
        "SELECT T.team_long_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL) AND strftime('%Y', TA.date) = '2012'",
        "SELECT T.team_long_name FROM Team_Attributes AS T WHERE T.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL) AND strftime('%Y', T.date) = '2012'",
        "SELECT T.team_long_name FROM Team_Attributes T WHERE T.buildUpPlayPassing > (SELECT AVG(T1.buildUpPlayPassing) FROM Team_Attributes T1 WHERE strftime('%Y', T1.date) = '2012' AND T1.buildUpPlayPassing IS NOT NULL) AND strftime('%Y', T.date) = '2012'",
        "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL AND strftime('%Y', date) = '2012') AND strftime('%Y', TA.date) = '2012'",
        "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > (SELECT AVG(TA2.buildUpPlayPassing) FROM Team_Attributes TA2 WHERE strftime('%Y', TA2.date) = '2012' AND TA2.buildUpPlayPassing IS NOT NULL) AND strftime('%Y', TA.date) = '2012'",
        "SELECT team_long_name  FROM Team_Attributes  WHERE buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing)                               FROM Team_Attributes                               WHERE STRFTIME('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL)  AND STRFTIME('%Y', date) = '2012'"
    ],
    "185": [
        "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
        "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'",
        "SELECT (COUNT(CASE WHEN client.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague'",
        "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.region = 'Prague'",
        "SELECT (COUNT(CASE WHEN C.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM client AS C JOIN disp AS D ON C.client_id = D.client_id JOIN account AS A ON D.account_id = A.account_id WHERE A.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague')",
        "SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  INNER JOIN district AS T4 ON T1.district_id = T4.district_id  WHERE T4.A3 = 'Prague'"
    ],
    "1232": [
        "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250",
        "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250",
        "SELECT P.ID, P.SEX, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250",
        "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250",
        "SELECT Patient.ID, Patient.SEX, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU >= 180 AND Laboratory.`T-CHO` < 250",
        "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.GLU >= 180 AND L.`T-CHO` < 250"
    ],
    "353": [
        "SELECT sets.name, sets.totalSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian'",
        "SELECT sets.name, sets.totalSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian'",
        "SELECT s.name, s.totalSetSize FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.language = 'Italian'",
        "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "SELECT S.name, S.totalSetSize FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Italian'",
        "SELECT S.name, S.totalSetSize  FROM sets AS S  INNER JOIN set_translations AS ST ON S.code = ST.setCode  WHERE ST.language = 'Italian'"
    ],
    "437": [
        "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "SELECT id, name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1 ORDER BY id LIMIT 1",
        "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1"
    ],
    "1165": [
        "SELECT (MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday))) AS age_gap, MAX(Birthday) AS youngest_patient, MIN(Birthday) AS oldest_patient FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TG >= 200)",
        "SELECT (MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday))) AS age_gap, MAX(strftime('%Y', Birthday)) AS oldest_patient, MIN(strftime('%Y', Birthday)) AS youngest_patient FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200",
        "SELECT (MAX(year(Birthday)) - MIN(year(Birthday))) AS age_gap, MAX(CASE WHEN TG >= 200 THEN Birthday END) AS youngest_patient, MIN(CASE WHEN TG >= 200 THEN Birthday END) AS oldest_patient FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG >= 200",
        "###SQL: SELECT MAX(STRFTIME('%Y', T2.Birthday)) - MIN(STRFTIME('%Y', T2.Birthday)) FROM Patient AS T2 INNER JOIN Examination AS T1 ON T2.ID = T1.ID WHERE T1.TG >= 200",
        "SELECT MAX(year(Birthday)) - MIN(year(Birthday)) AS age_gap FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.TG < 200",
        "SELECT (MAX(YEAR(Birthday)) - MIN(YEAR(Birthday))) AS age_gap  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.TG >= 200"
    ],
    "556": [
        "SELECT COUNT(Id) * 1.0 / COUNT(DISTINCT DisplayName) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Views > 200)",
        "SELECT AVG(BadgeCount) FROM (SELECT COUNT(b.Id) AS BadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT COUNT(badges.Id) * 1.0 / COUNT(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Views > 200",
        "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
        "SELECT COUNT(T1.Id) * 1.0 / COUNT(DISTINCT T1.DisplayName) AS average_badges FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Views > 200",
        "SELECT COUNT(b.Id) * 1.0 / COUNT(DISTINCT u.Id) AS average_badges  FROM users AS u  LEFT JOIN badges AS b ON u.Id = b.UserId  WHERE u.Views > 200"
    ],
    "62": [
        "SELECT COUNT(*) FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter` = 0 AND T2.`County` = 'Los Angeles' AND (T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`) < 0.18",
        "SELECT COUNT(*) FROM schools WHERE Charter = 0 AND County = 'Los Angeles' AND (CAST(`Free Meal Count (K-12)` AS REAL) * 100 / CAST(`Enrollment (K-12)` AS REAL)) < 0.18",
        "SELECT COUNT(*) FROM frpm AS f INNER JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE s.Charter = 0 AND (f.`Free Meal Count (K-12)` * 100 / f.`Enrollment (K-12)`) < 0.18 AND s.County = 'Los Angeles'",
        "SELECT COUNT(s1.CDSCode) FROM schools AS s1 INNER JOIN frpm AS s2 ON s1.CDSCode = s2.CDSCode WHERE s1.Charter = 0 AND s1.County = 'Los Angeles' AND (CAST(s2.`Free Meal Count (K-12)` AS REAL) * 100 / CAST(s2.`Enrollment (K-12)` AS REAL)) < 0.18",
        "SELECT COUNT(*) FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Charter = 0 AND T1.County = 'Los Angeles' AND (T2.`Free Meal Count (K-12)` * 100 / T2.`Enrollment (K-12)`) < 0.18",
        "SELECT COUNT(*) FROM schools WHERE Charter = 0 AND County = 'Los Angeles' AND (Free Meal Count (K-12) * 100 / Enrollment (K-12)) < 0.18"
    ],
    "1223": [
        "SELECT (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5) > (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.CRE >= 1.5) AS result",
        "SELECT (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END)) AS result FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5",
        "SELECT (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5) > (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.CRE >= 1.5) AS Result",
        "SELECT Patient.SEX, COUNT(*) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRE >= 1.5 GROUP BY Patient.SEX",
        "SELECT (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END)) AS result FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CRE >= 1.5",
        "SELECT (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END)) AS result FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5"
    ],
    "1426": [
        "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT T1.last_name, T2.department, T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "SELECT T1.last_name, T2.department, T2.college  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.major_name = 'Environmental Engineering'"
    ],
    "1490": [
        "SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / COUNT(DISTINCT T2.CustomerID)) AS Percentage FROM customers AS T1 LEFT JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Consumption > 46.73",
        "SELECT (COUNT(CASE WHEN Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM')",
        "SELECT (COUNT(CASE WHEN T2.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfLAMCustomers FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100.0 / CAST(COUNT(*) AS REAL) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "SELECT (CAST(SUM(CASE WHEN Y.Consumption > 46.73 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(C.CustomerID)) * 100 AS percent_consumption FROM customers AS C JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'LAM'",
        "SELECT (COUNT(CASE WHEN Y.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM customers AS C JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'LAM'"
    ],
    "686": [
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)"
    ],
    "662": [
        "SELECT COUNT(DISTINCT posts.Id) FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE votes.BountyAmount = 50 AND strftime('%Y', posts.CreaionDate) = '2011'",
        "SELECT COUNT(DISTINCT posts.Id) FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE YEAR(votes.CreationDate) = 2011 AND votes.BountyAmount = 50",
        "SELECT COUNT(DISTINCT P.Id) FROM posts AS P INNER JOIN votes AS V ON P.Id = V.PostId WHERE YEAR(P.CreationDate) = 2011 AND V.BountyAmount = 50",
        "SELECT COUNT(votes.PostId) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE strftime('%Y', posts.CreationDate) = '2011' AND votes.BountyAmount = 50",
        "SELECT COUNT(*) FROM posts AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId WHERE YEAR(T1.CreaionDate) = 2011 AND T2.BountyAmount = 50",
        "SELECT COUNT(DISTINCT T1.Id)  FROM posts AS T1  INNER JOIN votes AS T2 ON T1.Id = T2.PostId  WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T2.BountyAmount = 50"
    ],
    "1333": [
        "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'",
        "SELECT zip_code.city, zip_code.state FROM member AS T1 INNER JOIN zip_code ON T1.zip = zip_code.zip_code WHERE T1.position = 'President'",
        "SELECT zc.city, zc.state FROM member AS m INNER JOIN zip_code AS zc ON m.zip = zc.zip_code WHERE m.position = 'President'",
        "SELECT Z.city, Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.position = 'President'",
        "SELECT T2.city, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'"
    ],
    "1139": [
        "SELECT M.home_team_goal, M.away_team_goal FROM Match M JOIN League L ON M.league_id = L.id WHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League'",
        "SELECT M.home_team_goal, M.away_team_goal FROM Match M JOIN League L ON M.league_id = L.id WHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League'",
        "SELECT M.home_team_goal, M.away_team_goal FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League'",
        "SELECT home_team_goal, away_team_goal FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League'",
        "SELECT M.home_team_goal, M.away_team_goal FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League'",
        "SELECT T1.home_team_goal, T1.away_team_goal  FROM Match AS T1  INNER JOIN League AS T2 ON T1.league_id = T2.id  WHERE T1.date LIKE '2008-09-24%' AND T2.name = 'Belgium Jupiler League'"
    ],
    "844": [
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.superhero_name = 'Blackwulf'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'"
    ],
    "333": [
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
        "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
        "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'"
    ],
    "680": [
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner')",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner')",
        "SELECT AVG(Score) FROM posts WHERE OwnerDisplayName = 'Stephen Turner'",
        "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Stephen Turner'",
        "SELECT AVG(T2.Score) FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
        "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner'"
    ],
    "391": [
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B'",
        "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "SELECT cards.name, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B'",
        "SELECT cards.id, foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors LIKE '%B%' AND foreign_data.language = 'Russian'",
        "SELECT T1.id FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "SELECT T1.name, T2.language  FROM cards AS T1  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T1.originalType = 'Artifact' AND T1.colors LIKE '%B%'"
    ],
    "503": [
        "SELECT S.type FROM sets AS S JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Samite Pilgrim'",
        "SELECT S.type FROM sets AS S INNER JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Samite Pilgrim'",
        "SELECT sets.type, sets.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Samite Pilgrim'",
        "SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim'",
        "SELECT S.type FROM cards AS C JOIN sets AS S ON C.setCode = S.code WHERE C.name = 'Samite Pilgrim'",
        "SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim'"
    ],
    "378": [
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND hasFoil = 1",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE hasFoil = 1 AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"
    ],
    "541": [
        "SELECT T1.OwnerDisplayName FROM posts T1 ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId ORDER BY posts.FavoriteCount DESC LIMIT 1",
        "SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "SELECT T3.DisplayName FROM posts AS T1 INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "SELECT T1.OwnerDisplayName FROM posts T1 ORDER BY T1.FavoriteCount DESC LIMIT 1",
        "SELECT T2.DisplayName  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)"
    ],
    "55": [
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS Ratio",
        "SELECT (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') * 1.0 / (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS ratio",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio",
        "SELECT CAST(COUNT(CASE WHEN County = 'Colusa' THEN CDSCode END) AS REAL) / COUNT(CASE WHEN County = 'Humboldt' THEN CDSCode END) FROM schools WHERE State = 'CA'",
        "SELECT (SELECT COUNT(*) FROM schools AS T1 WHERE T1.County = 'Colusa' AND T1.MailState = 'CA') * 1.0 / (SELECT COUNT(*) FROM schools AS T2 WHERE T2.County = 'Humboldt' AND T2.MailState = 'CA') AS ratio",
        "SELECT      (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 /      NULLIF((SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA'), 0) AS ratio"
    ],
    "1336": [
        "SELECT M.link_to_major, J.department FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.last_name IN ('Guidi', 'Pierce')",
        "SELECT J.department FROM member AS M JOIN major AS J ON M.link_to_major = J.major_id WHERE M.last_name IN ('Guidi', 'Pierce')",
        "SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name IN ('Guidi', 'Pierce')",
        "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name IN ('Guidi', 'Pierce')",
        "SELECT DISTINCT M2.department FROM member AS M1 JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE (M1.first_name = 'Grant' AND M1.last_name = 'Pierce') OR (M1.first_name = 'Madelyn' AND M1.last_name = 'Guidi')",
        "SELECT DISTINCT M.department FROM major AS M INNER JOIN member AS Me ON M.major_id = Me.link_to_major WHERE Me.first_name IN ('Keaton', 'Madelyn') AND Me.last_name IN ('Pierce', 'Guidi')"
    ],
    "427": [
        "SELECT DISTINCT ST.language FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE S.mcmName = 'Archenemy' AND S.code = 'ARC'",
        "SELECT DISTINCT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.mcmName = 'Archenemy' AND S.code = 'ARC'",
        "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC'",
        "SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.mcmName = 'Archenemy' AND T2.code = 'ARC'",
        "SELECT ST.language FROM sets S JOIN set_translations ST ON S.code = ST.setCode WHERE S.mcmName = 'Archenemy' AND S.code = 'ARC'",
        "SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC'"
    ],
    "1444": [
        "SELECT expense.expense_description FROM expense GROUP BY expense.expense_description HAVING (SUM(expense.cost) / COUNT(expense.expense_id)) > 50",
        "SELECT expense.expense_description FROM expense GROUP BY expense.expense_description HAVING AVG(expense.cost) > 50",
        "SELECT expense_description FROM expense GROUP BY expense_description HAVING (SUM(cost) / COUNT(expense_id)) > 50",
        "###SQL: SELECT T1.expense_description FROM expense AS T1 GROUP BY T1.expense_description HAVING CAST(SUM(T1.cost) AS REAL) / CAST(COUNT(T1.expense_id) AS REAL) > 50",
        "SELECT expense.expense_description FROM expense GROUP BY expense.expense_id HAVING (SUM(expense.cost) / COUNT(expense.expense_id)) > 50",
        "SELECT expense_description FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50"
    ],
    "979": [
        "SELECT raceId, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1",
        "SELECT raceId, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1",
        "SELECT raceId, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers DESC LIMIT 1",
        "SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(time) DESC LIMIT 1",
        "SELECT T1.raceId FROM results T1 WHERE T1.time IS NOT NULL GROUP BY T1.raceId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1"
    ],
    "1300": [
        "SELECT P.Diagnosis FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1",
        "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1",
        "SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 ORDER BY T1.TG DESC LIMIT 1",
        "SELECT T1.Diagnosis FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
        "SELECT P.Diagnosis  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.TG < 200  AND L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200)"
    ],
    "928": [
        "SELECT D.driverRef FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE RA.name = 'Canadian Grand Prix' AND RA.year = 2007 ORDER BY R.positionOrder ASC LIMIT 1",
        "SELECT drivers.driverRef FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 ORDER BY results.positionOrder ASC LIMIT 1",
        "SELECT D.driverRef FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Canadian Grand Prix' AND RA.year = 2007 AND R.positionOrder = 1",
        "SELECT T3.driverRef FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN seasons AS T4 ON T2.year = T4.year INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Canadian Grand Prix' AND T4.year = 2007 AND T1.position = 1",
        "SELECT d.driverRef FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2007 AND r.position = 1",
        "SELECT T3.driverRef  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2007 AND T2.position = 1"
    ],
    "1191": [
        "SELECT (COUNT(CASE WHEN P.Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(P.ID)) AS percentage FROM Patient P WHERE P.SEX = 'M' AND strftime('%Y', P.`First Date`) = '1981'",
        "SELECT (SUM(CASE WHEN Patient.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM Patient WHERE strftime('%Y', `First Date`) = '1981' AND SEX = 'M'",
        "SELECT CAST(SUM(CASE WHEN P.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.ID) FROM Patient AS P WHERE strftime('%Y', P.`First Date`) = '1981' AND P.SEX = 'M'",
        "SELECT CAST(SUM(CASE WHEN T1.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 WHERE strftime('%Y', T1.`First Date`) = '1981' AND T1.SEX = 'M'",
        "SELECT (SUM(CASE WHEN P.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM Patient P WHERE P.SEX = 'M' AND strftime('%Y', P.`First Date`) = '1981'",
        "SELECT (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM Patient  WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981'"
    ],
    "1507": [
        "SELECT DISTINCT T.Time FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.ChainID = 11",
        "SELECT DISTINCT T.Time FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.ChainID = 11",
        "SELECT DISTINCT Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11)",
        "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 42",
        "SELECT DISTINCT T1.Time FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
        "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"
    ],
    "518": [
        "SELECT T2.format, GROUP_CONCAT(T1.name) AS banned_card_names FROM legalities AS T2 JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' GROUP BY T2.format ORDER BY COUNT(T2.status) DESC LIMIT 1",
        "SELECT T3.format, GROUP_CONCAT(T1.name) AS card_names FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' GROUP BY T3.format ORDER BY COUNT(T2.status) DESC LIMIT 1",
        "SELECT L.format, GROUP_CONCAT(C.name) AS banned_cards FROM legalities AS L INNER JOIN cards AS C ON L.uuid = C.uuid WHERE L.status = 'Banned' GROUP BY L.format HAVING COUNT(L.status) = (SELECT MAX(ban_count) FROM (SELECT COUNT(status) AS ban_count FROM legalities WHERE status = 'Banned' GROUP BY format))",
        "SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' AND T1.format = (SELECT T1.format FROM legalities AS T1 WHERE T1.status = 'Banned' GROUP BY T1.format ORDER BY COUNT(T1.status) DESC LIMIT 1)",
        "SELECT T1.name FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T2.format = (SELECT T3.format FROM legalities AS T3 WHERE T3.status = 'Banned' GROUP BY T3.format ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' AND T1.format = (     SELECT T3.format     FROM legalities AS T3     WHERE T3.status = 'Banned'     GROUP BY T3.format     ORDER BY COUNT(T3.status) DESC     LIMIT 1 )"
    ],
    "803": [
        "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "SELECT superpower.id FROM superpower WHERE superpower.power_name = 'Cryokinesis'",
        "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "SELECT T1.id FROM superpower AS T1 WHERE T1.power_name = 'Cryokinesis'",
        "SELECT id FROM superpower WHERE power_name = 'cryokinesis'",
        "SELECT id FROM superpower WHERE power_name = 'cryokinesis'"
    ],
    "605": [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'",
        "SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'",
        "SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 WHERE T1.Name = 'Announcer'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'"
    ],
    "1284": [
        "SELECT MIN(First_Date) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500))",
        "SELECT MIN(Patient.`First Date`) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH < 500 AND Laboratory.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)",
        "SELECT MIN(P.First_Date) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH < 500 AND L.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)",
        "SELECT MIN(P1.`First Date`) FROM Patient AS P1 INNER JOIN Laboratory AS L1 ON P1.ID = L1.ID WHERE L1.LDH < 500 GROUP BY P1.ID ORDER BY L1.LDH DESC LIMIT 1",
        "SELECT MIN(P.`First Date`) FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.LDH < 500 ORDER BY L.LDH DESC LIMIT 1",
        "SELECT MIN(P.`First Date`) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.LDH < 500 AND L.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)"
    ],
    "703": [
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20",
        "SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20",
        "SELECT COUNT(*) FROM tags T1 WHERE T1.Id < 15 AND T1.Count <= 20",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20"
    ],
    "722": [
        "SELECT C.colour FROM superhero S JOIN colour C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'",
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'",
        "SELECT c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'"
    ],
    "621": [
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users)",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users)",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users)",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)",
        "SELECT T1.Name FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)",
        "SELECT DISTINCT T1.Name  FROM badges AS T1  INNER JOIN users AS T2 ON T1.UserId = T2.Id  WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)"
    ],
    "1135": [
        "SELECT DISTINCT p.player_api_id FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.preferred_foot = 'right' ORDER BY pa.potential ASC LIMIT 5",
        "SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5",
        "SELECT t1.id FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'right' ORDER BY t2.potential ASC LIMIT 5",
        "SELECT id FROM Player WHERE potential = (SELECT MIN(potential) FROM Player WHERE preferred_foot = 'right') AND preferred_foot = 'right' LIMIT 5",
        "SELECT P.id FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential IS NOT NULL AND P.player_fifa_api_id IS NOT NULL AND PA.preferred_foot = 'right' ORDER BY PA.potential ASC LIMIT 5",
        "SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY player_api_id LIMIT 5"
    ],
    "1079": [
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT id FROM Player WHERE height IS NOT NULL ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)"
    ],
    "203": [
        "SELECT COUNT(*) FROM atom WHERE element != 'br'",
        "SELECT COUNT(*) FROM atom WHERE element != 'br'",
        "SELECT COUNT(*) FROM atom WHERE element != 'br'",
        "SELECT COUNT(atom_id) FROM atom WHERE element != 'br'",
        "SELECT COUNT(*) FROM atom WHERE element != 'br'",
        "SELECT COUNT(*) FROM atom WHERE element != 'br'"
    ],
    "631": [
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo'",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo'",
        "SELECT COUNT(Id) FROM posts WHERE OwnerDisplayName = 'Daniel Vassallo'",
        "SELECT COUNT(T1.Id) FROM posts T1 INNER JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Daniel Vassallo'",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')"
    ],
    "359": [
        "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT originalType FROM cards WHERE name = 'Ancestor's Chosen'",
        "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'"
    ],
    "1436": [
        "SELECT DISTINCT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50",
        "SELECT DISTINCT a.link_to_event FROM attendance AS a INNER JOIN expense AS e ON a.link_to_member = e.link_to_member WHERE e.cost > 50",
        "SELECT DISTINCT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50",
        "SELECT T1.link_to_event FROM attendance AS T1 INNER JOIN expense AS T2 ON T1.link_to_member = T2.link_to_member WHERE T2.cost > 50",
        "SELECT T1.link_to_event FROM expense AS T1 JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.cost > 50",
        "SELECT DISTINCT T2.link_to_event  FROM expense AS T1  INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member  WHERE T1.cost > 50"
    ],
    "1279": [
        "SELECT CAST(COUNT(CASE WHEN L.GOT >= 60 AND E.Diagnosis = 'SLE' THEN 1 END) AS REAL) * 100.0 / COUNT(CASE WHEN L.GOT >= 60 THEN 1 END) AS Percentage FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID WHERE L.GOT >= 60",
        "SELECT CAST(COUNT(CASE WHEN L.GOT >= 60 AND P.Diagnosis = 'SLE' THEN P.ID END) AS REAL) / COUNT(CASE WHEN L.GOT >= 60 THEN P.ID END) * 100 AS percentage FROM Laboratory L JOIN Patient P ON L.ID = P.ID",
        "SELECT (COUNT(CASE WHEN L.GOT >= 60 AND P.Diagnosis = 'SLE' THEN 1 END) * 100.0) / NULLIF(COUNT(CASE WHEN L.GOT >= 60 THEN 1 END), 0) AS Percentage FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID",
        "SELECT CAST(COUNT(CASE WHEN T1.GOT >= 60 AND T2.Diagnosis = 'SLE' THEN T2.ID ELSE NULL END) AS REAL) * 100 / COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60",
        "SELECT (COUNT(T1.ID) * 1.0 / (SELECT COUNT(T2.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60) * 100) AS percentage FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60 AND T2.Diagnosis = 'SLE'",
        "SELECT (COUNT(CASE WHEN P.Diagnosis = 'SLE' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60"
    ],
    "645": [
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60",
        "SELECT COUNT(Id) FROM comments WHERE Score < 60 AND UserId = 13",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60"
    ],
    "861": [
        "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 LIKE '0:01:54%'",
        "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 LIKE '0:01:54%'",
        "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 903 AND qualifying.q3 LIKE '0:01:54%'",
        "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q3 LIKE '0:01:54%' AND T2.raceId = 903",
        "SELECT driverId FROM qualifying WHERE q3 LIKE '0:01:54' AND raceId = 903",
        "SELECT T1.driverId FROM qualifying AS T1 WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'"
    ],
    "796": [
        "SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'",
        "SELECT T2.attribute_name, HA.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS HA ON T1.id = HA.hero_id INNER JOIN attribute AS T2 ON HA.attribute_id = T2.id WHERE T1.superhero_name = '3-D Man'",
        "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man'",
        "SELECT T1.attribute_name, T2.attribute_value FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'",
        "SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 JOIN superhero AS T3 ON T1.hero_id = T3.id JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T3.superhero_name = '3-D Man'",
        "SELECT T2.attribute_name, T1.attribute_value  FROM hero_attribute AS T1  INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id  INNER JOIN superhero AS T3 ON T1.hero_id = T3.id  WHERE T3.superhero_name = '3-D Man'"
    ],
    "1049": [
        "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2015/2016'",
        "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2015/2016'",
        "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' AND L.name = 'Scotland Premier League'",
        "SELECT COUNT(M.id) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2015/2016'",
        "SELECT COUNT(M.id) FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2015/2016'",
        "SELECT COUNT(*) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016'"
    ],
    "574": [
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'"
    ],
    "148": [
        "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND account.account_id IN (SELECT disp.account_id FROM disp WHERE disp.type = 'OWNER')",
        "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER'",
        "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER'",
        "SELECT T1.account_id, T1.district_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Tabor' AND T2.type = 'OWNER'",
        "SELECT T1.account_id FROM account AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Tabor' AND T2.type = 'OWNER'",
        "SELECT DISTINCT A.account_id FROM account A INNER JOIN disp D ON A.account_id = D.account_id INNER JOIN district DT ON A.district_id = DT.district_id WHERE DT.A2 = 'Tabor' AND D.type = 'OWNER'"
    ],
    "138": [
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A15 = (SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND T1.gender = 'M'",
        "SELECT COUNT(C1.client_id) FROM client AS C1 INNER JOIN district AS D1 ON C1.district_id = D1.district_id WHERE D1.district_id = (SELECT D2.district_id FROM district AS D2 ORDER BY D2.A15 DESC LIMIT 1 OFFSET 1) AND C1.gender = 'M'",
        "SELECT COUNT(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A15 = (SELECT DISTINCT A15 FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND client.gender = 'M'",
        "SELECT COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1)",
        "SELECT COUNT(C.client_id) FROM client C JOIN district D ON C.district_id = D.district_id WHERE D.A15 = (SELECT D2.A15 FROM district D2 ORDER BY D2.A15 DESC LIMIT 1 OFFSET 1) AND C.gender = 'M'",
        "SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'"
    ],
    "296": [
        "SELECT B.molecule_id FROM bond AS B WHERE B.bond_id = 'TR000_1_2' AND B.bond_id LIKE 'TR000_1_%'",
        "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T1.bond_id = 'TR000_1_2'",
        "SELECT T.molecule_id FROM bond AS T WHERE T.bond_id = 'TR000_1_2'",
        "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR000_1_2' AND T2.atom_id = 'TR000_1'",
        "SELECT B.molecule_id FROM connected AS C JOIN bond AS B ON C.bond_id = B.bond_id WHERE C.atom_id = 'TR000_1' AND C.bond_id = 'TR000_1_2'",
        "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR000_1_2' AND T2.atom_id = 'TR000_1'"
    ],
    "547": [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score > 19",
        "SELECT COUNT(*) FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20",
        "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20",
        "SELECT COUNT(T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20",
        "SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20"
    ],
    "823": [
        "SELECT COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female' AND T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE G.gender = 'Female' AND P.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND T2.publisher_name = 'Marvel Comics'"
    ],
    "738": [
        "SELECT S.superhero_name FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Durability' AND HA.attribute_value < 50",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
        "SELECT T1.superhero_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50",
        "SELECT T1.hero_id FROM hero_attribute T1 JOIN attribute T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50",
        "SELECT T3.superhero_name  FROM hero_attribute AS T1  INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id  INNER JOIN superhero AS T3 ON T1.hero_id = T3.id  WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50"
    ],
    "694": [
        "SELECT C.Text, C.UserDisplayName FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'Analysing wind data with R' ORDER BY C.CreationDate DESC LIMIT 10",
        "SELECT C.Text, C.UserDisplayName FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'Analysing wind data with R' ORDER BY C.CreationDate DESC LIMIT 10",
        "SELECT c.Text, c.UserDisplayName FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10",
        "SELECT comments.Text, users.DisplayName FROM comments INNER JOIN posts ON comments.PostId = posts.Id INNER JOIN users ON comments.UserId = users.Id WHERE posts.Title = 'Analysing wind data with R' ORDER BY comments.CreationDate DESC LIMIT 10",
        "SELECT T1.Text, T2.DisplayName FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R') ORDER BY T1.CreationDate DESC LIMIT 10",
        "SELECT C.Text, U.DisplayName  FROM comments AS C  INNER JOIN posts AS P ON C.PostId = P.Id  INNER JOIN users AS U ON C.UserId = U.Id  WHERE P.Title = 'Analysing wind data with R'  ORDER BY C.CreationDate DESC  LIMIT 10"
    ],
    "318": [
        "SELECT B.molecule_id FROM bond AS B WHERE B.bond_id = 'TR001_1_7'",
        "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
        "SELECT B.molecule_id FROM bond AS B WHERE B.bond_id = 'TR001_1_7'",
        "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
        "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
        "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'"
    ],
    "664": [
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "SELECT SUM(Score) FROM posts WHERE LastActivityDate LIKE '2010-07-19%'",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'"
    ],
    "261": [
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    ],
    "20": [
        "SELECT COUNT(*) FROM schools WHERE `Low Grade` = '9' AND `High Grade` = '12' AND County = 'Amador'",
        "SELECT COUNT(*) FROM schools WHERE `Low Grade` = '9' AND `High Grade` = '12' AND `County` = 'Amador'",
        "SELECT COUNT(*) FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Low Grade` = '9' AND T1.`High Grade` = '12' AND T2.`County Name` = 'Amador'",
        "SELECT COUNT(sch.CDSCode) FROM schools AS sch JOIN frpm AS f ON sch.CDSCode = f.CDSCode WHERE f.CountyName = 'Amador' AND f.LowGrade = '9' AND f.HighGrade = '12'",
        "SELECT COUNT(*) FROM schools AS T1 WHERE T1.County = 'Amador' AND T1.LowGrade = '9' AND T1.HighGrade = '12'",
        "SELECT COUNT(*) FROM schools WHERE County = 'Amador' AND LowGrade = '9' AND HighGrade = '12'"
    ],
    "117": [
        "SELECT CAST(SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) AS REAL) * 100 / SUM(loan.amount) AS percentage FROM loan",
        "SELECT CAST(SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) AS REAL) * 100 / SUM(loan.amount) AS percentage FROM loan",
        "SELECT CAST(SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) AS REAL) * 100 / SUM(loan.amount) AS percentage FROM loan",
        "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan",
        "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / NULLIF(SUM(amount), 0)) AS percentage_paid FROM loan",
        "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_paid FROM loan"
    ],
    "1003": [
        "SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.statusId = (SELECT statusId FROM status WHERE status = 'Accident') AND T2.name = 'Canadian Grand Prix' AND T1.driverId = (SELECT driverId FROM results AS T3 WHERE T3.raceId = T2.raceId AND T3.statusId = (SELECT statusId FROM status WHERE status = 'Accident') GROUP BY T3.driverId ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT COUNT(*) FROM results WHERE driverId = (SELECT driverId FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Canadian Grand Prix' AND results.statusId = 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND statusId = 3",
        "SELECT COUNT(*) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Canadian Grand Prix' AND R.statusId = 3 GROUP BY R.driverId ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT T1.driverId, COUNT(*) AS accident_count FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T1.driverId ORDER BY accident_count DESC LIMIT 1",
        "SELECT COUNT(results.resultId) AS accident_count FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T1.driverId ORDER BY accident_count DESC LIMIT 1",
        "SELECT COUNT(*) FROM results WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND statusId = 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND statusId = 3"
    ],
    "1071": [
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32",
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32",
        "SELECT team_short_name FROM Team_Attributes WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32",
        "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32",
        "SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32",
        "SELECT T1.team_short_name FROM Team_Attributes AS T1 WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32"
    ],
    "512": [
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'",
        "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'",
        "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a'"
    ],
    "810": [
        "SELECT R.race, S.superhero_name FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN race AS R ON S.race_id = R.id WHERE HA.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)",
        "SELECT T2.race, T1.superhero_name FROM superhero AS T1 JOIN hero_attribute AS HA ON T1.id = HA.hero_id JOIN race AS T2 ON T1.race_id = T2.id WHERE HA.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute) LIMIT 1",
        "SELECT race.race, superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)",
        "SELECT T4.race FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN race AS T4 ON T2.race_id = T4.id WHERE T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)",
        "SELECT R.race FROM hero_attribute HA JOIN superhero S ON HA.hero_id = S.id JOIN race R ON S.race_id = R.id WHERE HA.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)",
        "SELECT T3.race FROM (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)) AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN race AS T3 ON T2.race_id = T3.id"
    ],
    "1503": [
        "SELECT DISTINCT P.Description FROM transactions_1k AS T INNER JOIN products AS P ON T.ProductID = P.ProductID INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'",
        "SELECT DISTINCT P.Description FROM transactions_1k AS T INNER JOIN products AS P ON T.ProductID = P.ProductID INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'",
        "SELECT DISTINCT p.Description FROM products AS p INNER JOIN transactions_1k AS t ON p.ProductID = t.ProductID WHERE t.CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')",
        "SELECT P.Description FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID INNER JOIN products AS P ON T.ProductID = P.ProductID WHERE C.Currency = 'EUR'",
        "SELECT P.Description FROM transactions_1k T1 JOIN products P ON T1.ProductID = P.ProductID JOIN customers C ON T1.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'",
        "SELECT DISTINCT P.Description  FROM transactions_1k AS T  INNER JOIN customers AS C ON T.CustomerID = C.CustomerID  INNER JOIN products AS P ON T.ProductID = P.ProductID  WHERE C.Currency = 'EUR'"
    ],
    "237": [
        "SELECT T.molecule_id, T.label FROM molecule AS T JOIN atom AS A ON T.molecule_id = A.molecule_id WHERE A.atom_id = 'TR001_10'",
        "SELECT M.molecule_id, M.label FROM atom AS A JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.atom_id = 'TR001_10'",
        "SELECT T2.molecule_id, T3.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "SELECT T2.molecule_id, T1.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "SELECT T2.molecule_id, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "SELECT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'"
    ],
    "457": [
        "SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle' AND purchaseUrls IS NOT NULL",
        "SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle' AND purchaseUrls IS NOT NULL",
        "SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%'",
        "SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%'"
    ],
    "1201": [
        "SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'",
        "SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'",
        "SELECT (CAST(SUM(CASE WHEN Patient.SEX = 'F' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Patient.SEX)) * 100 AS percentage FROM Patient WHERE YEAR(Patient.Birthday) = 1980 AND Patient.Diagnosis = 'RA'",
        "SELECT CAST(SUM(CASE WHEN T2.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.YEAR(T2.BIRTHDAY) = '1980' AND T2.Diagnosis = 'RA'",
        "SELECT (CAST(SUM(SEX = 'F') AS FLOAT) / COUNT(SEX)) * 100 AS percentage FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA'",
        "SELECT (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA'"
    ],
    "1293": [
        "SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5",
        "SELECT MAX(E.ANA) AS highest_ANA, P.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.CRE < 1.5",
        "SELECT MAX(E.ANA) AS highest_ANA, P.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.CRE < 1.5",
        "SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
        "SELECT MAX(T1.`ANA`) FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5",
        "SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5"
    ],
    "1153": [
        "SELECT P.Diagnosis, L.Date FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609",
        "SELECT Patient.Diagnosis, Laboratory.Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609",
        "SELECT P.Diagnosis, L.Date FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609",
        "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 4007151",
        "SELECT P.Diagnosis, L.Date FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609",
        "SELECT P.Diagnosis, L.Date FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609"
    ],
    "1482": [
        "SELECT Segment, (SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) * 100 AS PercentageIncrease FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Currency = 'EUR' AND Y.Date BETWEEN '201201' AND '201312' GROUP BY Segment ORDER BY PercentageIncrease ASC",
        "SELECT Segment, (SUM(CASE WHEN Date BETWEEN '201301' AND '201312' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Date BETWEEN '201201' AND '201212' THEN Consumption ELSE 0 END)) / NULLIF(SUM(CASE WHEN Date BETWEEN '201301' AND '201312' THEN Consumption ELSE 0 END), 0) * 100 AS Percentage_Increase FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' AND (Y.Date BETWEEN '201201' AND '201212' OR Y.Date BETWEEN '201301' AND '201312') GROUP BY Segment ORDER BY Percentage_Increase ASC",
        "SELECT Segment, (SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) AS Consumption_Change, (SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) / NULLIF(SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END), 0) * 100 AS Percentage_Increase FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Currency = 'EUR' AND SUBSTR(Y.Date, 1, 4) IN ('2012', '2013') GROUP BY Segment ORDER BY Percentage_Increase ASC",
        "SELECT customers.Segment, MAX((CAST(SUM(CASE WHEN yearmonth.Date LIKE '2013%' THEN yearmonth.Consumption ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN yearmonth.Date LIKE '2012%' THEN yearmonth.Consumption ELSE 0 END) AS REAL)) * 100.0 / CAST(SUM(CASE WHEN yearmonth.Date LIKE '2013%' THEN yearmonth.Consumption ELSE 0 END) AS REAL)) AS max_increase, MIN((CAST(SUM(CASE WHEN yearmonth.Date LIKE '2013%' THEN yearmonth.Consumption ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN yearmonth.Date LIKE '2012%' THEN yearmonth.Consumption ELSE 0 END) AS REAL)) * 100.0 / CAST(SUM(CASE WHEN yearmonth.Date LIKE '2013%' THEN yearmonth.Consumption ELSE 0 END) AS REAL)) AS min_increase FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' AND (yearmonth.Date LIKE '2012%' OR yearmonth.Date LIKE '2013%') GROUP BY customers.Segment",
        "SELECT Segment, (SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) AS PercentageIncrease FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY Segment ORDER BY PercentageIncrease DESC LIMIT 1 UNION SELECT Segment, (SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) AS PercentageIncrease FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY Segment ORDER BY PercentageIncrease ASC LIMIT 1",
        "SELECT Segment,         (SUM(CASE WHEN STRFTIME('%Y', Date) = '2013' THEN Consumption ELSE 0 END) -          SUM(CASE WHEN STRFTIME('%Y', Date) = '2012' THEN Consumption ELSE 0 END)) /          NULLIF(SUM(CASE WHEN STRFTIME('%Y', Date) = '2013' THEN Consumption ELSE 0 END), 0) * 100 AS Percentage_Increase FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE STRFTIME('%Y', Date) IN ('2012', '2013') GROUP BY C.Segment ORDER BY Percentage_Increase DESC"
    ],
    "1077": [
        "SELECT T.team_long_name FROM Team T WHERE T.team_short_name = 'GEN'",
        "SELECT T.team_long_name FROM Team T WHERE T.team_short_name = 'GEN'",
        "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "SELECT team_long_name FROM team WHERE team_short_name = 'GEN'",
        "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'"
    ],
    "1440": [
        "SELECT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
        "SELECT DISTINCT member.email FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
        "SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
        "SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'",
        "SELECT T2.email FROM expense AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND T1.cost > 20",
        "SELECT DISTINCT M.email FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE E.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND E.cost > 20"
    ],
    "131": [
        "SELECT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status IN ('C', 'D') GROUP BY district.A2 ORDER BY COUNT(loan.loan_id) DESC LIMIT 1",
        "SELECT T3.A2 AS district, COUNT(T1.loan_id) AS active_loans FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status IN ('C', 'D') GROUP BY T3.A2 ORDER BY active_loans DESC LIMIT 1",
        "SELECT district.A3, COUNT(loan.loan_id) AS active_loans FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.A3 ORDER BY active_loans DESC LIMIT 1",
        "SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T1.A2 ORDER BY COUNT(T3.loan_id) DESC LIMIT 1",
        "SELECT D.A3 FROM loan L JOIN account A ON L.account_id = A.account_id JOIN district D ON A.district_id = D.district_id WHERE L.status IN ('C', 'D') GROUP BY D.A3 ORDER BY COUNT(L.loan_id) DESC LIMIT 1",
        "SELECT T3.A3, SUM(T1.amount) AS total_active_loans FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status IN ('C', 'D') GROUP BY T3.A3 ORDER BY total_active_loans DESC LIMIT 1"
    ],
    "319": [
        "SELECT COUNT(DISTINCT A.element) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_3_4'",
        "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_3_4'",
        "SELECT COUNT(DISTINCT A.element) FROM connected AS C JOIN bond AS B ON C.bond_id = B.bond_id JOIN atom AS A ON C.atom_id = A.atom_id OR C.atom_id2 = A.atom_id WHERE B.bond_id = 'TR001_3_4'",
        "###SQL: SELECT COUNT(DISTINCT a.atom_id) FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR001_3_4'",
        "SELECT COUNT(DISTINCT T2.element) FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR001_3_4'",
        "SELECT COUNT(DISTINCT T3.element) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR001_3_4'"
    ],
    "67": [
        "SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District' AND ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND City = 'San Francisco'",
        "SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District' AND ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND City = 'San Francisco'",
        "SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District' AND ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND City = 'San Francisco'",
        "SELECT COUNT(frpm.CDSCode) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND schools.City = 'San Francisco' AND schools.DOCType = 'Community College District'",
        "SELECT COUNT(*) FROM schools WHERE ClosedDate BETWEEN '1989-01-01' AND '1989-12-31' AND City = 'San Francisco' AND StatusType = 'Closed'",
        "SELECT COUNT(*) FROM schools WHERE STRFTIME('%Y', ClosedDate) = '1989' AND City = 'San Francisco'"
    ],
    "1396": [
        "SELECT COUNT(T2.link_to_event) AS number_of_events, T3.major_name FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id JOIN major T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Luisa' AND T1.last_name = 'Guidi'",
        "SELECT COUNT(T1.link_to_event) AS number_of_events, T4.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi' GROUP BY T4.major_name",
        "SELECT COUNT(T1.link_to_event), T2.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
        "SELECT COUNT(T1.link_to_event), T2.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
        "SELECT COUNT(T1.link_to_event) AS number_of_events, T2.major_name FROM attendance AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi' GROUP BY T2.major_name",
        "SELECT COUNT(T1.link_to_event) AS event_count, T2.major_name  FROM attendance AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id  WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'"
    ],
    "1090": [
        "SELECT T1.long_passing FROM Player AS T1 WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)",
        "SELECT long_passing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday LIMIT 1)",
        "SELECT long_passing FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY birthday LIMIT 1",
        "SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MIN(birthday) FROM Player)",
        "SELECT PA.long_passing FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id ORDER BY P.birthday ASC LIMIT 1",
        "SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)"
    ],
    "1387": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member T1 JOIN attendance T2 ON T1.member_id = T2.link_to_member JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member T1 INNER JOIN budget T2 ON T1.member_id = T2.link_to_event INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member INNER JOIN budget ON member.member_id = budget.link_to_event INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
        "SELECT m.first_name || ' ' || m.last_name AS full_name FROM budget b JOIN event e ON b.link_to_event = e.event_id JOIN expense ex ON b.budget_id = ex.link_to_budget JOIN member m ON ex.link_to_member = m.member_id WHERE e.event_name = 'Yearly Kickoff'",
        "SELECT T3.first_name || ' ' || T3.last_name AS full_name  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id  WHERE T2.event_name = 'Yearly Kickoff'"
    ],
    "315": [
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'cl'",
        "SELECT DISTINCT m.molecule_id FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+'",
        "SELECT DISTINCT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "SELECT T2.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"
    ],
    "1043": [
        "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "SELECT T1.team_short_name FROM Team AS T1 WHERE T1.team_long_name = 'Queens Park Rangers'",
        "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'"
    ],
    "1417": [
        "SELECT DISTINCT T1.type FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
        "SELECT DISTINCT event.type FROM budget AS B JOIN event AS E ON B.link_to_event = E.event_id WHERE B.remaining > 30",
        "SELECT DISTINCT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
        "SELECT event.type FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
        "SELECT DISTINCT T2.type FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.remaining > 30",
        "SELECT DISTINCT T1.type FROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T2.remaining > 30"
    ],
    "770": [
        "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'"
    ],
    "1220": [
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UN = 29",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UN = 29",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UN = 29",
        "###SQL: SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 21",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
        "SELECT P.ID, P.SEX, P.Birthday  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.UN = 29"
    ],
    "476": [
        "SELECT cards.name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') ORDER BY cards.convertedManaCost DESC LIMIT 1",
        "SELECT cards.name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') ORDER BY cards.convertedManaCost DESC LIMIT 1",
        "SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT cards.name FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1",
        "SELECT T1.name FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap'))"
    ],
    "1182": [
        "SELECT COUNT(Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND strftime('%Y', Laboratory.Date) = '1995'",
        "SELECT COUNT(Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND strftime('%Y', Laboratory.Date) = '1995'",
        "SELECT COUNT(L.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS' AND strftime('%Y', L.Date) = '1995'",
        "SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.`First Date` = '1991-06-13' AND T2.Diagnosis = 'SJS' AND strftime('%Y', T1.Date) = '1995'",
        "SELECT COUNT(T2.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` = '1991-06-13' AND T1.Diagnosis = 'SJS' AND strftime('%Y', T2.Date) = '1995'",
        "SELECT COUNT(L.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS' AND STRFTIME('%Y', L.Date) = '1995'"
    ],
    "1243": [
        "SELECT (COUNT(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.PT >= 14 THEN 1 END)) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) > 55",
        "SELECT (COUNT(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 END) * 100.0 / COUNT(CASE WHEN L.PT >= 14 THEN 1 END)) AS percentage_female FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 55",
        "SELECT (SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_of_female FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday)) > 55 AND L.PT >= 14",
        "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND T2.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE SUBTRACT(year(current_timestamp), year(T1.Birthday)) > 55",
        "SELECT (SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female_abnormal_PT FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 55 AND T2.PT >= 14",
        "SELECT (SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female_abnormal_PT  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 55 AND L.PT >= 14"
    ],
    "804": [
        "SELECT superhero_name FROM superhero WHERE id = 294",
        "SELECT superhero_name FROM superhero WHERE id = 294",
        "SELECT superhero_name FROM superhero WHERE id = 294",
        "SELECT superhero_name FROM superhero WHERE id = 294",
        "SELECT superhero_name FROM superhero WHERE id = 294",
        "SELECT superhero_name FROM superhero WHERE id = 294"
    ],
    "1065": [
        "SELECT Team.team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast'",
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast'",
        "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast'",
        "SELECT T1.team_long_name FROM Team_Attributes AS T1 WHERE T1.buildUpPlaySpeedClass = 'Fast'",
        "SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'",
        "SELECT T2.team_long_name  FROM Team_Attributes AS T1  INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.buildUpPlaySpeedClass = 'Fast'"
    ],
    "294": [
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '='",
        "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT T1.bond_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
        "SELECT T1.bond_id  FROM bond AS T1  INNER JOIN molecule AS T2  ON T1.molecule_id = T2.molecule_id  WHERE T2.label = '+' AND T1.bond_type = '='"
    ],
    "225": [
        "SELECT DISTINCT T1.molecule_id FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '=' ORDER BY T1.molecule_id LIMIT 5",
        "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' ORDER BY molecule_id LIMIT 5",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 WHERE T1.bond_type = '=' ORDER BY T1.molecule_id LIMIT 5",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T1.molecule_id LIMIT 5",
        "SELECT DISTINCT T2.molecule_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.molecule_id LIMIT 5",
        "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.molecule_id ASC LIMIT 5"
    ],
    "1031": [
        "SELECT (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE sprint_speed >= 97 AND strftime('%Y', date) >= '2013' AND strftime('%Y', date) <= '2015'",
        "SELECT (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE sprint_speed >= 97 AND strftime('%Y', date) >= '2013' AND strftime('%Y', date) <= '2015'",
        "SELECT (strftime('%Y', 'now') - strftime('%Y', P.birthday)) AS age FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.sprint_speed >= 97 AND strftime('%Y', PA.date) >= '2013' AND strftime('%Y', PA.date) <= '2015'",
        "SELECT strftime('%Y', DATETIME()) - strftime('%Y', P.birthday) FROM Player AS P INNER JOIN Player_Attributes AS A ON P.player_api_id = A.player_api_id WHERE A.sprint_speed >= 97 AND strftime('%Y', A.date) >= '2013' AND strftime('%Y', A.date) <= '2015'",
        "SELECT (strftime('%Y', 'now') - strftime('%Y', P.birthday)) AS age FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.sprint_speed >= 97 AND PA.date BETWEEN '2013-01-01' AND '2015-12-31'",
        "SELECT (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.birthday)) AS age  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE PA.sprint_speed >= 97 AND STRFTIME('%Y', PA.date) BETWEEN '2013' AND '2015'"
    ],
    "1011": [
        "SELECT D.forename, D.surname FROM lapTimes L JOIN drivers D ON L.driverId = D.driverId WHERE L.time IS NOT NULL ORDER BY (CASE WHEN LENGTH(L.time) - LENGTH(REPLACE(L.time, ':', '')) = 1 THEN CAST(SUBSTR(L.time, 1, INSTR(L.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(L.time, INSTR(L.time, ':') + 1) AS REAL) ELSE CAST(L.time AS REAL) END) ASC LIMIT 20",
        "SELECT D.forename || ' ' || D.surname AS full_name FROM lapTimes LT JOIN drivers D ON LT.driverId = D.driverId WHERE LT.time IS NOT NULL ORDER BY LT.time ASC LIMIT 20",
        "SELECT D.forename, D.surname FROM lapTimes L JOIN drivers D ON L.driverId = D.driverId WHERE L.time IS NOT NULL ORDER BY L.milliseconds ASC LIMIT 20",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time ASC LIMIT 20",
        "SELECT d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId ORDER BY lt.time ASC LIMIT 20",
        "SELECT DISTINCT T2.forename, T2.surname  FROM lapTimes AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN results AS T3 ON T1.raceId = T3.raceId  WHERE T1.time = (SELECT MIN(time) FROM lapTimes)  ORDER BY T3.position  LIMIT 20"
    ],
    "199": [
        "SELECT COUNT(DISTINCT m.molecule_id) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.label = '-'",
        "SELECT COUNT(DISTINCT m.molecule_id) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'na' AND m.label = '-'",
        "SELECT COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'na' AND molecule.label = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "SELECT COUNT(*) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'"
    ],
    "1310": [
        "SELECT AVG(L.PT) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14",
        "SELECT AVG(L.PT) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14",
        "SELECT AVG(L.PT) AS average_prothrombin_time FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14",
        "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.PT < 14",
        "SELECT AVG(T2.PT) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.PT < 14",
        "SELECT AVG(Lab.PT) FROM Laboratory AS Lab INNER JOIN Patient AS Pat ON Lab.ID = Pat.ID WHERE Pat.SEX = 'M' AND Lab.PT < 14"
    ],
    "654": [
        "SELECT U.DisplayName, U.Location FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId INNER JOIN tags AS T ON T.ExcerptPostId = P.Id WHERE T.TagName = 'hypothesis-testing'",
        "SELECT U.DisplayName, U.Location FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id INNER JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'hypothesis-testing'",
        "SELECT U.DisplayName, U.Location FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id INNER JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'hypothesis-testing'",
        "SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN postTags AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T3.TagId = T4.Id WHERE T4.TagName = 'hypothesis-testing'",
        "SELECT U.DisplayName, U.Location FROM tags T JOIN posts P ON T.ExcerptPostId = P.Id JOIN users U ON P.OwnerUserId = U.Id WHERE T.TagName = 'hypothesis-testing'",
        "SELECT U.DisplayName, U.Location  FROM users AS U  INNER JOIN posts AS P ON U.Id = P.OwnerUserId  INNER JOIN tags AS T ON P.Id = T.ExcerptPostId  WHERE T.TagName = 'hypothesis-testing'"
    ],
    "679": [
        "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1",
        "SELECT T1.Id, T1.Title FROM posts AS T1 ORDER BY T1.Score DESC LIMIT 1",
        "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1",
        "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1",
        "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1",
        "SELECT id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)"
    ],
    "554": [
        "SELECT u.DisplayName FROM badges b INNER JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)",
        "SELECT u.DisplayName FROM badges b INNER JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1",
        "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1",
        "SELECT U.DisplayName FROM badges AS B JOIN users AS U ON B.UserId = U.Id GROUP BY B.UserId ORDER BY COUNT(B.Id) DESC LIMIT 1",
        "SELECT U.DisplayName  FROM users AS U  WHERE U.Id = (SELECT B.UserId                FROM badges AS B                GROUP BY B.UserId                ORDER BY COUNT(B.Id) DESC                LIMIT 1)"
    ],
    "273": [
        "SELECT CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100 / (SELECT COUNT(DISTINCT T2.molecule_id) FROM molecule AS T2 WHERE T2.label = '+') AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
        "SELECT (COUNT(a.element = 'cl') * 100.0 / COUNT(m.molecule_id)) AS percentage FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+'",
        "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN 1 END) AS REAL) * 100 / COUNT(T.atom_id) AS percentage FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+') AS T",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT (SUM(T1.element = 'cl') * 100.0 / COUNT(T1.molecule_id)) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT (SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT T2.molecule_id) AS percentage  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.label = '+'"
    ],
    "1380": [
        "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "SELECT SUM(budget.spent) FROM budget WHERE budget.category = 'Food'",
        "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "SELECT SUM(spent) FROM budget WHERE category = 'Food'"
    ],
    "84": [
        "SELECT AdmFName1, District, COUNT(*) AS NameCount FROM schools GROUP BY AdmFName1 ORDER BY NameCount DESC LIMIT 2",
        "SELECT AdmFName1, COUNT(*) AS name_count, District FROM schools GROUP BY AdmFName1 ORDER BY name_count DESC LIMIT 2",
        "SELECT AdmFName1, District, COUNT(*) as NameCount FROM schools GROUP BY AdmFName1 ORDER BY NameCount DESC LIMIT 2",
        "SELECT schools.AdmFName1, schools.District FROM schools GROUP BY schools.AdmFName1 ORDER BY COUNT(schools.AdmFName1) DESC LIMIT 2",
        "SELECT AdmFName1 AS FirstName, District FROM schools GROUP BY AdmFName1 ORDER BY COUNT(*) DESC LIMIT 2 UNION ALL SELECT AdmFName2 AS FirstName, District FROM schools GROUP BY AdmFName2 ORDER BY COUNT(*) DESC LIMIT 2",
        "SELECT T1.AdmFName1 AS FirstName, T1.District, COUNT(T1.AdmFName1) AS NameCount FROM schools AS T1 WHERE T1.AdmFName1 IS NOT NULL GROUP BY T1.AdmFName1, T1.District UNION ALL SELECT T1.AdmFName2 AS FirstName, T1.District, COUNT(T1.AdmFName2) AS NameCount FROM schools AS T1 WHERE T1.AdmFName2 IS NOT NULL GROUP BY T1.AdmFName2, T1.District UNION ALL SELECT T1.AdmFName3 AS FirstName, T1.District, COUNT(T1.AdmFName3) AS NameCount FROM schools AS T1 WHERE T1.AdmFName3 IS NOT NULL GROUP BY T1.AdmFName3, T1.District ORDER BY NameCount DESC LIMIT 2"
    ],
    "1479": [
        "SELECT SUBSTR(T2.Date, 1, 4) AS year, SUM(T1.Consumption) AS total_consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY year ORDER BY total_consumption DESC LIMIT 1",
        "SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS Total_Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'CZK' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1",
        "SELECT SUBSTR(Date, 1, 4) AS year, SUM(Consumption) AS total_consumption FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY year ORDER BY total_consumption DESC LIMIT 1",
        "SELECT substr(yearmonth.Date, 1, 4), SUM(yearmonth.Consumption) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY substr(yearmonth.Date, 1, 4) ORDER BY SUM(yearmonth.Consumption) DESC LIMIT 1",
        "SELECT SUBSTR(T1.Date, 1, 4) AS Year FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY Year ORDER BY SUM(T1.Consumption) DESC LIMIT 1",
        "SELECT SUBSTR(yearmonth.Date, 1, 4) AS Year, SUM(yearmonth.Consumption) AS TotalConsumption  FROM yearmonth  INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE customers.Currency = 'CZK'  GROUP BY Year  ORDER BY TotalConsumption DESC  LIMIT 1"
    ],
    "771": [
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  INNER JOIN superpower AS T3 ON T2.power_id = T3.id  WHERE T3.power_name = 'Flight'"
    ],
    "1259": [
        "SELECT E.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1985-01-01' AND L.RA IN ('-', '+-')",
        "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday >= '1985-01-01' AND Laboratory.RA IN ('-', '+-')",
        "SELECT P.Diagnosis FROM Patient AS P WHERE P.Birthday > '1985-01-01' AND P.ID IN (SELECT L.ID FROM Laboratory AS L WHERE L.RA IN ('-', '+-'))",
        "SELECT T1.Diagnosis FROM Patient AS T1 WHERE strftime('%Y', T1.Birthday) >= '1985' AND T1.RA IN ('-', '+-')",
        "SELECT E.Diagnosis FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday > '1985-01-01' AND E.RA IN ('-', '+-')",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday >= '1985-01-01' AND L.RA IN ('-', '+-')"
    ],
    "798": [
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "SELECT DISTINCT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
    ],
    "108": [
        "SELECT T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = (SELECT T3.account_id FROM loan AS T3 ORDER BY T3.amount DESC LIMIT 1) AND T1.date = (SELECT MIN(T4.date) FROM trans AS T4 INNER JOIN account AS T5 ON T4.account_id = T5.account_id WHERE T5.account_id = T2.account_id) LIMIT 1",
        "SELECT T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = (SELECT MAX(amount) FROM loan) AND T1.date = (SELECT MIN(date) FROM trans AS T4 WHERE T4.account_id = T2.account_id) LIMIT 1",
        "SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = (SELECT MAX(amount) FROM loan) AND T1.date = (SELECT MIN(date) FROM trans WHERE trans.account_id = T2.account_id)",
        "SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = (SELECT MAX(amount) FROM loan) AND T1.date = (SELECT MIN(date) FROM trans AS T3 WHERE T3.account_id = T2.account_id)",
        "SELECT T3.amount FROM trans AS T3 JOIN account AS T1 ON T3.account_id = T1.account_id JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = (SELECT MAX(amount) FROM loan) AND T3.date = (SELECT MIN(date) FROM trans WHERE account_id = T1.account_id AND date > T1.date)",
        "SELECT T2.amount FROM trans AS T2 WHERE T2.account_id = (SELECT T1.account_id FROM loan AS T1 ORDER BY T1.amount DESC LIMIT 1) ORDER BY T2.date ASC LIMIT 1"
    ],
    "769": [
        "SELECT S.superhero_name, HA.attribute_value FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id JOIN publisher AS P ON S.publisher_id = P.id WHERE A.attribute_name = 'Durability' AND P.publisher_name = 'Dark Horse Comics' ORDER BY HA.attribute_value DESC LIMIT 1",
        "SELECT S.superhero_name, HA.attribute_value FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id JOIN publisher AS P ON S.publisher_id = P.id WHERE A.attribute_name = 'Durability' AND P.publisher_name = 'Dark Horse Comics' ORDER BY HA.attribute_value DESC LIMIT 1",
        "SELECT superhero.superhero_name, MAX(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id INNER JOIN attribute AS T4 ON T2.attribute_id = T4.id WHERE T4.attribute_name = 'Durability' AND T3.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1",
        "SELECT T1.id FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Durability' AND T2.publisher_name = 'Dark Horse Comics' ORDER BY T3.attribute_value DESC LIMIT 1",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id  INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id  WHERE T2.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'durability')  AND T3.publisher_name = 'Dark Horse Comics'  AND T2.attribute_value = (SELECT MAX(attribute_value)                            FROM hero_attribute                            WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'durability')                            AND hero_id IN (SELECT id FROM superhero WHERE publisher_id = T3.id))"
    ],
    "557": [
        "SELECT (COUNT(CASE WHEN u.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Score > 5",
        "SELECT (COUNT(CASE WHEN u.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Score > 5",
        "SELECT (COUNT(CASE WHEN T2.Age > 65 THEN 1 END) * 100.0 / COUNT(T1.Id)) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "SELECT (COUNT(CASE WHEN U.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5",
        "SELECT (COUNT(CASE WHEN users.Age > 65 THEN posts.Id END) * 100.0) / COUNT(posts.Id) AS ElderUserPercentage  FROM posts  INNER JOIN users ON posts.OwnerUserId = users.Id  WHERE posts.Score > 5"
    ],
    "582": [
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Vebjorn Ljosa'",
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Vebjorn Ljosa'",
        "SELECT posts.Title FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN users ON postHistory.UserId = users.Id WHERE postHistory.UserDisplayName = 'Vebjorn Ljosa'",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "SELECT T1.Title FROM posts AS T1 WHERE T1.LastEditorDisplayName = 'Vebjorn Ljosa'",
        "SELECT T1.Title  FROM posts AS T1  INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id  WHERE T2.DisplayName = 'Vebjorn Ljosa'"
    ],
    "658": [
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5"
    ],
    "234": [
        "SELECT COUNT(*) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12'",
        "SELECT COUNT(*) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12'",
        "SELECT COUNT(*) FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.molecule_id = 'TR009' AND (C.atom_id = 'TR009_12' OR C.atom_id2 = 'TR009_12')",
        "SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE (T2.atom_id = 'TR009_12' OR T2.atom_id2 = 'TR009_12') AND T1.molecule_id = 'TR009'",
        "SELECT COUNT(*) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND (T2.atom_id = 'TR009_12' OR T2.atom_id2 = 'TR009_12')",
        "SELECT COUNT(*) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR009' AND (T1.atom_id = 'TR009_12' OR T1.atom_id2 = 'TR009_12')"
    ],
    "589": [
        "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)"
    ],
    "1112": [
        "SELECT T2.chanceCreationCrossingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hull City' AND T2.date = '2010-02-22 00:00:00'",
        "SELECT TA.chanceCreationCrossingClass FROM Team T INNER JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Hull City' AND TA.date = '2010-02-22 00:00:00'",
        "SELECT TA.chanceCreationCrossingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Hull City' AND TA.date = '2010-02-22 00:00:00'",
        "SELECT T1.chanceCreationCrossingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'",
        "SELECT TA.chanceCreationCrossingClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Hull City' AND TA.date = '2010-02-22 00:00:00'",
        "SELECT T2.chanceCreationCrossingClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_long_name = 'Hull City' AND T2.date = '2010-02-22 00:00:00'"
    ],
    "765": [
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
        "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
        "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'stealth'",
        "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth'"
    ],
    "623": [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 65)",
        "SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age > 65",
        "SELECT COUNT(DISTINCT badges.UserId) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65",
        "SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age > 65 AND T1.Name = 'Supporter'",
        "SELECT COUNT(DISTINCT U.Id) FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.Age > 65 AND B.Name = 'Supporter'",
        "SELECT COUNT(DISTINCT U.Id)  FROM badges AS B  INNER JOIN users AS U ON B.UserId = U.Id  WHERE B.Name = 'Supporter' AND U.Age > 65"
    ],
    "846": [
        "SELECT D.driverRef FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 20 AND Q.q1 IS NOT NULL ORDER BY Q.q1 LIMIT 5",
        "SELECT drivers.driverRef FROM qualifying INNER JOIN results ON qualifying.driverId = results.driverId WHERE qualifying.raceId = 20 AND qualifying.q1 IS NOT NULL ORDER BY qualifying.q1 LIMIT 5",
        "SELECT d.driverRef FROM qualifying AS q INNER JOIN drivers AS d ON q.driverId = d.driverId WHERE q.raceId = 20 AND q.q1 IS NOT NULL ORDER BY q.q1 ASC LIMIT 5",
        "SELECT D.driverRef FROM qualifying AS T1 JOIN drivers AS D ON T1.driverId = D.driverId WHERE T1.q1 = (SELECT MAX(T2.q1) FROM qualifying AS T2 WHERE T2.raceId = 20) AND T1.raceId = 20",
        "SELECT T1.driverId FROM qualifying AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 20 AND T1.position > (SELECT MAX(position) FROM qualifying WHERE raceId = 20 AND q1 IS NOT NULL)",
        "SELECT T2.driverRef  FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 20 AND T1.q1 = (SELECT MAX(q1) FROM qualifying WHERE raceId = 20)  ORDER BY T1.q1 DESC  LIMIT 5"
    ],
    "332": [
        "SELECT COUNT(DISTINCT bond.molecule_id) FROM bond WHERE bond.bond_type = '-' AND bond.molecule_id BETWEEN 'TR004' AND 'TR010'",
        "SELECT COUNT(DISTINCT bond.molecule_id) FROM bond WHERE bond.bond_type = '-' AND bond.molecule_id BETWEEN 'TR004' AND 'TR010'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 WHERE T1.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'",
        "###SQL: SELECT COUNT(T1.bond_type) FROM bond AS T1 WHERE T1.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'",
        "SELECT COUNT(*) FROM bond T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR004' AND 'TR010' AND T1.bond_type = '-'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-' AND molecule_id BETWEEN 'TR004' AND 'TR010'"
    ],
    "1161": [
        "SELECT AVG(L.`aCL IgG`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50",
        "SELECT AVG(L.`aCL IgG`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50",
        "SELECT AVG(E.`aCL IgG`) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Admission = '+' AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) >= 50",
        "SELECT AVG(T1.\"aCL IgG\") FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) >= 50",
        "SELECT AVG(T1.`aCL IgG`) FROM Patient T1 WHERE T1.Admission = '+' AND (SUBSTR(strftime('%Y', 'now'), 1, 4) - SUBSTR(T1.Birthday, 1, 4)) >= 50",
        "SELECT AVG(E.`aCL IgG`) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50"
    ],
    "855": [
        "SELECT DISTINCT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'",
        "SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'",
        "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "###SQL: SELECT T2.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'",
        "SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit'",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'"
    ],
    "1136": [
        "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes)",
        "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'",
        "SELECT COUNT(DISTINCT pa.player_api_id) FROM Player_Attributes pa WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND pa.preferred_foot = 'left'",
        "SELECT COUNT(id) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'",
        "SELECT COUNT(*) FROM Player_Attributes AS PA WHERE PA.crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND PA.preferred_foot = 'left'",
        "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND preferred_foot = 'left'"
    ],
    "34": [
        "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL) AS Free_Rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson' AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL AND frpm.`Free Meal Count (Ages 5-17)` IS NOT NULL",
        "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL) AS free_rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson' AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL AND frpm.`Free Meal Count (Ages 5-17)` IS NOT NULL",
        "SELECT (T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) AS `free rate` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson'",
        "SELECT CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(frpm.`Enrollment (Ages 5-17)` AS REAL) AS FreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'",
        "SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS free_rate FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson' AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL AND frpm.`Free Meal Count (Ages 5-17)` IS NOT NULL",
        "SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS free_rate FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'"
    ],
    "660": [
        "SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)",
        "SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)"
    ],
    "175": [
        "SELECT COUNT(DISTINCT disp.account_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(DISTINCT account.account_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(DISTINCT a.account_id) FROM account AS a INNER JOIN disp AS d ON a.account_id = d.account_id WHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU' AND T1.account_id IN (SELECT DISTINCT T3.account_id FROM trans T3 WHERE T3.k_symbol = 'SLUZBY')",
        "SELECT COUNT(DISTINCT T1.account_id)  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'"
    ],
    "106": [
        "SELECT MAX(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN card ON account.account_id = disp.account_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.issued = '1996-10-21'",
        "SELECT MAX(trans.amount) FROM trans INNER JOIN disp ON trans.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1996-10-21'",
        "SELECT MAX(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1996-10-21'",
        "SELECT MAX(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1996-10-21'",
        "SELECT MAX(T3.amount) FROM card T1 JOIN disp T2 ON T1.disp_id = T2.disp_id JOIN trans T3 ON T2.account_id = T3.account_id WHERE T1.issued = '1996-10-21'",
        "SELECT MAX(T4.amount) FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  INNER JOIN client AS T3 ON T2.client_id = T3.client_id  INNER JOIN trans AS T4 ON T3.account_id = T4.account_id  WHERE T1.issued = '1996-10-21'"
    ],
    "1163": [
        "SELECT (strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS age FROM Patient ORDER BY age ASC LIMIT 1",
        "SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS age FROM Patient",
        "SELECT (strftime('%Y', `First Date`) - strftime('%Y', Birthday)) AS age FROM Patient ORDER BY age ASC LIMIT 1",
        "SELECT CAST(STRFTIME('%Y', T1.First_Date) AS FLOAT) - CAST(STRFTIME('%Y', T2.Birthday) AS FLOAT) FROM Patient AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.First_Date IS NOT NULL AND T2.Birthday IS NOT NULL ORDER BY CAST(STRFTIME('%Y', T1.First_Date) AS FLOAT) - CAST(STRFTIME('%Y', T2.Birthday) AS FLOAT) ASC LIMIT 1",
        "SELECT Patient.ID FROM Patient WHERE Patient.Birthday IS NOT NULL AND Patient.`First Date` IS NOT NULL ORDER BY (strftime('%Y', Patient.`First Date`) - strftime('%Y', Patient.Birthday)) ASC LIMIT 1",
        "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) AS youngest_age FROM Patient"
    ],
    "186": [
        "SELECT (CAST(SUM(CASE WHEN C.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS percentage_male_clients FROM disp AS D INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE A.frequency = 'POPLATEK TYDNE'",
        "SELECT (CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'",
        "SELECT (COUNT(CASE WHEN C.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id WHERE A.frequency = 'POPLATEK TYDNE'",
        "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.gender) AS REAL) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "SELECT (COUNT(CASE WHEN C.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_male_weekly_statements FROM client C JOIN disp D ON C.client_id = D.client_id JOIN account A ON D.account_id = A.account_id WHERE A.frequency = 'POPLATEK TYDNE'",
        "SELECT (COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  WHERE T3.frequency = 'POPLATEK TYDNE'"
    ],
    "1257": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 70",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) < 70",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70",
        "SELECT COUNT(T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70",
        "SELECT COUNT(*) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRE >= 1.5 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.Birthday)) < 70"
    ],
    "1399": [
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
        "SELECT COUNT(*) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id JOIN member T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean' AND T2.event_name = 'Women''s Soccer'",
        "SELECT T1.link_to_event FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women's Soccer'",
        "SELECT T1.link_to_event FROM attendance AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women's Soccer'",
        "SELECT EXISTS (SELECT 1 FROM attendance AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id  WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer')"
    ],
    "624": [
        "SELECT DisplayName FROM users WHERE Id = 30",
        "SELECT DisplayName FROM users WHERE Id = 30",
        "SELECT DisplayName FROM users WHERE Id = 30",
        "SELECT DisplayName FROM users WHERE Id = 30",
        "SELECT DisplayName FROM users WHERE Id = 30",
        "SELECT DisplayName FROM users WHERE Id = 30"
    ],
    "1513": [
        "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.TransactionID LIMIT 1",
        "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date = '2012-08-25' LIMIT 1",
        "SELECT gasstations.Country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-25' ORDER BY transactions_1k.TransactionID LIMIT 1",
        "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date = '2012-08-25' ORDER BY T2.TransactionID ASC LIMIT 1",
        "SELECT g.Country FROM transactions_1k AS t JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.TransactionID LIMIT 1",
        "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.Date = '2012-08-25'  ORDER BY T1.CustomerID  LIMIT 1"
    ],
    "932": [
        "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT DISTINCT R.year FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' ORDER BY R.year",
        "SELECT DISTINCT T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.driverRef = 'hamilton'",
        "SELECT DISTINCT R.year FROM driverStandings DS JOIN drivers D ON DS.driverId = D.driverId JOIN races R ON DS.raceId = R.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT DISTINCT T5.year  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'"
    ],
    "1363": [
        "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences'"
    ],
    "1458": [
        "SELECT (SUM(CASE WHEN z.short_state = 'NJ' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.member_id)) - (SUM(CASE WHEN z.short_state = 'VT' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.member_id)) AS percentage_difference FROM member AS m JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.position = 'Member'",
        "SELECT (SUM(CASE WHEN z.short_state = 'NJ' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.member_id)) - (SUM(CASE WHEN z.short_state = 'VT' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.member_id)) AS difference_percentage FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'Member'",
        "SELECT (CAST(SUM(CASE WHEN z.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(m.member_id)) - (CAST(SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(m.member_id)) AS percentage_difference FROM member AS m JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.position = 'Member'",
        "SELECT (CAST(SUM(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) / COUNT(member.position)) - (CAST(SUM(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / COUNT(member.position)) AS difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code",
        "SELECT (SUM(CASE WHEN ZC.state = 'New Jersey' THEN 1 ELSE 0 END) * 1.0 / COUNT(CASE WHEN M.position = 'Member' THEN 1 END)) - (SUM(CASE WHEN ZC.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(CASE WHEN M.position = 'Member' THEN 1 END)) AS percentage_difference FROM member M JOIN zip_code ZC ON M.zip = ZC.zip_code",
        "SELECT      (SUM(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) * 1.0 / COUNT(CASE WHEN position = 'Member' THEN 1 END)) -      (SUM(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(CASE WHEN position = 'Member' THEN 1 END)) AS percentage_difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code"
    ],
    "157": [
        "SELECT T1.A15 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "SELECT d.A15 FROM district d INNER JOIN account a ON d.district_id = a.district_id WHERE a.account_id = 532",
        "SELECT COUNT(T2.A15) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 532",
        "SELECT D.A15 FROM account AS A JOIN district AS D ON A.district_id = D.district_id WHERE A.account_id = 532",
        "SELECT T2.A15 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 532"
    ],
    "1211": [
        "SELECT T1.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH BETWEEN 600 AND 800",
        "SELECT Patient.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday)) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.LDH BETWEEN 600 AND 800",
        "SELECT ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', Birthday)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE LDH BETWEEN 600 AND 800",
        "SELECT T1.ID, (strftime('%Y', date('now')) - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500",
        "SELECT T1.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) AS age FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH BETWEEN 600 AND 800",
        "SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.LDH BETWEEN 600 AND 800"
    ],
    "753": [
        "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No Colour'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No Colour'",
        "SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.height_cm BETWEEN 170 AND 190 AND T1.eye_colour_id IS NULL",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id  WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'"
    ],
    "1035": [
        "SELECT Team_Attributes.team_fifa_api_id FROM Team_Attributes WHERE Team_Attributes.buildUpPlaySpeed > 50 AND Team_Attributes.buildUpPlaySpeed < 60",
        "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "SELECT Team.team_fifa_api_id FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.buildUpPlaySpeed > 50 AND Team_Attributes.buildUpPlaySpeed < 60",
        "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"
    ],
    "1271": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND strftime('%Y', P.`First Date`) < '2000'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND strftime('%Y', P.`First Date`) < '2000'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND strftime('%Y', T1.`First Date`) < '2000'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND strftime('%Y', P.`First Date`) < '2000'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+=') AND strftime('%Y', P.`First Date`) < '2000'",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.SSA IN ('-', '+-') AND STRFTIME('%Y', T1.`First Date`) < '2000'"
    ],
    "370": [
        "SELECT COUNT(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'"
    ],
    "404": [
        "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.baseSetSize = 309",
        "SELECT ST.name, ST.language FROM sets AS ST INNER JOIN set_translations AS STN ON ST.code = STN.setCode WHERE ST.baseSetSize = 309",
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 309",
        "SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309",
        "SELECT ST.language FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.baseSetSize = 309",
        "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309"
    ],
    "128": [
        "SELECT D.A2, COUNT(DISTINCT C.client_id) AS female_account_holders FROM district AS D JOIN client AS C ON D.district_id = C.district_id WHERE C.gender = 'F' GROUP BY D.A2 ORDER BY female_account_holders DESC LIMIT 9",
        "SELECT D.A2, COUNT(C.client_id) AS female_account_holders FROM client C JOIN district D ON C.district_id = D.district_id WHERE C.gender = 'F' GROUP BY D.A2 ORDER BY female_account_holders DESC LIMIT 9",
        "SELECT district.A2, COUNT(disp.client_id) AS female_account_holders FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id WHERE client.gender = 'F' GROUP BY district.A2 ORDER BY female_account_holders DESC LIMIT 9",
        "SELECT COUNT(T1.client_id) AS female_count, T2.district_id, T2.A2 FROM client AS T1 INNER JOIN account AS T3 ON T1.district_id = T3.district_id INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY female_count DESC LIMIT 9",
        "SELECT T2.A2, COUNT(T1.client_id) AS female_count FROM client T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY female_count DESC LIMIT 9",
        "SELECT T3.A2, COUNT(*) AS female_count  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T4 ON T2.account_id = T4.account_id  INNER JOIN district AS T3 ON T4.district_id = T3.district_id  WHERE T1.gender = 'F'  GROUP BY T3.district_id, T3.A2  ORDER BY female_count DESC  LIMIT 9"
    ],
    "59": [
        "SELECT schools.Website FROM schools WHERE (schools.AdmFName1 = 'Mike' AND schools.AdmLName1 = 'Larson') OR (schools.AdmFName1 = 'Dante' AND schools.AdmLName1 = 'Alvarez')",
        "SELECT schools.Website FROM schools WHERE (schools.AdmFName1 = 'Mike' AND schools.AdmLName1 = 'Larson') OR (schools.AdmFName1 = 'Dante' AND schools.AdmLName1 = 'Alvarez')",
        "SELECT schools.Website FROM schools WHERE (schools.AdmFName1 = 'Mike' AND schools.AdmLName1 = 'Larson') OR (schools.AdmFName1 = 'Dante' AND schools.AdmLName1 = 'Alvarez')",
        "SELECT T1.website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE (T1.AdmFName1 = 'Mike' AND T1.AdmLName1 = 'Larson') OR (T1.AdmFName1 = 'Dante' AND T1.AdmLName1 = 'Alvarez')",
        "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez')",
        "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')"
    ],
    "1405": [
        "SELECT SUM(T1.amount) AS budgeted_amount, T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'April Speaker' GROUP BY T1.category ORDER BY budgeted_amount ASC",
        "SELECT SUM(b.amount) AS amount_budgeted, b.category FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY b.category ORDER BY amount_budgeted ASC",
        "SELECT SUM(budget.amount) AS 'the amount budgeted', budget.category AS 'the budgeted categories' FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY SUM(budget.amount) ASC",
        "SELECT budget.category, CAST(SUM(budget.amount) AS REAL) FROM budget WHERE budget.link_to_event IN (SELECT event_id FROM event WHERE event_name = 'April Speaker') GROUP BY budget.category ORDER BY SUM(budget.amount) ASC",
        "SELECT T2.category, SUM(T2.amount) AS total_budgeted FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY total_budgeted ASC",
        "SELECT budget.category, SUM(budget.amount) AS total_amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY total_amount ASC"
    ],
    "329": [
        "SELECT T3.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.atom_id) AS atom_count FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' GROUP BY T3.molecule_id ORDER BY atom_count DESC LIMIT 1) AS subquery",
        "SELECT a.molecule_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.molecule_id ORDER BY COUNT(a.atom_id) DESC LIMIT 1",
        "SELECT T1.molecule_id FROM (SELECT T2.molecule_id, COUNT(T1.atom_id) AS atom_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY atom_count DESC LIMIT 1) AS T",
        "SELECT T1.molecule_id, COUNT(T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1",
        "SELECT T1.molecule_id FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1",
        "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1"
    ],
    "811": [
        "SELECT T2.alignment, T3.power_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T1.superhero_name = 'Atom IV'",
        "SELECT T2.alignment, T3.power_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T1.superhero_name = 'Atom IV'",
        "SELECT T3.alignment, GROUP_CONCAT(T4.power_name) AS superpowers FROM superhero AS T1 INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T4 ON T2.power_id = T4.id WHERE T1.superhero_name = 'Atom IV' GROUP BY T3.alignment",
        "SELECT T1.alignment, T3.power_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T1.superhero_name = 'Atom IV'",
        "SELECT A.alignment, SP.power_name FROM superhero AS S JOIN alignment AS A ON S.alignment_id = A.id JOIN hero_power AS HP ON S.id = HP.hero_id JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.superhero_name = 'Atom IV'",
        "SELECT T2.alignment, T4.power_name  FROM superhero AS T1  INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id  INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id  INNER JOIN superpower AS T4 ON T3.power_id = T4.id  WHERE T1.superhero_name = 'Atom IV'"
    ],
    "33": [
        "SELECT schools.Website, frpm.`School Name` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT schools.Website, schools.School FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT schools.School, schools.Website FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT schools.School, schools.Website FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Free Meal Count (Ages 5-17) IS NOT NULL",
        "SELECT s.Website, s.School FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT T1.School, T2.Website FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000"
    ],
    "824": [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name",
        "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
        "SELECT T1.superhero_name FROM superhero T1 JOIN hero_power T2 ON T1.id = T2.hero_id JOIN superpower T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Wind Control') ORDER BY T1.superhero_name ASC"
    ],
    "1033": [
        "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
        "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
        "SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
        "SELECT CAST(SUM(height) AS REAL) / COUNT(id) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
        "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
        "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'"
    ],
    "145": [
        "SELECT T1.account_id FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < (SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998') AND T2.operation = 'VYBER KARTOU'",
        "SELECT DISTINCT trans.account_id FROM trans INNER JOIN card ON trans.account_id = card.disp_id WHERE trans.amount < (SELECT AVG(trans.amount) FROM trans WHERE strftime('%Y', trans.date) = '1998') AND trans.operation = 'VYBER KARTOU'",
        "SELECT DISTINCT disp.client_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '1998')",
        "SELECT account_id FROM trans WHERE amount < (SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998') AND operation = 'VYBER KARTOU'",
        "SELECT DISTINCT T2.client_id FROM trans T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998')",
        "SELECT DISTINCT T1.account_id  FROM trans AS T1  WHERE T1.operation = 'VYBER KARTOU'  AND T1.date LIKE '1998%'  AND T1.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND date LIKE '1998%')"
    ],
    "1521": [
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00'",
        "SELECT COUNT(*) FROM transactions_1k T1 INNER JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00'",
        "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'"
    ],
    "97": [
        "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'",
        "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'",
        "SELECT client.client_id FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE disp.type = 'DISPONENT' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT T1.client_id FROM disp AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.k_symbol = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'",
        "SELECT T1.client_id FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T2.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'",
        "SELECT DISTINCT T1.client_id  FROM disp AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.type = 'DISPONENT' AND T2.frequency = 'POPLATEK PO OBRATU'"
    ],
    "469": [
        "SELECT EXISTS(SELECT 1 FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Angel of Mercy' AND sets.mtgoCode IS NOT NULL)",
        "SELECT CASE WHEN sets.mtgoCode IS NOT NULL THEN 'Did' ELSE 'Did not' END AS appearance FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Angel of Mercy'",
        "SELECT CASE WHEN sets.mtgoCode IS NOT NULL THEN 'Yes' ELSE 'No' END AS Appeared_ON_MTGO FROM sets WHERE sets.code IN (SELECT cards.setCode FROM cards WHERE cards.name = 'Angel of Mercy')",
        "SELECT sets.mtgoCode FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgoCode IS NOT NULL",
        "SELECT sets.mtgoCode FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgoCode IS NOT NULL",
        "SELECT CASE WHEN mtgoCode IS NOT NULL THEN 'Yes' ELSE 'No' END AS appeared_online FROM cards WHERE name = 'Angel of Mercy'"
    ],
    "368": [
        "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards",
        "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards",
        "SELECT (COUNT(id) * 100.0 / (SELECT COUNT(id) FROM cards)) AS percentage FROM cards WHERE borderColor = 'borderless'",
        "SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(id)) AS percentage_borderless FROM cards",
        "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM cards"
    ],
    "601": [
        "SELECT p.Score, pl.LinkTypeId FROM posts AS p INNER JOIN postLinks AS pl ON p.Id = pl.PostId WHERE p.Id = 395",
        "SELECT posts.Score, postLinks.LinkTypeId FROM posts LEFT JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395",
        "SELECT posts.Score, postLinks.LinkTypeId FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395",
        "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 31586",
        "SELECT T1.Score, T2.LinkTypeId FROM posts T1 JOIN postLinks T2 ON T1.Id = T2.PostId WHERE T1.Id = 395",
        "SELECT posts.Score, postLinks.LinkTypeId FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395"
    ],
    "860": [
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 355 AND qualifying.q2 = '0:01:40'",
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.q2 = '0:01:40' AND qualifying.raceId = 355",
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.q2 = '0:01:40' AND qualifying.raceId = 355",
        "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 355 AND T2.q2 = '0:01:40'",
        "SELECT T2.nationality FROM qualifying T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '0:01:40' AND T1.raceId = 355",
        "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 355 AND T1.q2 = '0:01:40'"
    ],
    "807": [
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
        "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "SELECT SP.power_name  FROM superhero AS S  INNER JOIN hero_power AS HP ON S.id = HP.hero_id  INNER JOIN superpower AS SP ON HP.power_id = SP.id  WHERE S.full_name = 'Helen Parr'"
    ],
    "1118": [
        "SELECT player_name FROM Player WHERE datetime('now', 'localtime') - datetime(birthday) > 34 * 365 * 24 * 60 * 60",
        "SELECT player_name FROM Player WHERE datetime('now') - datetime(birthday) > 34 * 365 * 24 * 60 * 60",
        "SELECT player_name FROM Player WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) > 34",
        "SELECT player_name FROM Player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34",
        "SELECT player_name FROM Player WHERE datetime('now', 'localtime') - datetime(birthday) > 34*365*24*60*60",
        "SELECT player_name FROM Player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"
    ],
    "1389": [
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event ORDER BY B.spent ASC LIMIT 1",
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event ORDER BY B.spent ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.spent ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.cost ASC LIMIT 1",
        "SELECT e.event_id FROM event e JOIN expense ex ON ex.link_to_budget = (SELECT budget.budget_id FROM budget WHERE budget.link_to_event = e.event_id) ORDER BY ex.cost ASC LIMIT 1",
        "SELECT T2.event_name FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T1.cost = (SELECT MIN(cost) FROM expense)"
    ],
    "499": [
        "SELECT COUNT(ST.translation) FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Tenth Edition' AND ST.translation IS NOT NULL",
        "SELECT COUNT(ST.translation) FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Tenth Edition' AND ST.translation IS NOT NULL",
        "SELECT COUNT(translation) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition') AND translation IS NOT NULL",
        "SELECT COUNT(T2.translation) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Tenth Edition' AND T1.translation IS NOT NULL",
        "SELECT COUNT(T2.translation) FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Tenth Edition' AND T1.translation IS NOT NULL",
        "SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Tenth Edition' AND T1.translation IS NOT NULL"
    ],
    "780": [
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Hunter Zolomon'",
        "SELECT SP.power_name FROM superhero AS S JOIN hero_power AS HP ON S.id = HP.hero_id JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.full_name = 'Hunter Zolomon'",
        "SELECT DISTINCT T4.power_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  INNER JOIN superpower AS T4 ON T2.power_id = T4.id  WHERE T1.full_name = 'Hunter Zolomon'"
    ],
    "96": [
        "SELECT COUNT(DISTINCT disp.client_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
        "SELECT COUNT(DISTINCT disp.client_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
        "SELECT COUNT(DISTINCT disp.client_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
        "SELECT COUNT(T1.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
        "SELECT COUNT(DISTINCT C.client_id) FROM account AS A JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE A.frequency = 'POPLATEK TYDNE' AND D.type = 'OWNER'",
        "SELECT COUNT(DISTINCT T1.client_id)  FROM disp AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'"
    ],
    "1061": [
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170",
        "SELECT COUNT(*) FROM Player WHERE weight > 170",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170"
    ],
    "640": [
        "SELECT (SUM(CASE WHEN users.DisplayName = 'Mornington' THEN posts.ViewCount ELSE 0 END) - SUM(CASE WHEN users.DisplayName = 'Amos' THEN posts.ViewCount ELSE 0 END)) AS 'the difference in view count' FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id",
        "SELECT (SUM(CASE WHEN users.DisplayName = 'Mornington' THEN posts.ViewCount ELSE 0 END) - SUM(CASE WHEN users.DisplayName = 'Amos' THEN posts.ViewCount ELSE 0 END)) AS difference_in_view_count FROM posts JOIN users ON posts.OwnerUserId = users.Id",
        "SELECT (SUM(CASE WHEN users.DisplayName = 'Mornington' THEN posts.ViewCount ELSE 0 END) - SUM(CASE WHEN users.DisplayName = 'Amos' THEN posts.ViewCount ELSE 0 END)) AS 'the difference in view count' FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id",
        "SELECT (CAST(SUM(CASE WHEN T1.DisplayName = 'mornington' THEN T2.ViewCount ELSE 0 END) AS FLOAT) - CAST(SUM(CASE WHEN T1.DisplayName = 'Amos' THEN T2.ViewCount ELSE 0 END) AS FLOAT)) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId",
        "SELECT (SUM(CASE WHEN U.DisplayName = 'Mornington' THEN P.ViewCount ELSE 0 END) - SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END)) AS ViewCountDifference FROM posts P JOIN users U ON P.OwnerUserId = U.Id",
        "SELECT (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mornington')) -         (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Amos')) AS ViewCountDifference"
    ],
    "1524": [
        "SELECT gasstations.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations ON T1.GasStationID = gasstations.GasStationID WHERE T1.Price = 548.4 AND T1.Date = '2012-08-24'",
        "SELECT gs.Country FROM transactions_1k AS t INNER JOIN gasstations AS gs ON t.GasStationID = gs.GasStationID WHERE t.Date = '2012-08-24' AND t.Price = 548.4",
        "SELECT gasstations.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations ON T1.GasStationID = gasstations.GasStationID WHERE T1.Price = 548.4 AND T1.Date = '2012-08-24'",
        "###SQL: SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price = 548.4 AND T1.Date = '2012-08-24'",
        "SELECT C.Currency FROM transactions_1k T1 JOIN customers C ON T1.CustomerID = C.CustomerID WHERE T1.Amount = 548.4 AND T1.Date = '2012-08-24'",
        "SELECT T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4"
    ],
    "838": [
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'"
    ],
    "710": [
        "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0",
        "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1) AND Score = 0",
        "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0",
        "SELECT COUNT(T2.Score) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0",
        "SELECT COUNT(T2.Id) FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0",
        "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0"
    ],
    "627": [
        "SELECT COUNT(DISTINCT Id) FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT COUNT(DISTINCT Id) FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65",
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65"
    ],
    "272": [
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T3.element = 'c' LIMIT 2",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T3.element = 'c' LIMIT 2",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T2.bond_type = '#' AND T3.label = '-' LIMIT 2",
        "SELECT DISTINCT B.molecule_id FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE A.element = 'c' AND B.bond_type = '#' AND M.label = '-'",
        "SELECT DISTINCT T2.molecule_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T3.element = 'c' LIMIT 2",
        "SELECT DISTINCT T1.molecule_id  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id  WHERE T1.element = 'c' AND T2.bond_type = '#' AND T3.label = '-'  LIMIT 2"
    ],
    "1048": [
        "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'",
        "SELECT T1.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND strftime('%Y', T2.date) = '2011'",
        "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'",
        "SELECT T1.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Gabriel Tamas' AND strftime('%Y', T1.date) = '2011'",
        "SELECT PA.overall_rating FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Gabriel Tamas' AND strftime('%Y', PA.date) = '2011'",
        "SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND STRFTIME('%Y', T2.date) = '2011'"
    ],
    "1212": [
        "SELECT Admission, COUNT(ID) AS PatientCount FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 GROUP BY Admission",
        "SELECT Patient.Admission, COUNT(*) AS Count FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 GROUP BY Patient.Admission",
        "SELECT Patient.Admission, COUNT(*) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300 GROUP BY Patient.Admission",
        "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
        "SELECT P.Admission FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.ALP < 300",
        "SELECT Patient.Admission, COUNT(*) AS Count  FROM Laboratory  INNER JOIN Patient ON Laboratory.ID = Patient.ID  WHERE Laboratory.ALP < 300  GROUP BY Patient.Admission"
    ],
    "37": [
        "SELECT CONCAT(schools.MailStreet, ', ', schools.MailCity, ', ', schools.State, ', ', schools.MailZip) AS 'the complete address of the school', schools.MailStreet, schools.MailCity, schools.MailZip, schools.State FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) ASC LIMIT 1",
        "SELECT schools.MailStreet, schools.MailCity, schools.MailZip, schools.MailState FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) ASC LIMIT 1",
        "SELECT schools.Street, schools.City, schools.State, schools.MailZip FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY CAST(satscores.NumGE1500 AS REAL) / satscores.NumTstTakr ASC LIMIT 1",
        "SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE (CAST(T2.NumGE1500 AS REAL) / CAST(T2.NumTstTakr AS REAL)) = (SELECT MIN(CAST(NumGE1500 AS REAL) / CAST(NumTstTakr AS REAL)) FROM satscores)",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM (SELECT (CAST(s.NumGE1500 AS FLOAT) / s.NumTstTakr) AS ExcellenceRate, s.cds FROM satscores s WHERE s.NumGE1500 IS NOT NULL AND s.NumTstTakr IS NOT NULL) AS Rates JOIN schools T2 ON Rates.cds = T2.CDSCode ORDER BY ExcellenceRate ASC LIMIT 1",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State  FROM (SELECT cds, (NumGE1500 * 1.0 / NumTstTakr) AS ExcellenceRate        FROM satscores        WHERE NumTstTakr > 0) AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  ORDER BY T1.ExcellenceRate ASC  LIMIT 1"
    ],
    "286": [
        "SELECT CAST(COUNT(DISTINCT T2.molecule_id) AS REAL) * 100 / COUNT(DISTINCT T3.molecule_id) AS percent FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id",
        "SELECT (COUNT(DISTINCT molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS percent_of_triple_bond_compounds FROM bond WHERE bond_type = '#'",
        "SELECT CAST(COUNT(DISTINCT T2.molecule_id) AS REAL) * 100 / (SELECT COUNT(DISTINCT T3.molecule_id) FROM molecule AS T3) AS percent FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
        "SELECT CAST(COUNT(CASE WHEN bond_type = '#' THEN 1 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM bond",
        "SELECT (COUNT(DISTINCT T3.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS percent_triple_bonded FROM bond T2 JOIN molecule T3 ON T2.molecule_id = T3.molecule_id WHERE T2.bond_type = '#'",
        "SELECT (COUNT(DISTINCT T1.molecule_id) * 100.0 / (SELECT COUNT(*) FROM molecule)) AS percent_triple_bond  FROM bond AS T1  WHERE T1.bond_type = '#'"
    ],
    "1114": [
        "SELECT AVG(PA.overall_rating) AS \"average overall rating\" FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Marko Arnautovic' AND SUBSTR(PA.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Marko Arnautovic' AND PA.date BETWEEN '2007-02-22' AND '2016-04-21'",
        "SELECT AVG(PA.overall_rating) FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Marko Arnautovic' AND SUBSTR(PA.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND substr(T1.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "SELECT AVG(PA.overall_rating) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Marko Arnautovic' AND substr(PA.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND SUBSTR(T2.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'"
    ],
    "1121": [
        "SELECT SUM(M.home_team_goal) AS total_home_team_goal FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE (JULIANDAY('now') - JULIANDAY(P.birthday)) / 365 < 31",
        "SELECT SUM(M.home_team_goal) AS total_home_team_goal FROM Match M INNER JOIN Player P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) <= 30",
        "SELECT SUM(Match.home_team_goal) FROM Match JOIN Player ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player_6 = Player.player_api_id OR Match.home_player_7 = Player.player_api_id OR Match.home_player_8 = Player.player_api_id OR Match.home_player_9 = Player.player_api_id OR Match.home_player_10 = Player.player_api_id OR Match.home_player_11 = Player.player_api_id WHERE CAST((JULIANDAY('now') - JULIANDAY(Player.birthday)) AS REAL) / 365 < 30",
        "SELECT SUM(Match.home_team_goal) FROM Match INNER JOIN Player ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player_6 = Player.player_api_id OR Match.home_player_7 = Player.player_api_id OR Match.home_player_8 = Player.player_api_id OR Match.home_player_9 = Player.player_api_id OR Match.home_player_10 = Player.player_api_id OR Match.home_player_11 = Player.player_api_id WHERE strftime('%Y', 'now') - strftime('%Y', Player.birthday) <= 30",
        "SELECT SUM(M.home_team_goal) FROM Match AS M JOIN Player AS P ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11) WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) < 31",
        "SELECT SUM(M.home_team_goal)  FROM Match AS M  WHERE M.home_player_1 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_2 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_3 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_4 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_5 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_6 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_7 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_8 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_9 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_10 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)    OR M.home_player_11 IN (SELECT P.player_api_id FROM Player AS P WHERE SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - SUBSTR(P.birthday, 1, 4) <= 30)"
    ],
    "791": [
        "SELECT AVG(height_cm) AS average_height FROM superhero",
        "SELECT AVG(height_cm) AS average_height FROM superhero",
        "SELECT AVG(height_cm) AS average_height FROM superhero",
        "SELECT CAST(SUM(height_cm) AS REAL) / CAST(COUNT(height_cm) AS REAL) FROM superhero",
        "SELECT AVG(height_cm) AS average_height FROM superhero WHERE height_cm IS NOT NULL",
        "SELECT AVG(height_cm) AS average_height FROM superhero WHERE height_cm IS NOT NULL"
    ],
    "229": [
        "SELECT B.bond_type FROM bond AS B WHERE B.molecule_id = 'TR000'",
        "SELECT DISTINCT T1.bond_type FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR000'",
        "SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR000'",
        "SELECT T1.bond_type FROM bond AS T1 WHERE T1.molecule_id = 'TR000'",
        "SELECT T1.bond_type FROM bond T1 WHERE T1.molecule_id = 'TR000'",
        "SELECT bond_type FROM bond WHERE molecule_id = 'TR000'"
    ],
    "471": [
        "SELECT T1.type, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE T.translation = 'Hauptset Zehnte Edition'",
        "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.type FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'"
    ],
    "279": [
        "SELECT M.label FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_id = 'TR001_10_11'",
        "SELECT M.label FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_id = 'TR001_10_11'",
        "SELECT M.label FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_id = 'TR001_10_11'",
        "SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11'",
        "SELECT T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
        "SELECT T3.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"
    ],
    "325": [
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n'",
        "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'n' AND m.label = '+'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'",
        "SELECT COUNT(DISTINCT T1.molecule_id)  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'n' AND T2.label = '+'"
    ],
    "88": [
        "SELECT schools.AdmEmail1, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 > 0 ORDER BY satscores.NumTstTakr DESC LIMIT 1",
        "SELECT schools.AdmEmail1, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 >= 1500 ORDER BY satscores.NumTstTakr DESC LIMIT 1",
        "SELECT S.AdmEmail1, S.School FROM schools AS S JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE SAT.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) AND SAT.NumGE1500 >= 1500",
        "SELECT s.School, s.AdmEmail1 FROM schools AS s INNER JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE ss.NumGE1500 >= 1 ORDER BY ss.NumTstTakr DESC LIMIT 1",
        "SELECT T2.AdmEmail1, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr IS NOT NULL ORDER BY T1.NumTstTakr DESC LIMIT 1",
        "SELECT T2.AdmEmail1, T2.School  FROM satscores AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)"
    ],
    "1209": [
        "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC",
        "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC",
        "SELECT T1.Diagnosis, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
        "SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC",
        "SELECT T1.Diagnosis  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.GPT > 60  ORDER BY T1.Birthday ASC"
    ],
    "1032": [
        "SELECT L.name, COUNT(M.id) AS match_count FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name, COUNT(M.id) AS match_count FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name, COUNT(M.id) AS match_count FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.id ORDER BY match_count DESC LIMIT 1",
        "SELECT L.name, COUNT(M.id) FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name, COUNT(M.id) AS match_count FROM Match M JOIN League L ON M.league_id = L.id GROUP BY M.league_id ORDER BY match_count DESC LIMIT 1",
        "SELECT T2.name, COUNT(T1.league_id) AS match_count  FROM Match AS T1  INNER JOIN League AS T2 ON T1.league_id = T2.id  GROUP BY T1.league_id, T2.name  HAVING COUNT(T1.league_id) = (SELECT MAX(match_count) FROM (SELECT COUNT(league_id) AS match_count FROM Match GROUP BY league_id))"
    ],
    "1091": [
        "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND SUBSTR(M.date, 1, 7) = '2009-04'",
        "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND SUBSTR(M.date, 1, 7) = '2009-04'",
        "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND SUBSTR(M.date, 1, 7) = '2009-04'",
        "SELECT COUNT(M1.id) FROM Match AS M1 INNER JOIN League AS L1 ON M1.league_id = L1.id WHERE L1.name = 'Belgium Jupiler League' AND SUBSTR(M1.date, 1, 7) = '2009-04'",
        "SELECT COUNT(M.id) FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND SUBSTR(M.date, 1, 7) = '2009-04'",
        "SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Belgium Jupiler League' AND SUBSTR(T1.date, 1, 7) = '2009-04'"
    ],
    "81": [
        "SELECT T1.City, T1.School, T1.GSoffered FROM schools AS T1 WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1",
        "SELECT T1.City, T1.School, T1.GSserved AS lowest_grade FROM schools AS T1 WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1",
        "SELECT schools.City, schools.School, frpm.`Low Grade` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.State = 'CA' ORDER BY schools.Latitude ASC LIMIT 1",
        "SELECT City, `Low Grade`, School FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1",
        "SELECT City, School, LowGrade FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1",
        "SELECT City, School Name, Low Grade FROM schools WHERE State = 'CA' AND Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA')"
    ],
    "87": [
        "SELECT DISTINCT schools.AdmEmail1 FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'San Bernardino' AND schools.City = 'San Bernardino' AND (frpm.School Type = 'Intermediate/Middle Schools (Public)' OR frpm.School Type = 'Unified School District') AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31'",
        "SELECT DISTINCT schools.AdmEmail1 FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`County Name` = 'San Bernardino' AND frpm.`District Name` = 'San Bernardino City Unified' AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (schools.SOCType = 'Intermediate/Middle Schools (Public)' OR schools.DOCType = 'Unified School District')",
        "SELECT DISTINCT s.AdmEmail1, s.AdmEmail2, s.AdmEmail3 FROM schools AS s WHERE s.County = 'San Bernardino' AND s.City = 'San Bernardino' AND s.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (s.SOCType = 'Intermediate/Middle Schools (Public)' OR s.DOCType = 'Unified School District')",
        "SELECT DISTINCT AdmEmail1, AdmEmail2 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54')",
        "SELECT DISTINCT s.AdmEmail1, s.AdmEmail2, s.AdmEmail3 FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.County Name = 'San Bernardino' AND f.District Name = 'San Bernardino City Unified' AND f.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (s.SOC = '62' OR s.DOC = '54') AND (s.AdmEmail1 IS NOT NULL OR s.AdmEmail2 IS NOT NULL OR s.AdmEmail3 IS NOT NULL)",
        "SELECT DISTINCT AdmEmail1, AdmEmail2, AdmEmail3  FROM schools  WHERE County = 'San Bernardino'  AND District = 'San Bernardino City Unified'  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'  AND (SOC = 62 OR DOC = 54)"
    ],
    "617": [
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0'",
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0'",
        "SELECT c.Text FROM comments AS c WHERE c.CreationDate = '2010-07-19 19:37:33.0'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreaionDate = '2010-07-19 21:37:16.0'",
        "SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreaionDate = '2010-07-19 19:37:33.0'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreationDate = '2010-07-19 19:37:33.0'"
    ],
    "517": [
        "SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal'",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "SELECT COUNT(*) FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.type = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "SELECT COUNT(*)  FROM cards AS C  INNER JOIN legalities AS L ON C.uuid = L.uuid  WHERE C.rarity = 'rare' AND C.types LIKE '%Enchantment%' AND C.name = 'Abundance' AND L.status = 'Legal'"
    ],
    "1331": [
        "SELECT amount FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')",
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT T2.amount FROM income AS T2 JOIN member AS T1 ON T2.link_to_member = T1.member_id WHERE T1.position = 'Vice President'",
        "SELECT SUM(T2.amount) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"
    ],
    "1326": [
        "SELECT COUNT(T1.member_id) FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "SELECT COUNT(T1.member_id) FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering')",
        "SELECT COUNT(T1.member_id) FROM member AS T1 WHERE T1.link_to_major IN (SELECT T2.major_id FROM major AS T2 WHERE T2.major_name = 'Environmental Engineering')",
        "SELECT COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'"
    ],
    "1151": [
        "SELECT (COUNT(CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(ID)) AS percentage_inpatient FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT (COUNT(CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(ID)) AS percentage_inpatient FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT (COUNT(CASE WHEN P.Admission = '+' THEN 1 END) * 100.0 / COUNT(*)) AS percent_inpatient, COUNT(*) AS total_patients FROM Patient AS P WHERE P.Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT CAST(COUNT(CASE WHEN Admission = '+' THEN 1 END) AS REAL) * 100 / CAST(COUNT(ID) AS REAL) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT (COUNT(CASE WHEN T1.Admission = '+' THEN 1 END) * 100.0 / COUNT(*)) AS inpatient_percentage FROM Patient AS T1 WHERE T1.Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT (100.0 * SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) / COUNT(*)) AS inpatient_percentage FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'"
    ],
    "1325": [
        "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "SELECT expense_description, cost FROM expense ORDER BY cost DESC LIMIT 1",
        "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense)",
        "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense)"
    ],
    "1075": [
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = 61 AND Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61)",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE potential = 61 AND balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61)",
        "SELECT player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND PA.potential = 61",
        "SELECT balance, potential FROM Player WHERE potential = 80 AND balance = (SELECT MAX(balance) FROM Player WHERE potential = 80)",
        "SELECT PA.player_api_id FROM Player_Attributes PA WHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes) AND PA.potential = 61",
        "SELECT player_api_id, player_name FROM Player_Attributes WHERE balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND potential = 61"
    ],
    "422": [
        "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.multiverseid = 149934",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseId = '149934'",
        "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "SELECT T1.language FROM foreign_data T1 WHERE T1.multiverseid = 149934",
        "SELECT language FROM foreign_data WHERE multiverseid = 149934"
    ],
    "360": [
        "SELECT DISTINCT set_translations.language FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Angel of Mercy'",
        "SELECT DISTINCT T3.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode INNER JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Angel of Mercy'",
        "SELECT set_translations.language FROM sets INNER JOIN cards ON cards.setCode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Angel of Mercy'",
        "SELECT T2.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.number = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy'",
        "SELECT ST.language FROM cards AS C JOIN sets AS S ON C.setCode = S.code JOIN set_translations AS ST ON S.code = ST.setCode WHERE C.name = 'Angel of Mercy'",
        "SELECT DISTINCT ST.language  FROM cards AS C  INNER JOIN sets AS S ON C.setCode = S.code  INNER JOIN set_translations AS ST ON S.code = ST.setCode  WHERE C.name = 'Angel of Mercy'"
    ],
    "1316": [
        "SELECT DISTINCT M.phone FROM attendance A JOIN event E ON A.link_to_event = E.event_id JOIN member M ON A.link_to_member = M.member_id WHERE E.event_name = 'Women''s Soccer'",
        "SELECT member.phone FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id JOIN member T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer'",
        "SELECT member.phone FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = (SELECT event.event_id FROM event WHERE event.event_name = 'Women's Soccer')",
        "SELECT M.phone FROM event AS E JOIN attendance AS A ON E.event_id = A.link_to_event JOIN member AS M ON A.link_to_member = M.member_id WHERE E.event_name = 'Women's Soccer'",
        "SELECT T3.phone FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women's Soccer'"
    ],
    "281": [
        "SELECT T.element FROM atom AS T INNER JOIN molecule AS M ON T.molecule_id = M.molecule_id WHERE M.label = '+' AND SUBSTR(T.atom_id, 7, 1) = '4'",
        "SELECT T2.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4'",
        "SELECT a.element, substr(a.atom_id, 7, 1) AS fourth_atom, m.molecule_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND substr(a.atom_id, 7, 1) = '4'",
        "SELECT COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4'",
        "SELECT T1.element FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4'",
        "SELECT T1.element, COUNT(*)  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4'  GROUP BY T1.element"
    ],
    "670": [
        "SELECT MIN(postHistory.CreationDate) FROM postHistory INNER JOIN users ON postHistory.UserId = users.Id WHERE users.Age = (SELECT MIN(Age) FROM users)",
        "SELECT MIN(posts.CreaionDate) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = (SELECT MIN(Age) FROM users)",
        "SELECT MIN(posts.CreaionDate) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = (SELECT MIN(Age) FROM users)",
        "SELECT MIN(posts.CreationDate) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age = (SELECT MIN(Age) FROM users)",
        "SELECT MIN(P.CreaionDate) FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId WHERE U.Age = (SELECT MIN(Age) FROM users)",
        "SELECT MIN(posts.CreaionDate) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age = (SELECT MIN(Age) FROM users)"
    ],
    "1027": [
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.penalties DESC LIMIT 10",
        "SELECT player_name FROM Player_Attributes ORDER BY penalties DESC LIMIT 10",
        "SELECT player_name FROM Player_Attributes ORDER BY penalties DESC LIMIT 10",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.penalties IS NOT NULL ORDER BY PA.penalties DESC LIMIT 10",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10"
    ],
    "83": [
        "SELECT COUNT(DISTINCT schools.City) AS `Number of Cities`, COUNT(schools.School) AS `Number of Schools` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.GSserved = 'K-8' AND schools.Magnet = 1 AND frpm.`NSLP Provision Status` = 'Multiple Provision Types'",
        "SELECT COUNT(*) AS NumberOfSchools, schools.City FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.GSserved = 'K-8' AND schools.Magnet = 1 AND frpm.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY schools.City",
        "SELECT COUNT(DISTINCT schools.City) AS number_of_cities, COUNT(schools.School) AS number_of_schools FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 1 AND schools.GSoffered = 'K-8' AND frpm.`NSLP Provision Status` = 'Multiple Provision Types'",
        "SELECT T1.City, COUNT(T1.School) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-8' AND T1.Magnet = 1 AND T2.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T1.City",
        "SELECT City, COUNT(*) AS SchoolCount FROM schools WHERE Magnet = 1 AND GSserved = 'K-8' AND CDSCode IN (SELECT CDSCode FROM frpm WHERE `NSLP Provision Status` = 'Multiple Provision Types') GROUP BY City",
        "SELECT schools.City, COUNT(*) AS school_count  FROM schools  INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE schools.Magnet = 1 AND (schools.GSserved LIKE 'K-%' OR schools.GSserved LIKE 'K-8') AND frpm.`NSLP Provision Status` = 'Multiple Provision Types'  GROUP BY schools.City"
    ],
    "755": [
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5",
        "SELECT full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5",
        "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5",
        "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = '-') LIMIT 5",
        "SELECT T1.full_name FROM superhero T1 JOIN race T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5",
        "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5"
    ],
    "1269": [
        "SELECT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0')",
        "SELECT DISTINCT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0')",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0')",
        "SELECT Examination.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.`Examination Date` > '1997-01-01' AND Laboratory.SC170 = 'negative'",
        "SELECT DISTINCT P.ID FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0')",
        "SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.SC170 IN ('negative', '0')"
    ],
    "71": [
        "SELECT frpm.`District Code` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Magnet = 0 AND schools.City = 'Fresno'",
        "SELECT f.`District Code` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.City = 'Fresno' AND s.Magnet = 0",
        "SELECT frpm.`District Code` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Magnet = 0 AND schools.City = 'Fresno'",
        "SELECT District Code FROM schools WHERE City = 'Fresno' AND Magnet = 0",
        "SELECT T1.District FROM schools T1 WHERE T1.Magnet = 0 AND T1.City = 'Fresno'",
        "SELECT District FROM schools WHERE Magnet = 0 AND City = 'Fresno'"
    ],
    "275": [
        "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '='",
        "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '='",
        "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '='",
        "SELECT molecule_id FROM bond WHERE bond_type = '='",
        "SELECT T1.molecule_id FROM bond T1 WHERE T1.bond_type = ' = '",
        "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = '"
    ],
    "1012": [
        "SELECT T1.position, T2.circuitId FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.fastestLap = T2.lap AND T1.raceId = T2.raceId WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY T2.time LIMIT 1",
        "SELECT R.position, C.name FROM results AS R JOIN circuits AS C ON R.raceId = C.circuitId WHERE R.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND R.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))",
        "SELECT T1.position, T2.name FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))",
        "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "SELECT T2.position FROM results AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime = (SELECT MIN(T3.fastestLapTime) FROM results AS T3 INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T4.forename = 'Lewis' AND T4.surname = 'Hamilton')",
        "SELECT T2.position FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND T1.time = (SELECT MIN(T3.time) FROM lapTimes AS T3 INNER JOIN results AS T4 ON T3.raceId = T4.raceId WHERE T4.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))"
    ],
    "612": [
        "SELECT b.Name FROM badges b WHERE b.UserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'Pierre')",
        "SELECT b.Name FROM badges b WHERE b.UserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'Pierre')",
        "SELECT B.Name FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Pierre'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'",
        "SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'"
    ],
    "941": [
        "SELECT SUM(T2.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT SUM(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT SUM(T2.points) FROM results AS T2 INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT SUM(T2.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT SUM(T2.points) FROM driverStandings AS T2 JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "SELECT SUM(T2.points) FROM results AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"
    ],
    "921": [
        "SELECT R.url FROM races R INNER JOIN circuits C ON R.circuitId = C.circuitId WHERE C.circuitRef = 'silverstone'",
        "SELECT R.url FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Silverstone Circuit'",
        "SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'",
        "SELECT T2.url FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.circuitRef = 'silverstone'",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'"
    ],
    "1004": [
        "SELECT COUNT(R.wins) AS wins, D.forename || ' ' || D.surname AS full_name FROM drivers D INNER JOIN driverStandings DS ON D.driverId = DS.driverId INNER JOIN results R ON D.driverId = R.driverId WHERE D.dob = (SELECT MIN(dob) FROM drivers) GROUP BY D.driverId",
        "SELECT D.wins, D.forename || ' ' || D.surname AS full_name FROM drivers AS D WHERE D.dob IS NOT NULL ORDER BY D.dob ASC LIMIT 1",
        "SELECT COUNT(R.wins), D.forename || ' ' || D.surname FROM drivers D JOIN driverStandings R ON D.driverId = R.driverId WHERE D.dob = (SELECT MIN(dob) FROM drivers) GROUP BY D.forename, D.surname",
        "SELECT T1.forename, T1.surname, SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.forename, T1.surname",
        "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, ds.wins FROM drivers AS d JOIN driverStandings AS ds ON d.driverId = ds.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers)",
        "SELECT T2.forename, T2.surname, COUNT(T1.resultsId) AS wins  FROM results AS T1  JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.dob = (SELECT MIN(dob) FROM drivers)  GROUP BY T2.driverId"
    ],
    "754": [
        "SELECT T3.power_name FROM hero_power AS T1 INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T1.hero_id = 56",
        "SELECT T3.power_name FROM hero_power AS T1 INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T1.hero_id = 56",
        "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56",
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
        "SELECT T2.power_name FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56"
    ],
    "787": [
        "SELECT R.race, A.alignment FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE S.superhero_name = 'Cameron Hicks'",
        "SELECT R.race, A.alignment FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE S.superhero_name = 'Cameron Hicks'",
        "SELECT r.race, a.alignment FROM superhero AS h INNER JOIN race AS r ON h.race_id = r.id INNER JOIN alignment AS a ON h.alignment_id = a.id WHERE h.superhero_name = 'Cameron Hicks'",
        "SELECT T3.race, T4.alignment FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "SELECT R.race, A.alignment FROM superhero AS S JOIN race AS R ON S.race_id = R.id JOIN alignment AS A ON S.alignment_id = A.id WHERE S.superhero_name = 'Cameron Hicks'",
        "SELECT T3.race, T4.alignment  FROM superhero AS T1  INNER JOIN race AS T3 ON T1.race_id = T3.id  INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id  WHERE T1.superhero_name = 'Cameron Hicks'"
    ],
    "1060": [
        "SELECT COUNT(id) FROM Player WHERE strftime('%Y', birthday) > '1990'",
        "SELECT COUNT(id) FROM Player WHERE strftime('%Y', birthday) > '1990'",
        "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'",
        "SELECT COUNT(id) FROM Player WHERE strftime('%Y', birthday) > '1990'",
        "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'",
        "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'"
    ],
    "1240": [
        "SELECT AVG(L.HCT) AS average_hematocrit_level FROM Laboratory AS L WHERE L.Date LIKE '1991%' AND L.HCT < 29",
        "SELECT AVG(HCT) AS average_hct FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29",
        "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29",
        "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29",
        "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29",
        "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29"
    ],
    "929": [
        "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT R.name, R.year FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "SELECT R.raceId, R.name FROM results AS Res JOIN drivers AS D ON Res.driverId = D.driverId JOIN races AS R ON Res.raceId = R.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT R.raceId, R.name, R.date FROM results AS Res INNER JOIN races AS R ON Res.raceId = R.raceId WHERE Res.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')"
    ],
    "232": [
        "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T1.molecule_id LIMIT 3",
        "SELECT DISTINCT b.molecule_id FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = '-' AND b.bond_type = '-' ORDER BY b.molecule_id LIMIT 3",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T1.molecule_id LIMIT 3",
        "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' ORDER BY T1.molecule_id LIMIT 3",
        "SELECT DISTINCT T1.molecule_id FROM molecule T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' ORDER BY T1.molecule_id LIMIT 3",
        "SELECT DISTINCT T1.molecule_id  FROM molecule AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '-' AND T2.bond_type = '-'  ORDER BY T1.molecule_id  LIMIT 3"
    ],
    "533": [
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'",
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'",
        "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'",
        "SELECT COUNT(DISTINCT Id) FROM users WHERE LastAccessDate > '2014-09-01'",
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'",
        "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'"
    ],
    "716": [
        "SELECT (COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM comments AS c INNER JOIN users AS u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM comments WHERE Score BETWEEN 5 AND 10)) AS percentage FROM comments WHERE Score BETWEEN 5 AND 10 AND UserId IN (SELECT Id FROM users WHERE UpVotes = 0)",
        "SELECT (COUNT(CASE WHEN U.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score BETWEEN 5 AND 10",
        "SELECT CAST(COUNT(CASE WHEN T2.UpVotes = 0 THEN 1 END) AS REAL) * 100 / COUNT(T1.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10",
        "SELECT (COUNT(CASE WHEN U.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM comments C JOIN users U ON C.UserId = U.Id WHERE C.Score BETWEEN 5 AND 10",
        "SELECT (COUNT(T1.UserId) * 100.0) / NULLIF(COUNT(T2.UserId), 0) AS percentage FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10 AND T2.UpVotes = 0"
    ],
    "292": [
        "SELECT A.atom_id FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.element = 'c' AND SUBSTR(M.molecule_id, 3, 3) >= '010' AND SUBSTR(M.molecule_id, 3, 3) <= '050'",
        "SELECT T1.atom_id FROM atom T1 WHERE T1.element = 'c' AND substr(T1.molecule_id, 3, 3) >= '010' AND substr(T1.molecule_id, 3, 3) <= '050'",
        "SELECT A.atom_id FROM atom AS A WHERE A.element = 'c' AND substr(A.molecule_id, 3, 3) >= '10' AND substr(A.molecule_id, 3, 3) <= '50'",
        "SELECT atom.atom_id, atom.molecule_id, atom.element FROM atom WHERE atom.element = 'c' AND substr(atom.molecule_id, 3, 3) >= '10' AND substr(atom.molecule_id, 3, 3) <= '50'",
        "SELECT T1.atom_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND substr(T2.molecule_id, 3, 3) >= '010' AND substr(T2.molecule_id, 3, 3) <= '050'",
        "SELECT atom.atom_id FROM atom WHERE element = 'c' AND substr(molecule_id, 3, 3) >= '010' AND substr(molecule_id, 3, 3) <= '050'"
    ],
    "387": [
        "SELECT id, colors FROM cards WHERE setCode = 'OGW'",
        "SELECT id, colorIdentity FROM cards WHERE setCode = 'OGW'",
        "SELECT T1.name, T1.colors FROM cards AS T1 WHERE T1.setCode = 'OGW'",
        "SELECT T1.id, T1.colors FROM cards AS T1 WHERE T1.setCode = 'OGW'",
        "SELECT T1.colors FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = 'OGW'",
        "SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = 'OGW'"
    ],
    "880": [
        "SELECT ((CAST((SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853) AS REAL) - (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 854)) / (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 853)) * 100 AS percent_faster",
        "SELECT ((T1.fastestLapSpeed - T2.fastestLapSpeed) / T2.fastestLapSpeed) * 100 AS percent_faster FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = 853 AND T2.raceId = 854 INNER JOIN drivers AS D ON T1.driverId = D.driverId WHERE D.forename = 'Paul' AND D.surname = 'di Resta'",
        "SELECT (R1.fastestLapSpeed - R2.fastestLapSpeed) / R2.fastestLapSpeed * 100 AS percent_faster FROM results AS R1 JOIN results AS R2 ON R1.fastestLapSpeed IS NOT NULL AND R1.raceId = 853 AND R2.raceId = 854 WHERE R1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')",
        "SELECT CAST((MAX(T1.fastestLapSpeed) - (SELECT MAX(T1b.fastestLapSpeed) FROM results AS T1b WHERE T1b.raceId = 854)) AS REAL) * 100 / MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 853 AND T2.forename = 'Paul' AND T2.surname = 'di Resta'",
        "SELECT (CAST((R1.fastestLapSpeed - R2.fastestLapSpeed) AS REAL) / R2.fastestLapSpeed) * 100 AS percent_faster FROM results R1 JOIN results R2 ON R1.raceId = 853 AND R2.raceId = 854 JOIN drivers D ON R1.driverId = D.driverId WHERE D.forename = 'Paul' AND D.surname = 'di Resta'",
        "SELECT ((T1.fastestLapSpeed - T2.fastestLapSpeed) / T1.fastestLapSpeed) * 100 AS percentage_difference  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Paul' AND T2.surname = 'di Resta' AND T1.raceId = 853, (     SELECT fastestLapSpeed      FROM results AS T3      INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId      WHERE T4.forename = 'Paul' AND T4.surname = 'di Resta' AND T3.raceId = 854 ) AS T2"
    ],
    "825": [
        "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'",
        "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'",
        "SELECT T3.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Phoenix Force')",
        "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Phoenix Force'",
        "SELECT T4.gender FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "SELECT T2.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Phoenix Force'"
    ],
    "999": [
        "SELECT R.name FROM results AS R JOIN races AS Ra ON R.raceId = Ra.raceId WHERE R.fastestLapSpeed IS NOT NULL ORDER BY R.fastestLapSpeed ASC LIMIT 1",
        "SELECT R.name, R.year FROM races R JOIN results Res ON R.raceId = Res.raceId WHERE Res.fastestLapTime IS NOT NULL ORDER BY Res.fastestLapTime ASC LIMIT 1",
        "SELECT T3.name FROM results AS T1 INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "###SQL: SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results) LIMIT 1",
        "SELECT R.name FROM results AS R JOIN races AS T1 ON R.raceId = T1.raceId WHERE R.fastestLapSpeed IS NOT NULL ORDER BY R.fastestLapSpeed ASC LIMIT 1",
        "SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)"
    ],
    "1411": [
        "SELECT E.expense_description FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison'",
        "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison'",
        "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison'",
        "SELECT expense.expense_description FROM member AS M JOIN expense AS E ON M.member_id = E.link_to_member WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison'",
        "SELECT T2.expense_description  FROM member AS T1  INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member  WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"
    ],
    "42": [
        "SELECT T2.`Educational Option Type` FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
        "SELECT f.`Educational Option Type` FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode JOIN frpm AS f ON s.CDSCode = f.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1",
        "SELECT frpm.`Educational Option Type` FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 1",
        "SELECT T1.`Educational Option Type` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)",
        "SELECT T2.`Educational Option Type` FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
        "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)"
    ],
    "1249": [
        "SELECT DISTINCT E.Diagnosis FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.`U-PRO` >= 30",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` >= 30",
        "SELECT P.Diagnosis, P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` >= 30",
        "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= '+1(30)'",
        "SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` >= 30",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` >= 30"
    ],
    "1177": [
        "SELECT CASE WHEN L.`T-CHO` < 250 THEN 'Yes' ELSE 'No' END AS Cholesterol_Status FROM Laboratory AS L WHERE L.ID = 2927464 AND L.Date = '1995-09-04'",
        "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Not Normal' END AS cholesterol_status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
        "SELECT CASE WHEN L.`T-CHO` < 250 THEN 'Yes' ELSE 'No' END AS Cholesterol_Status FROM Laboratory AS L WHERE L.ID = 2927464 AND L.Date = '1995-09-04'",
        "SELECT T1.`T-CHO` FROM Laboratory AS T1 WHERE T1.ID = 2927464 AND T1.Date = '1995-09-04'",
        "SELECT `T-CHO` FROM Laboratory T1 WHERE T1.ID = 2927464 AND T1.Date = '1995-09-04' AND `T-CHO` < 250",
        "SELECT CASE WHEN (T1.`T-CHO` < 250) THEN 'Normal' ELSE 'Abnormal' END AS cholesterol_status FROM Laboratory AS T1 WHERE T1.ID = 2927464 AND T1.Date = '1995-09-04'"
    ],
    "1352": [
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'"
    ],
    "1210": [
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500"
    ],
    "1388": [
        "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income)",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income)",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount = (SELECT MAX(amount) FROM income)",
        "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source FROM income JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income)"
    ],
    "775": [
        "SELECT (COUNT(CASE WHEN C.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE G.gender = 'Female'",
        "SELECT (COUNT(*) * 1.0 / (SELECT COUNT(*) FROM superhero AS S JOIN gender AS G ON S.gender_id = G.id WHERE G.gender = 'Female')) * 100 AS percentage FROM superhero AS T1 JOIN colour AS T2 ON T1.skin_colour_id = T2.id JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.colour = 'Blue' AND T3.gender = 'Female'",
        "SELECT (CAST(SUM(CASE WHEN C.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS percentage, SUM(CASE WHEN C.colour = 'Blue' THEN 1 ELSE 0 END) AS blue_female_superheroes, COUNT(*) AS female_superheroes FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE G.gender = 'Female'",
        "SELECT CAST(SUM(CASE WHEN C.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS C ON T1.skin_colour_id = C.id WHERE T2.gender = 'Female'",
        "SELECT (COUNT(CASE WHEN C.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S JOIN gender AS G ON S.gender_id = G.id JOIN colour AS C ON S.skin_colour_id = C.id WHERE G.gender = 'Female'",
        "SELECT (SUM(CASE WHEN C.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage  FROM superhero AS S  INNER JOIN colour AS C ON S.skin_colour_id = C.id  INNER JOIN gender AS G ON S.gender_id = G.id  WHERE G.gender = 'Female'"
    ],
    "181": [
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "SELECT C.client_id FROM client AS C JOIN loan AS L ON C.client_id = L.account_id WHERE C.gender = 'F' ORDER BY L.amount DESC LIMIT 3",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'F' ORDER BY T4.amount DESC LIMIT 3",
        "SELECT c.client_id FROM client c JOIN loan l ON c.account_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3"
    ],
    "270": [
        "SELECT MAX(m.label) FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca'",
        "SELECT molecule.label, COUNT(molecule.molecule_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca' GROUP BY molecule.label",
        "SELECT MAX(m.label) FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca'",
        "SELECT T2.label, COUNT(*) as count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY count DESC LIMIT 1",
        "SELECT m.label FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca' GROUP BY m.label ORDER BY COUNT(m.label) DESC LIMIT 1",
        "SELECT MAX(T2.label) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'"
    ],
    "996": [
        "SELECT AVG(race_count) AS annual_average FROM (SELECT strftime('%Y', date) AS year, COUNT(raceId) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year)",
        "SELECT AVG(race_count) FROM (SELECT strftime('%Y', date) as year, COUNT(raceId) as race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year)",
        "SELECT COUNT(*) * 1.0 / 10 AS annual_average FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
        "SELECT CAST(COUNT(raceId) AS REAL) / CAST(10 AS REAL) FROM races WHERE year BETWEEN 2000 AND 2010",
        "SELECT AVG(race_count) FROM (SELECT COUNT(raceId) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY strftime('%Y', date))",
        "SELECT COUNT(*) / 11.0 AS average_races_per_year FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'"
    ],
    "1466": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
        "SELECT concat(T1.first_name, ' ', T1.last_name), T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T1.position = 'Secretary'"
    ],
    "813": [
        "SELECT AVG(HA.attribute_value) AS average_attribute_value FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id WHERE S.alignment_id = 3",
        "SELECT AVG(HA.attribute_value) AS average_attribute_value FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE S.alignment_id = 3",
        "SELECT AVG(ha.attribute_value) AS average_attribute_value FROM hero_attribute ha INNER JOIN superhero s ON ha.hero_id = s.id WHERE s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')",
        "SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE alignment_id = 3)",
        "SELECT AVG(HA.attribute_value) FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE S.alignment_id = 3",
        "SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3"
    ],
    "168": [
        "SELECT (COUNT(CASE WHEN C.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM client AS C JOIN account AS A ON C.client_id = A.account_id JOIN district AS D ON A.district_id = D.district_id WHERE D.A11 > 10000",
        "SELECT (COUNT(C.client_id) * 100.0 / (SELECT COUNT(*) FROM client WHERE client.district_id IN (SELECT district_id FROM district WHERE A11 > 10000))) AS female_percentage FROM client C WHERE C.gender = 'F' AND C.district_id IN (SELECT district_id FROM district WHERE A11 > 10000)",
        "SELECT (COUNT(CASE WHEN gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A11 > 10000)",
        "SELECT CAST(COUNT(T1.gender) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district ON T1.district_id = district.district_id WHERE T1.gender = 'F' AND district.A11 > 10000",
        "SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0) / COUNT(*) AS percentage_female FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000",
        "SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage  FROM client AS T1  INNER JOIN account AS T2 ON T1.client_id = T2.account_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T3.A11 > 10000"
    ],
    "526": [
        "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability LIKE '%paper%'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'"
    ],
    "1014": [
        "SELECT drivers.forename, drivers.surname, races.name, MIN(lapTimes.time) FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy' GROUP BY drivers.driverId, races.name",
        "SELECT T1.name, MIN(T2.fastestLapTime) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.country = 'Italy' AND T2.fastestLapTime IS NOT NULL GROUP BY T1.name",
        "SELECT C.name, L.time FROM circuits AS C INNER JOIN lapTimes AS L ON C.circuitId = L.raceId INNER JOIN races AS R ON R.circuitId = C.circuitId WHERE C.country = 'Italy' ORDER BY (CAST(SUBSTR(L.time, 1, INSTR(L.time, ':') - 1) AS REAL) * 60 + CAST(SUBSTR(L.time, INSTR(L.time, ':') + 1) AS REAL)) ASC",
        "SELECT T1.raceId, T1.driverId, T1.lap, T1.position, T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "SELECT T1.circuitId, T1.circuitRef, T2.lap, T2.time FROM circuits T1 JOIN lapTimes T2 ON T1.circuitId = T2.raceId WHERE T1.country = 'Italy' ORDER BY T2.time ASC",
        "SELECT C.name, MIN(R.time) AS fastest_lap_time  FROM circuits AS C  INNER JOIN races AS R ON C.circuitId = R.circuitId  WHERE C.country = 'Italy'  GROUP BY C.circuitId"
    ],
    "423": [
        "SELECT cards.id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
        "SELECT cards.cardKingdomFoilId, cards.cardKingdomId FROM cards WHERE cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomId IS NOT NULL ORDER BY cards.cardKingdomFoilId LIMIT 3",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3",
        "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
        "SELECT DISTINCT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3"
    ],
    "297": [
        "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT DISTINCT a.atom_id FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT T1.atom_id FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"
    ],
    "504": [
        "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3",
        "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3",
        "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3",
        "SELECT COUNT(cards.id) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3",
        "SELECT COUNT(T1.id) FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3"
    ],
    "92": [
        "SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000 AND district.district_id IN (SELECT district_id FROM client WHERE gender = 'F')",
        "SELECT COUNT(DISTINCT district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.A11 > 6000 AND district.A11 < 10000 AND client.gender = 'F'",
        "SELECT COUNT(DISTINCT district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND district.A11 > 6000 AND district.A11 < 10000",
        "SELECT COUNT(DISTINCT d.district_id) FROM district AS d INNER JOIN client AS c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000",
        "SELECT COUNT(DISTINCT d.district_id) FROM district AS d JOIN client AS c ON d.district_id = c.district_id WHERE d.A11 > 6000 AND d.A11 < 10000 AND c.gender = 'F'",
        "SELECT COUNT(DISTINCT T1.district_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T1.A11 > 6000 AND T1.A11 < 10000"
    ],
    "608": [
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "SELECT comments.Text FROM comments WHERE comments.CreationDate = '2010-07-19 19:16:14.0'",
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "SELECT T1.Text FROM comments T1 WHERE T1.CreationDate = '2010-07-19 19:25:47.0'",
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'"
    ],
    "1241": [
        "SELECT SUM(PLT < 100) AS Lower_Than_Normal, SUM(PLT > 400) AS Higher_Than_Normal FROM Laboratory WHERE PLT <= 100 OR PLT >= 400",
        "SELECT COUNT(DISTINCT L.ID) AS num_low_range, (SELECT COUNT(DISTINCT L2.ID) FROM Laboratory L2 WHERE L2.PLT > 400) AS num_high_range FROM Laboratory L WHERE L.PLT < 100",
        "SELECT SUM(CASE WHEN L.PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal, SUM(CASE WHEN L.PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal FROM Laboratory AS L WHERE L.PLT <= 100 OR L.PLT >= 400",
        "SELECT (CAST(SUM(Examination.PLT < 100) AS REAL) - CAST(SUM(Examination.PLT > 400) AS REAL)) FROM Examination WHERE Examination.PLT <= 100 OR Examination.PLT >= 400",
        "SELECT (SUM(PLT < 100) - SUM(PLT > 400)) AS comparison FROM Laboratory WHERE PLT < 100 OR PLT > 400",
        "SELECT SUM(CASE WHEN T1.PLT < 100 THEN 1 ELSE 0 END) AS lower_count, SUM(CASE WHEN T1.PLT > 400 THEN 1 ELSE 0 END) AS higher_count  FROM Laboratory AS T1  INNER JOIN Patient AS T2 ON T1.ID = T2.ID  WHERE T1.PLT <= 100 OR T1.PLT >= 400"
    ],
    "112": [
        "SELECT D.A2 FROM client AS C JOIN disp AS D ON C.client_id = D.client_id JOIN account AS A ON D.account_id = A.account_id WHERE C.gender = 'F' AND C.birth_date = '1976-01-29'",
        "SELECT T2.A2 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'",
        "SELECT district.A2 FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
        "SELECT T4.A2 FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'",
        "SELECT district.A2 FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.district_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'",
        "SELECT T2.A2 FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T4 ON T3.account_id = T4.account_id INNER JOIN district AS T2 ON T4.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'"
    ],
    "95": [
        "SELECT a.account_id FROM account AS a INNER JOIN disp AS d ON a.account_id = d.account_id INNER JOIN client AS c ON d.client_id = c.client_id INNER JOIN district AS t ON c.district_id = t.district_id ORDER BY c.birth_date DESC, t.A11 DESC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN client ON account.account_id = disp.account_id INNER JOIN district ON client.district_id = district.district_id GROUP BY account.account_id ORDER BY MIN(client.birth_date) DESC, AVG(district.A11) DESC LIMIT 1",
        "SELECT a.account_id FROM account a INNER JOIN disp d ON a.account_id = d.account_id INNER JOIN client c ON d.client_id = c.client_id WHERE c.birth_date = (SELECT MIN(birth_date) FROM client) AND c.district_id IN (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district))",
        "SELECT account.account_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = (SELECT MIN(birth_date) FROM client) AND district.A11 = (SELECT MAX(A11) FROM district)",
        "SELECT T1.account_id FROM account AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id JOIN client AS T3 ON T2.client_id = T3.client_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.birth_date = (SELECT MIN(birth_date) FROM client) AND T4.A11 = (SELECT MAX(A11) FROM district)",
        "SELECT T1.account_id  FROM account AS T1  INNER JOIN client AS T2 ON T1.client_id = T2.client_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T2.birth_date = (SELECT MAX(birth_date) FROM client)  AND T3.A11 = (SELECT MAX(A11) FROM district)"
    ],
    "376": [
        "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%Flying%'",
        "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%Flying%'",
        "SELECT layout FROM cards WHERE keywords LIKE '%Flying%'",
        "SELECT layout FROM cards WHERE keywords LIKE '%Flying%'",
        "SELECT layout FROM cards WHERE keywords LIKE '%flying%' AND keywords IS NOT NULL",
        "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'"
    ],
    "452": [
        "SELECT name FROM cards WHERE isTextless = 0",
        "SELECT name FROM cards WHERE isTextless = 0",
        "SELECT name FROM cards WHERE isTextless = 0",
        "SELECT name FROM cards WHERE isTextless = 0",
        "SELECT name FROM cards WHERE isTextless = 0",
        "SELECT name FROM cards WHERE isTextless = 0"
    ],
    "1024": [
        "SELECT player_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "SELECT Player.id FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.crossing DESC LIMIT 5",
        "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "SELECT P.id FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY PA.crossing DESC LIMIT 5",
        "SELECT P.id FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.crossing IS NOT NULL ORDER BY PA.crossing DESC LIMIT 5",
        "SELECT T1.player_api_id FROM Player_Attributes AS T1 ORDER BY T1.crossing DESC LIMIT 5"
    ],
    "1369": [
        "SELECT e.event_name FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event ORDER BY b.amount DESC LIMIT 1",
        "SELECT e.event_name FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id ORDER BY b.amount DESC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1",
        "###SQL: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.amount = (SELECT MAX(amount) FROM budget)",
        "SELECT T2.event_name FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
        "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.amount = (SELECT MAX(amount) FROM budget)"
    ],
    "141": [
        "SELECT district.A2 AS district_name FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND strftime('%Y', trans.date) = '1997' GROUP BY district.A2",
        "SELECT D.A2 FROM district D JOIN account A ON D.district_id = A.district_id JOIN trans T ON A.account_id = T.account_id WHERE T.amount > 10000 AND strftime('%Y', T.date) = '1997' GROUP BY D.A2",
        "SELECT DISTINCT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date LIKE '1997%'",
        "SELECT T4.district_id, T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 10000 AND strftime('%Y', T1.date) = '1997'",
        "SELECT DISTINCT d.A2 FROM trans AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS d ON T2.district_id = d.district_id WHERE T1.amount > 10000 AND strftime('%Y', T1.date) = '1997'",
        "SELECT DISTINCT account.district_id FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.amount > 10000 AND STRFTIME('%Y', trans.date) = '1997'"
    ],
    "396": [
        "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1",
        "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1",
        "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1",
        "SELECT COUNT(id) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1",
        "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1",
        "SELECT COUNT(*) FROM cards WHERE hasContentWarning = 1 AND availability LIKE '%paper%' AND frameVersion = '1993'"
    ],
    "843": [
        "SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "SELECT hero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'",
        "SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "SELECT DISTINCT T1.id FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Intelligence')"
    ],
    "1238": [
        "SELECT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday ASC LIMIT 1",
        "SELECT P.ID, P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday ASC LIMIT 1",
        "SELECT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday ASC LIMIT 1",
        "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.HGB > 10 AND Laboratory.HGB < 17 ORDER BY Patient.Birthday ASC LIMIT 1",
        "SELECT T1.ID, T1.SEX FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "SELECT T1.ID, T1.SEX  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17  ORDER BY T1.Birthday ASC  LIMIT 1"
    ],
    "163": [
        "SELECT T2.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T2.A2 ORDER BY COUNT(T3.loan_id) DESC",
        "SELECT district.A2, COUNT(account.account_id) AS account_count FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.district_id ORDER BY account_count DESC LIMIT 1",
        "SELECT T2.A2 AS district, COUNT(T1.account_id) AS accounts FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'A' GROUP BY T2.district_id ORDER BY COUNT(T1.account_id) DESC LIMIT 1",
        "SELECT district.district_id, district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.district_id, district.A2 ORDER BY COUNT(account.account_id) DESC LIMIT 1",
        "SELECT D.A2 FROM loan L JOIN account A ON L.account_id = A.account_id JOIN district D ON A.district_id = D.district_id WHERE L.status = 'A' GROUP BY D.A2 ORDER BY COUNT(A.account_id) DESC LIMIT 1",
        "SELECT T3.A2 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'A' GROUP BY T3.A2 ORDER BY COUNT(T2.account_id) DESC LIMIT 1"
    ],
    "1514": [
        "SELECT c.Currency FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'",
        "SELECT c.Currency FROM customers AS c INNER JOIN transactions_1k AS t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'",
        "SELECT c.Currency FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'",
        "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
        "SELECT c.Currency FROM transactions_1k AS T1 INNER JOIN customers AS c ON T1.CustomerID = c.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "SELECT c.Currency FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'"
    ],
    "1419": [
        "SELECT category FROM event WHERE event_date = '2020-03-24T12:00:00'",
        "SELECT DISTINCT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date = '2020-03-24T12:00:00'",
        "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'",
        "SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'",
        "SELECT T2.category FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
        "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'"
    ],
    "1199": [
        "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L WHERE strftime('%Y', L.Date) = '1997' AND (L.TP < 6.0 OR L.TP > 8.5)",
        "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE STRFTIME('%Y', L.Date) = '1997' AND (L.TP < 6.0 OR L.TP > 8.5)",
        "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L WHERE STRFTIME('%Y', L.Date) = '1997' AND (L.TP <= 6 OR L.TP >= 8.5)",
        "SELECT COUNT(Laboratory.ID) FROM Laboratory WHERE strftime('%Y', Laboratory.Date) = '1997' AND (Laboratory.TP < 6 OR Laboratory.TP > 8.5)",
        "SELECT COUNT(DISTINCT T2.ID) FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Date) = '1997' AND (T1.TP <= 6 OR T1.TP >= 8.5)",
        "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE strftime('%Y', Date) = '1997' AND (TP <= 6 OR TP >= 8.5)"
    ],
    "1045": [
        "SELECT pa.attacking_work_rate FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro'",
        "SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Franco Zennaro'",
        "SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Franco Zennaro'",
        "SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Franco Zennaro'",
        "SELECT PA.attacking_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Franco Zennaro'",
        "SELECT PA.attacking_work_rate  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE P.player_name = 'Franco Zennaro'"
    ],
    "263": [
        "SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS composition FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-'",
        "SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS composition FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-'",
        "SELECT (COUNT(CASE WHEN T1.element = 'cl' THEN 1 END) * 100.0 / COUNT(T1.atom_id)) AS composition FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT (SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.atom_id)) AS percent FROM atom T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT (SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.atom_id)) AS percent  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id  WHERE T3.bond_type = '-'"
    ],
    "475": [
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND uuid IN (SELECT uuid FROM sets WHERE name = 'Coldsnap')",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')",
        "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.borderColor = 'black'",
        "SELECT COUNT(T1.id) FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.borderColor = 'black'",
        "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black'"
    ],
    "21": [
        "SELECT COUNT(*) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700",
        "SELECT COUNT(*) FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Free Meal Count (K-12)` > 500 AND f.`FRPM Count (K-12)` < 700",
        "SELECT COUNT(schools.CDSCode) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.FreeMealCount >= 0 AND frpm.FRPMCount < 700",
        "SELECT COUNT(*) FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.`Free Meal Count (K-12)` > 500 AND T1.`FRPM Count (K-12)` < 700",
        "SELECT COUNT(*) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Los Angeles' AND T1.`Free Meal Count (K-12)` > 500 AND T1.`FRPM Count (K-12)` < 700"
    ],
    "1029": [
        "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4",
        "SELECT T.team_long_name, TA.buildUpPlaySpeed FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id ORDER BY TA.buildUpPlaySpeed DESC LIMIT 4",
        "SELECT Team_Attributes.buildUpPlaySpeed, Team.team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 4",
        "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4",
        "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4",
        "SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4"
    ],
    "150": [
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'north Bohemia' AND trans.bank = 'AB'",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.A3 = 'north Bohemia' AND trans.bank = 'AB'",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'north Bohemia' AND trans.bank = 'AB'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.region = 'north Bohemia' AND T3.bank = 'AB'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND T3.bank = 'AB'",
        "SELECT COUNT(DISTINCT T1.account_id)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN trans AS T3 ON T1.account_id = T3.account_id  WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'"
    ],
    "1457": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.phone FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.phone FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING SUM(T2.cost) > (SELECT AVG(cost) FROM expense)",
        "SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING T2.cost > (SELECT AVG(cost) FROM expense)",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.approved = 'true' AND expense.cost > (SELECT AVG(cost) FROM expense WHERE approved = 'true')",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.phone  FROM member AS T1  INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member  WHERE T2.cost > (SELECT AVG(cost) FROM expense)"
    ],
    "513": [
        "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander')"
    ],
    "532": [
        "SELECT users.DisplayName FROM users WHERE STRFTIME('%Y', users.CreationDate) = '2011'",
        "SELECT users.DisplayName FROM users WHERE strftime('%Y', users.CreationDate) = '2011'",
        "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011'",
        "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'"
    ],
    "955": [
        "SELECT AVG(SUBSTR(T4.time, INSTR(T4.time, ':') + 1, INSTR(T4.time, '.', INSTR(T4.time, ':')) - INSTR(T4.time, ':') - 1) + (SUBSTR(T4.time, 1, INSTR(T4.time, ':') - 1) * 3600)) + (SUBSTR(T4.time, 1, INSTR(T4.time, ':') - 1) * 60)) AS average_time, T3.year FROM results AS T4 INNER JOIN races AS T3 ON T4.raceId = T3.raceId WHERE T4.time IS NOT NULL AND T3.year < 1975 GROUP BY T3.year",
        "SELECT AVG((SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(T1.time, ':', INSTR(T1.time, ':') + 1) - INSTR(T1.time, ':') - 1) * 3600) + (SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) * 60) + SUBSTR(T1.time, INSTR(T1.time, ':', INSTR(T1.time, ':') + 1) + 1)) AS average_time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T2.year < 1975",
        "SELECT AVG(CAST(SUBSTR(T1.time, INSTR(T1.time, ':') - 2, 2) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, INSTR(T1.time, '.', 1) - 3, 3) AS INTEGER)) AS average_time, T2.year AS champion FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T2.year < 1975 GROUP BY T2.year",
        "SELECT AVG(CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year < 1975 AND T1.position = 1",
        "SELECT races.year, AVG((CAST(SUBSTR(results.time, INSTR(results.time, ':') - 2, 2) AS INTEGER) * 3600) + (CAST(SUBSTR(results.time, INSTR(results.time, ':') + 1, 2) AS INTEGER) * 60) + CAST(SUBSTR(results.time, INSTR(results.time, ':', INSTR(results.time, ':') + 1) + 1) AS INTEGER))) AS average_time_seconds FROM results JOIN races ON results.raceId = races.raceId WHERE results.time IS NOT NULL AND races.year < 1975 GROUP BY races.year",
        "SELECT races.year, AVG(     CAST(SUBSTR(results.time, 1, INSTR(results.time, ':') - 1) AS INT) * 3600 +     CAST(SUBSTR(results.time, INSTR(results.time, ':') + 1, INSTR(results.time, ':', INSTR(results.time, ':') + 1) - INSTR(results.time, ':') - 1) AS INT) * 60 +     CAST(SUBSTR(results.time, INSTR(results.time, ':', INSTR(results.time, ':') + 1) + 1) AS REAL) ) AS average_time_in_seconds FROM results JOIN races ON results.raceId = races.raceId WHERE results.time IS NOT NULL AND races.year < 1975 GROUP BY races.year"
    ],
    "392": [
        "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "SELECT T1.name FROM cards T1 JOIN rulings T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3"
    ],
    "575": [
        "SELECT b.Name FROM badges b WHERE b.UserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'SilentGhost')",
        "SELECT b.Name FROM badges b WHERE b.UserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'SilentGhost')",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'",
        "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'"
    ],
    "714": [
        "SELECT Text FROM comments WHERE UserDisplayName = 'Harvey Motulsky'",
        "SELECT comments.Text FROM comments WHERE comments.UserDisplayName = 'Harvey Motulsky'",
        "SELECT c.Text FROM comments AS c INNER JOIN users AS u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky'",
        "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky'",
        "SELECT T1.Text FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'"
    ],
    "317": [
        "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT (SUM(CASE WHEN m.label = '+' AND a.element = 'cl' THEN 1 ELSE 0 END) * 100.0) / COUNT(m.molecule_id) AS percentage FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id",
        "SELECT ROUND(CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id), 3) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT (SUM(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN T2.label = '+' THEN 1 END)) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT (SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT T1.molecule_id)) AS percentage  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'cl'"
    ],
    "1187": [
        "SELECT COUNT(DISTINCT Patient.ID) AS PatientCount, Patient.ID FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT > 30 AND Laboratory.ALB < 4 AND Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31' GROUP BY Patient.ID",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T1.ID WHERE T3.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4",
        "SELECT DISTINCT P.ID FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID JOIN Patient AS P ON E.ID = P.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4"
    ],
    "230": [
        "SELECT a.element, m.label FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR060'",
        "SELECT element, (SELECT label FROM molecule WHERE molecule_id = 'TR060') AS label FROM atom WHERE molecule_id = 'TR060'",
        "SELECT A.element, M.label FROM atom AS A JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.molecule_id = 'TR060'",
        "SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "SELECT T1.element, T2.label FROM atom T1 INNER JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'"
    ],
    "5": [
        "SELECT COUNT(*) FROM schools WHERE AvgScrMath > 400 AND Virtual = 'F'",
        "SELECT COUNT(*) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F'",
        "SELECT COUNT(*) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F'",
        "SELECT COUNT(DISTINCT T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'",
        "SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'",
        "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'"
    ],
    "52": [
        "SELECT COUNT(DISTINCT schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500 AND schools.MailCity = 'Lakeport'",
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE (ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite) >= 1500 AND s.MailCity = 'Lakeport'",
        "SELECT COUNT(*) FROM schools AS S INNER JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE (SAT.AvgScrRead + SAT.AvgScrMath + SAT.AvgScrWrite) >= 1500 AND S.MailCity = 'Lakeport'",
        "SELECT COUNT(T2.sname) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (CAST(T1.AvgScrRead AS REAL) + CAST(T1.AvgScrMath AS REAL) + CAST(T1.AvgScrWrite AS REAL)) >= 1500 AND T2.MailCity = 'Lakeport'",
        "SELECT COUNT(*) FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500 AND T2.MailCity = 'Lakeport'",
        "SELECT COUNT(*) FROM schools AS S INNER JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE S.MailCity = 'Lakeport' AND (SAT.AvgScrRead + SAT.AvgScrMath + SAT.AvgScrWrite) >= 1500"
    ],
    "1086": [
        "SELECT PA.heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Ariel Borysiuk'",
        "SELECT PA.heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Ariel Borysiuk'",
        "SELECT heading_accuracy FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Ariel Borysiuk'",
        "SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ariel Borysiuk'",
        "SELECT PA.heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Ariel Borysiuk'",
        "SELECT PA.heading_accuracy  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE P.player_name = 'Ariel Borysiuk'"
    ],
    "997": [
        "SELECT drivers.nationality FROM drivers GROUP BY drivers.nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT drivers.nationality, COUNT(*) as count FROM drivers GROUP BY drivers.nationality ORDER BY count DESC LIMIT 1",
        "SELECT nationality, COUNT(*) as count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1"
    ],
    "160": [
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
        "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount < 200000 AND T1.frequency = 'POPLATEK TYDNE'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN loan T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000",
        "SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE A.frequency = 'POPLATEK TYDNE' AND L.amount < 200000"
    ],
    "922": [
        "SELECT R.time FROM races R INNER JOIN circuits C ON R.circuitId = C.circuitId WHERE C.name = 'Bahrain International Circuit' AND R.year = 2010",
        "SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Bahrain International Circuit' AND races.year BETWEEN 2010 AND 2019",
        "SELECT R.time FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Bahrain International Circuit' AND R.year = 2010",
        "###SQL: SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Bahrain International Circuit' AND T1.year BETWEEN 2010 AND 2019",
        "SELECT R.time FROM races AS R JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Abu Dhabi Circuit' AND R.year = 2010",
        "SELECT DISTINCT R.time FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN circuits AS C ON RA.circuitId = C.circuitId WHERE C.name = 'Abu Dhabi Circuit' AND RA.year BETWEEN 2010 AND 2019"
    ],
    "1046": [
        "SELECT t1.buildUpPlayPositioningClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'ADO Den Haag'",
        "SELECT Team_Attributes.buildUpPlayPositioningClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'ADO Den Haag'",
        "SELECT T1.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag'",
        "SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag'",
        "SELECT TA.buildUpPlayPositioningClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'ADO Den Haag'",
        "SELECT T1.buildUpPlayPositioningClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'ADO Den Haag'"
    ],
    "734": [
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "SELECT T2.publisher_name  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  WHERE T1.superhero_name = 'Blue Beetle II'"
    ],
    "456": [
        "SELECT types, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "SELECT types, subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 WHERE T1.name = 'Molimo, Maro-Sorcerer'",
        "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'"
    ],
    "1023": [
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'",
        "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'",
        "SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.overall_rating >= 60 AND T1.overall_rating < 65 AND T1.defensive_work_rate = 'low'",
        "SELECT COUNT(T1.id) FROM Player_Attributes AS T1 WHERE T1.overall_rating >= 60 AND T1.overall_rating < 65 AND T1.defensive_work_rate = 'low'",
        "SELECT COUNT(*) FROM Player_Attributes AS T1 WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'",
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'"
    ],
    "127": [
        "SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE'",
        "SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE'",
        "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
        "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
        "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
        "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'"
    ],
    "174": [
        "SELECT STRFTIME('%Y', birth_date) AS year FROM client WHERE client_id = 130",
        "SELECT STRFTIME('%Y', client.birth_date) AS year FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.account_id = 130",
        "SELECT STRFTIME('%Y', birth_date) FROM client WHERE client_id = 130",
        "SELECT strftime('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.client_id = 2758",
        "SELECT strftime('%Y', C.birth_date) FROM client AS C JOIN disp AS D ON C.client_id = D.client_id WHERE D.account_id = 130",
        "SELECT STRFTIME('%Y', birth_date) FROM client WHERE client_id = 130"
    ],
    "842": [
        "SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = 3",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 WHERE T1.alignment_id = 3",
        "SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'N/A')",
        "SELECT AVG(CAST(height_cm AS FLOAT)) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'N/A'",
        "SELECT AVG(height_cm) FROM superhero AS T1 JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'N/A' AND height_cm IS NOT NULL AND height_cm > 0",
        "SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'N/A'"
    ],
    "1384": [
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
        "SELECT SUM(T2.amount) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
        "SELECT SUM(T1.amount) FROM income T1 JOIN member T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'",
        "SELECT SUM(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'"
    ],
    "207": [
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "SELECT DISTINCT a.element FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '='",
        "SELECT DISTINCT T1.element FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '='",
        "SELECT DISTINCT T1.element FROM bond AS T2 INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '='"
    ],
    "1160": [
        "SELECT CAST(SUM(CASE WHEN P.SEX = 'F' AND (L.TP < 6.0 OR L.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.ID) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'",
        "SELECT (COUNT(CASE WHEN T2.TP < 6.0 OR T2.TP > 8.5 THEN T1.ID END) * 100.0 / COUNT(T1.ID)) AS percentage_female FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
        "SELECT CAST(COUNT(CASE WHEN T2.SEX = 'F' AND (T1.TP < 6.0 OR T1.TP > 8.5) THEN 1 END) AS REAL) * 100 / COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F'",
        "SELECT (SELECT COUNT(T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5)) * 100.0 / COUNT(T1.ID) AS percentage FROM Patient T1 WHERE T1.SEX = 'F'",
        "SELECT (COUNT(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.SEX = 'F'"
    ],
    "542": [
        "SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT SUM(posts.CommentCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT SUM(posts.CommentCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT SUM(T2.CommentCount) FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT SUM(p.CommentCount)  FROM posts AS p  JOIN users AS u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'csgillespie'"
    ],
    "120": [
        "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND STRFTIME('%Y', account.date) BETWEEN '1995' AND '2000'",
        "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date BETWEEN '1995-01-01' AND '2000-12-31' AND district.A3 = 'east Bohemia'",
        "SELECT account.account_id, account.frequency FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND STRFTIME('%Y', account.date) BETWEEN '1995' AND '2000'",
        "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND strftime('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "SELECT T1.account_id, T1.frequency FROM account AS T1 JOIN client AS T2 ON T1.account_id = T2.client_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31'",
        "SELECT T1.account_id, T1.frequency  FROM account AS T1  INNER JOIN client AS T2 ON T1.account_id = T2.client_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.date BETWEEN '1995-01-01' AND '2000-12-31' AND T3.A3 = 'east Bohemia'"
    ],
    "648": [
        "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
        "SELECT users.DisplayName, users.WebsiteUrl FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount > 150",
        "SELECT users.DisplayName, users.WebsiteUrl FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150",
        "SELECT users.DisplayName, users.WebsiteUrl FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount > 150",
        "SELECT U.DisplayName, U.WebsiteUrl FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount > 150",
        "SELECT T2.DisplayName, T2.WebsiteUrl  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T1.FavoriteCount > 150"
    ],
    "231": [
        "SELECT bond_type, COUNT(bond_type) AS bond_count FROM bond WHERE molecule_id = 'TR010' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1, (SELECT label FROM molecule WHERE molecule_id = 'TR010')",
        "SELECT bond_type, COUNT(bond_type) AS bond_count FROM bond WHERE molecule_id = 'TR010' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1; SELECT label FROM molecule WHERE molecule_id = 'TR010'",
        "SELECT bond.bond_type, COUNT(bond.bond_type) AS bond_count, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR010' GROUP BY bond.bond_type, molecule.label ORDER BY bond_count DESC LIMIT 1",
        "SELECT T1.bond_type, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_type) DESC LIMIT 1",
        "SELECT T1.bond_type, T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_type) DESC LIMIT 1",
        "SELECT T1.bond_type, T2.label  FROM (SELECT bond_type, COUNT(bond_type) AS bond_count        FROM bond        WHERE molecule_id = 'TR010'        GROUP BY bond_type        ORDER BY bond_count DESC        LIMIT 1) AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR010'"
    ],
    "1094": [
        "SELECT (SELECT PA1.overall_rating FROM Player P1 JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Ariel Borysiuk') - (SELECT PA2.overall_rating FROM Player P2 JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.player_name = 'Paulin Puel') AS rating_difference, ((SELECT PA1.overall_rating FROM Player P1 JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Ariel Borysiuk') - (SELECT PA2.overall_rating FROM Player P2 JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.player_name = 'Paulin Puel')) / (SELECT PA2.overall_rating FROM Player P2 JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.player_name = 'Paulin Puel') * 100 AS percentage_difference",
        "SELECT (SELECT overall_rating FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel') AS rating_difference, (SELECT overall_rating FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel') AS puel_rating",
        "SELECT (100.0 * (t1.overall_rating - t2.overall_rating) / t2.overall_rating) AS percentage_difference FROM Player AS t1 INNER JOIN Player_Attributes AS t1_attr ON t1.player_api_id = t1_attr.player_api_id INNER JOIN Player AS t2 INNER JOIN Player_Attributes AS t2_attr ON t2.player_api_id = t2_attr.player_api_id WHERE t1.player_name = 'Ariel Borysiuk' AND t2.player_name = 'Paulin Puel'",
        "SELECT CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk') LIMIT 1) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') LIMIT 1) AS REAL) * 100 / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') LIMIT 1)",
        "SELECT (CAST((A.overall_rating - P.overall_rating) AS FLOAT) / P.overall_rating) * 100 AS percentage_difference FROM Player_Attributes AS A JOIN Player AS PA ON A.player_api_id = PA.player_api_id JOIN Player_Attributes AS P ON P.player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') WHERE PA.player_name = 'Ariel Borysiuk'",
        "SELECT ( ( (SELECT overall_rating FROM Player WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player WHERE player_name = 'Paulin Puel') ) / (SELECT overall_rating FROM Player WHERE player_name = 'Paulin Puel') ) * 100 AS percentage_difference"
    ],
    "801": [
        "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS ratio FROM superhero",
        "SELECT (SUM(CASE WHEN G.gender = 'Male' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN G.gender = 'Female' THEN 1 ELSE 0 END), 0)) AS ratio FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id",
        "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS ratio FROM superhero",
        "SELECT CAST(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) FROM superhero",
        "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS ratio FROM superhero",
        "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS ratio FROM superhero"
    ],
    "682": [
        "SELECT p.Id, u.DisplayName FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2010' ORDER BY p.FavoriteCount DESC LIMIT 1",
        "SELECT posts.Id, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE YEAR(posts.CreaionDate) = 2010 ORDER BY posts.FavoriteCount DESC LIMIT 1",
        "SELECT p.Id, u.DisplayName FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2010' ORDER BY p.FavoriteCount DESC LIMIT 1",
        "SELECT posts.Id, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE year(posts.CreationDate) = 2010 ORDER BY posts.FavoriteCount DESC LIMIT 1",
        "SELECT P.Id, U.DisplayName FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreaionDate) = '2010' ORDER BY P.FavoriteCount DESC LIMIT 1",
        "SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.FavoriteCount = (     SELECT MAX(T3.FavoriteCount)     FROM posts AS T3     WHERE STRFTIME('%Y', T3.CreationDate) = '2010' ) AND STRFTIME('%Y', T1.CreationDate) = '2010'"
    ],
    "1421": [
        "SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) AS percentage FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id",
        "SELECT (SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.member_id)) AS percentage FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id",
        "SELECT CAST(SUM(CASE WHEN M.link_to_major = MA.major_id AND MA.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(M.member_id) AS percentage_members FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id",
        "SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id",
        "SELECT (SUM(CASE WHEN m.position = 'Member' AND maj.major_name = 'Business' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.member_id)) AS percentage_business_members FROM member AS m JOIN major AS maj ON m.link_to_major = maj.major_id",
        "SELECT (SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.member_id) AS percentage_business_members  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id"
    ],
    "1265": [
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP IN ('-', '+-') AND P.Admission = '+'",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP IN ('-', '+-') AND Patient.Admission = '+'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP IN ('-', '+-') AND P.Admission = '+'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'"
    ],
    "993": [
        "SELECT location, country, (lat, lng) AS coordinates FROM circuits WHERE name = 'Hungaroring'",
        "SELECT C.location, C.country, C.lat AS latitude, C.lng AS longitude FROM circuits AS C WHERE C.name = 'Hungaroring'",
        "SELECT location, country, (lat, lng) AS coordinates FROM circuits WHERE name = 'Hungaroring'",
        "SELECT T1.location, T1.country, T1.lat, T1.lng FROM circuits AS T1 WHERE T1.name = 'Hungaroring'",
        "SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.circuitRef = 'hungaroring'",
        "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'"
    ],
    "381": [
        "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
        "SELECT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'"
    ],
    "408": [
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 WHERE (T1.power IS NULL OR T1.power = '*') AND T1.text LIKE '%triggered ability%'",
        "SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'",
        "SELECT COUNT(DISTINCT id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'",
        "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'"
    ],
    "1245": [
        "SELECT COUNT(*) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45",
        "SELECT COUNT(*) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45",
        "SELECT COUNT(*) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45",
        "SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE `Examination Date` > '1997-01-01' AND APTT < 45",
        "SELECT COUNT(*) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45",
        "SELECT COUNT(*)  FROM Examination AS E  INNER JOIN Laboratory AS L ON E.ID = L.ID  WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45"
    ],
    "527": [
        "SELECT T2.text FROM rulings AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Kev Walker' ORDER BY R.date DESC",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Kev Walker' ORDER BY T1.date DESC",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Kev Walker' ORDER BY R.date DESC",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Kev Walker' ORDER BY T1.date DESC"
    ],
    "1099": [
        "SELECT PA.preferred_foot FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Abdou Diallo'",
        "SELECT pa.preferred_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo'",
        "SELECT pa.preferred_foot FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo'",
        "SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo'",
        "SELECT PA.preferred_foot FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Abdou Diallo'",
        "SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo'"
    ],
    "1106": [
        "SELECT PA.defensive_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Berigaud' AND PA.date = '2013-02-22 00:00:00'",
        "SELECT PA.defensive_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Berigaud' AND PA.date = '2013-02-22 00:00:00'",
        "SELECT pa.defensive_work_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Kevin Berigaud' AND pa.date = '2013-02-22 00:00:00'",
        "SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Berigaud' AND T1.date = '2013-02-22 00:00:00'",
        "SELECT PA.defensive_work_rate FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Berigaud' AND PA.date = '2013-02-22 00:00:00'",
        "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Berigaud' AND T2.date = '2013-02-22 00:00:00'"
    ],
    "868": [
        "SELECT C.lat, C.lng FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.name = 'Malaysian Grand Prix'",
        "SELECT C.lat, C.lng FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.name = 'Malaysian Grand Prix'",
        "SELECT c.lat, c.lng FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "SELECT C.lat, C.lng FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.name = 'Malaysian Grand Prix'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Malaysian Grand Prix'"
    ],
    "1505": [
        "SELECT COUNT(DISTINCT yearmonth.CustomerID) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY yearmonth.CustomerID HAVING SUM(yearmonth.Consumption) / 12 > 1000",
        "SELECT COUNT(DISTINCT yearmonth.CustomerID) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' GROUP BY yearmonth.CustomerID HAVING SUM(yearmonth.Consumption) / 12 > 1000",
        "SELECT COUNT(DISTINCT yearmonth.CustomerID) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000",
        "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption > 1000 AND T1.Currency = 'EUR'",
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000",
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000"
    ],
    "428": [
        "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5",
        "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5",
        "SELECT name, translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5",
        "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5",
        "SELECT sets.name, set_translations.translation FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.id = 5",
        "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5"
    ],
    "189": [
        "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' AND T4.A11 = (SELECT MIN(A11) FROM district WHERE A11 IS NOT NULL) AND T3.client_id = (SELECT client_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1) LIMIT 1",
        "SELECT A.account_id FROM account AS A JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'F' AND C.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND A.district_id = (SELECT district_id FROM district ORDER BY A11 ASC LIMIT 1)",
        "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' AND T4.A11 = (SELECT MIN(A11) FROM district WHERE district.district_id IN (SELECT DISTINCT client.district_id FROM client WHERE gender = 'F')) ORDER BY T3.birth_date ASC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = (SELECT MAX(birth_date) FROM client WHERE gender = 'F') AND district.A11 = (SELECT MIN(A11) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F')",
        "SELECT T1.account_id FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id JOIN client T3 ON T2.client_id = T3.client_id JOIN district T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' AND T4.A11 = (SELECT MIN(T5.A11) FROM district T5 JOIN client T6 ON T5.district_id = T6.district_id WHERE T6.gender = 'F') AND T3.birth_date = (SELECT MIN(T7.birth_date) FROM client T7 WHERE T7.gender = 'F')",
        "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(T3.birth_date) FROM client AS T3 WHERE T3.gender = 'F') AND T1.district_id = (SELECT T4.district_id FROM district AS T4 WHERE T4.A11 = (SELECT MIN(T5.A11) FROM district AS T5))"
    ],
    "750": [
        "SELECT AVG(weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "SELECT AVG(weight_kg) AS average_weight FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'",
        "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')",
        "SELECT AVG(weight_kg) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female' AND T1.weight_kg IS NOT NULL",
        "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'"
    ],
    "1255": [
        "SELECT Diagnosis FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.IGM <= 40 OR L.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1",
        "SELECT Diagnosis FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.IGM <= 40 OR Laboratory.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1",
        "SELECT Diagnosis FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.IGM <= 40 OR L.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1",
        "SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.IGM <= 40 OR T1.IGM >= 400 GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
        "SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.IGM <= 40 OR L.IGM >= 400 GROUP BY P.Diagnosis ORDER BY COUNT(P.Diagnosis) DESC LIMIT 1",
        "SELECT Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.IGM <= 40 OR E.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1"
    ],
    "1338": [
        "SELECT e.event_name, e.event_date, ex.approved FROM event AS e INNER JOIN expense AS ex ON e.event_id = ex.link_to_budget WHERE e.event_name = 'October Meeting' AND e.event_date = '2019-10-08'",
        "SELECT expense.expense_id, expense.approved FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'",
        "SELECT expense.approved FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'",
        "SELECT T2.expense_id, T2.approved FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08T12:00:00' AND T2.approved = 'true'",
        "SELECT T3.approved FROM event AS T1 JOIN expense AS T3 ON T1.event_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'",
        "SELECT COUNT(*) = 0 AS all_approved FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08' AND T1.approved = 'false'"
    ],
    "858": [
        "SELECT constructors.nationality, constructors.name FROM constructorResults INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.points = 1 AND constructorResults.raceId = 24",
        "SELECT constructors.nationality, constructors.name FROM results INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.points = 1 AND results.raceId = 24",
        "SELECT constructors.nationality FROM constructorResults INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.points = 1 AND constructorResults.raceId = 24",
        "SELECT T1.nationality FROM constructorResults AS T2 INNER JOIN constructors AS T1 ON T2.constructorId = T1.constructorId WHERE T2.raceId = 24 AND T2.points = 1",
        "SELECT T2.nationality FROM constructorResults T1 JOIN constructors T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 1 AND T1.raceId = 24",
        "SELECT T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 24 AND T1.points = 1"
    ],
    "572": [
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
    ],
    "19": [
        "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 1",
        "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 1",
        "SELECT T1.Phone, T2.sname FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "SELECT s.Phone FROM satscores AS S1 JOIN schools AS S2 ON S1.cds = S2.CDSCode WHERE S1.AvgScrMath IS NOT NULL ORDER BY S1.AvgScrMath DESC LIMIT 1",
        "SELECT S.Phone FROM satscores AS SS INNER JOIN schools AS S ON SS.cds = S.CDSCode WHERE SS.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)"
    ],
    "1237": [
        "SELECT DISTINCT Patient.ID, Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.HGB < 10",
        "SELECT Patient.ID, Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.HGB < 10",
        "SELECT DISTINCT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.HGB < 10",
        "SELECT DISTINCT P.ID, P.SEX FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.HGB < 10",
        "SELECT P.ID, P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.HGB < 10",
        "SELECT DISTINCT P.ID, P.SEX  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Admission = '-' AND L.HGB < 10"
    ],
    "498": [
        "SELECT set_translations.translation, sets.name FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode INNER JOIN sets ON cards.setCode = sets.code WHERE set_translations.language = 'French' AND cards.name = 'Tendo Ice Bridge'",
        "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French'",
        "SELECT T2.translation FROM set_translations AS T2 INNER JOIN cards AS T1 ON T1.setCode = T2.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French'",
        "SELECT T2.name FROM sets AS T1 INNER JOIN foreign_data AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Tendo Ice Bridge' AND T2.language = 'French'",
        "SELECT S.name FROM foreign_data AS F JOIN cards AS C ON F.uuid = C.uuid JOIN sets AS S ON C.setCode = S.code WHERE F.language = 'French' AND F.name = 'Tendo Ice Bridge'",
        "SELECT ST.translation FROM cards AS C  INNER JOIN set_translations AS ST ON C.uuid = ST.setCode  INNER JOIN sets AS S ON ST.setCode = S.code  WHERE C.name = 'Tendo Ice Bridge' AND ST.language = 'French'"
    ],
    "820": [
        "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T2.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
        "SELECT T3.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
        "SELECT ha.attribute_value FROM hero_attribute AS ha INNER JOIN superhero AS s ON ha.hero_id = s.id INNER JOIN attribute AS a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength'",
        "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T2.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
        "SELECT HA.attribute_value FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Strength' AND S.superhero_name = 'Hulk'",
        "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND T2.superhero_name = 'Hulk'"
    ],
    "424": [
        "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) * 100 / COUNT(*) AS proportion FROM cards",
        "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM cards",
        "SELECT CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) * 100 / COUNT(*) AS proportion FROM cards",
        "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM cards",
        "SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0 / NULLIF(COUNT(*), 0)) AS proportion FROM cards",
        "SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0 / COUNT(CASE WHEN isTextless = 1 THEN 1 END)) AS proportion FROM cards"
    ],
    "677": [
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Jay Stevens' AND YEAR(CreaionDate) = 2010",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Jay Stevens' AND YEAR(CreaionDate) = 2010",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Jay Stevens' AND strftime('%Y', CreaionDate) = '2010'",
        "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Jay Stevens' AND strftime('%Y', T1.CreationDate) = '2010'",
        "SELECT COUNT(T1.Id) FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Jay Stevens' AND strftime('%Y', T1.CreaionDate) = '2010'",
        "SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T1.CreaionDate) = '2010'"
    ],
    "690": [
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1",
        "SELECT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "SELECT T1.Name FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' AND T1.Date = (SELECT MAX(Date) FROM badges WHERE UserId = T2.Id)"
    ],
    "1089": [
        "SELECT COUNT(*) FROM Match M JOIN Country C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009'",
        "SELECT COUNT(*) FROM Match M JOIN Country C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009'",
        "SELECT COUNT(*) FROM Match AS M JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009'",
        "SELECT COUNT(M.id) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009'",
        "SELECT COUNT(*) FROM Match AS M JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009'",
        "SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.country_id = T2.country_id INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T1.season = '2008/2009' AND T3.name = 'Belgium'"
    ],
    "1327": [
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "SELECT T3.first_name, T3.last_name FROM attendance AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Laugh Out Loud'",
        "SELECT DISTINCT T2.first_name || ' ' || T2.last_name AS full_name  FROM attendance AS T1  INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T3.event_name = 'Laugh Out Loud'"
    ],
    "685": [
        "SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Computer Game Datasets'",
        "SELECT posts.ViewCount, posts.LastEditorDisplayName FROM posts WHERE posts.Title = 'Computer Game Datasets'",
        "SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Computer Game Datasets' ORDER BY postHistory.CreationDate DESC LIMIT 1",
        "SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Computer Game Datasets'",
        "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets'",
        "SELECT T1.ViewCount, T2.DisplayName  FROM posts AS T1  JOIN users AS T2 ON T1.LastEditorUserId = T2.Id  WHERE T1.Text = 'Computer Game Datasets'"
    ],
    "254": [
        "SELECT CAST(COUNT(T1.bond_id) AS REAL) * 100 / (SELECT COUNT(T2.atom_id) FROM atom AS T2 WHERE T2.atom_id IN (SELECT T3.atom_id FROM connected AS T3 GROUP BY T3.atom_id ORDER BY COUNT(T3.atom_id) DESC LIMIT 1)) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id",
        "SELECT (COUNT(bond_id) * 100.0 / (SELECT COUNT(*) FROM bond)) AS percentage FROM bond WHERE (atom_id1_element, atom_id2_element) IN (SELECT atom_id1_element, atom_id2_element FROM (SELECT atom_id1_element, atom_id2_element, COUNT(*) AS cnt FROM (SELECT a1.element AS atom_id1_element, a2.element AS atom_id2_element FROM connected AS c INNER JOIN atom AS a1 ON c.atom_id = a1.atom_id INNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id) GROUP BY atom_id1_element, atom_id2_element ORDER BY cnt DESC LIMIT 1))",
        "SELECT (COUNT(T1.bond_id) * 100.0 / MAX(combination_count)) AS percentage_bonds, combination_elements FROM (SELECT COUNT(T2.atom_id) AS combination_count, GROUP_CONCAT(DISTINCT T2.element) AS combination_elements, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id GROUP BY T1.bond_id) AS subquery GROUP BY combination_elements ORDER BY percentage_bonds DESC LIMIT 1",
        "SELECT CAST(COUNT(T1.bond_id) AS REAL) * 100 / (SELECT COUNT(T2.bond_id) FROM bond AS T2 JOIN connected AS C ON T2.bond_id = C.bond_id GROUP BY C.atom_id ORDER BY COUNT(C.atom_id) DESC LIMIT 1) FROM bond AS T1",
        "SELECT (COUNT(T2.bond_id) * 100.0 / (SELECT COUNT(*) FROM bond)) AS percentage FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id GROUP BY T3.element ORDER BY COUNT(T3.element) DESC LIMIT 1",
        "SELECT (COUNT(T1.bond_id) * 100.0 / (SELECT COUNT(*) FROM bond)) AS percentage FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id GROUP BY T3.element HAVING COUNT(T3.atom_id) = (SELECT MAX(atom_count) FROM (SELECT COUNT(*) AS atom_count FROM connected AS T4 INNER JOIN atom AS T5 ON T4.atom_id = T5.atom_id OR T4.atom_id2 = T5.atom_id GROUP BY T5.element))"
    ],
    "748": [
        "SELECT C.colour FROM superhero AS S JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.id = 75",
        "SELECT C.colour FROM superhero AS S JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.id = 75",
        "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75"
    ],
    "643": [
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT DisplayName, Age FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)"
    ],
    "1130": [
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'",
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'",
        "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'",
        "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'",
        "SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'",
        "SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Safe'"
    ],
    "847": [
        "SELECT D.surname FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 19 AND Q.q2 IS NOT NULL ORDER BY Q.q2 ASC LIMIT 1",
        "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 19 ORDER BY qualifying.q2 LIMIT 1",
        "SELECT D.surname FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 19 AND Q.q2 IS NOT NULL ORDER BY Q.q2 ASC LIMIT 1",
        "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 IS NOT NULL ORDER BY T2.q2 ASC LIMIT 1",
        "SELECT D.surname FROM qualifying Q JOIN drivers D ON Q.driverId = D.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(Q2.q2) FROM qualifying Q2 WHERE Q2.raceId = 19)",
        "SELECT T2.surname  FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 19  ORDER BY T1.q2  LIMIT 1"
    ],
    "434": [
        "SELECT COUNT(DISTINCT S.code) FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE T.language = 'Japanese' AND (S.mtgoCode IS NULL OR S.mtgoCode = '')",
        "SELECT COUNT(*) FROM sets WHERE (mtgoCode IS NULL OR mtgoCode = '') AND code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')",
        "SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese') AND (mtgoCode IS NULL OR mtgoCode = '')",
        "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "SELECT COUNT(*) FROM set_translations T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese' AND (T2.mtgoCode IS NULL OR T2.mtgoCode = '')",
        "SELECT COUNT(DISTINCT sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese' AND (sets.mtgoCode IS NULL OR sets.mtgoCode = '')"
    ],
    "599": [
        "SELECT DISTINCT postHistory.PostHistoryTypeId, COUNT(DISTINCT comments.UserId) FROM postHistory LEFT JOIN comments ON postHistory.PostId = comments.PostId WHERE postHistory.PostId = 3720 GROUP BY postHistory.PostHistoryTypeId",
        "SELECT DISTINCT postHistory.PostHistoryTypeId, (SELECT COUNT(DISTINCT comments.UserId) FROM comments WHERE comments.PostId = 3720) FROM postHistory WHERE postHistory.PostId = 3720",
        "SELECT DISTINCT postHistory.PostHistoryTypeId, COUNT(DISTINCT comments.UserId) FROM postHistory LEFT JOIN comments ON postHistory.PostId = comments.PostId WHERE postHistory.PostId = 3720 GROUP BY postHistory.PostHistoryTypeId",
        "SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId) FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T1.PostId = 3720",
        "SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId) FROM postHistory T1 JOIN comments T2 ON T1.PostId = T2.PostId WHERE T1.PostId = 3720 GROUP BY T1.PostHistoryTypeId",
        "SELECT DISTINCT PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) as UniqueCommentUsers FROM postHistory WHERE PostId = 3720"
    ],
    "1390": [
        "SELECT (SUM(expense.cost) / (SELECT SUM(cost) FROM expense) * 100) AS percentage FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'",
        "SELECT (SUM(expense.cost) * 100.0 / (SELECT SUM(cost) FROM expense)) AS percentage FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'",
        "SELECT (SUM(expense.cost) * 100.0 / (SELECT SUM(expense.cost) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Yearly Kickoff')) AS percentage FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Yearly Kickoff'",
        "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.spent ELSE 0 END) AS REAL) * 100 / CAST(SUM(T2.spent) AS REAL) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "SELECT (SUM(T2.cost) * 100.0 / (SELECT SUM(T3.cost) FROM expense T3 JOIN event T4 ON T3.link_to_budget = T4.event_id)) AS percentage FROM expense T2 JOIN event T1 ON T2.link_to_budget = T1.event_id WHERE T1.event_name = 'Yearly Kickoff'",
        "SELECT (SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) * 100.0 / SUM(T2.cost)) AS percentage  FROM event AS T1  INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget"
    ],
    "323": [
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR000'"
    ],
    "564": [
        "SELECT comments.Text FROM comments WHERE comments.PostId = (SELECT Id FROM posts WHERE ParentId = 107829) LIMIT 1",
        "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.ParentId = 107829 LIMIT 1",
        "SELECT Text FROM comments WHERE PostId = 107829 LIMIT 1",
        "SELECT Text FROM comments WHERE PostId = 107829 LIMIT 1",
        "SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1 LIMIT 1",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ParentId = 107829 AND T2.CommentCount = 1"
    ],
    "1154": [
        "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109",
        "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109",
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = 163109",
        "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
        "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE P.ID = 163109"
    ],
    "931": [
        "SELECT MAX(R.fastestLapSpeed) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.year = 2009 AND RA.name = 'Spanish Grand Prix'",
        "SELECT MAX(R.fastestLapSpeed) FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.name = 'Spanish Grand Prix' AND R2.year = 2009",
        "SELECT MAX(RS.fastestLapSpeed) FROM results AS RS INNER JOIN races AS R ON RS.raceId = R.raceId WHERE R.name = 'Spanish Grand Prix' AND R.year = 2009",
        "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
        "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T1.fastestLapSpeed IS NOT NULL AND T2.year = 2009",
        "SELECT MAX(T1.fastestLapSpeed)  FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009"
    ],
    "1413": [
        "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
        "SELECT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
        "SELECT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50",
        "SELECT T2.zip FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost < 50",
        "SELECT M.zip FROM expense AS E JOIN member AS M ON E.link_to_member = M.member_id WHERE E.cost < 50",
        "SELECT DISTINCT M.zip FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE E.cost < 50"
    ],
    "111": [
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND STRFTIME('%Y', account.date) = '1996'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND T1.date BETWEEN '1996-01-01' AND '1996-12-31'",
        "SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND STRFTIME('%Y', date) = '1996'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND strftime('%Y', T1.date) = '96'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND T1.date LIKE '96%'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND T1.date LIKE '1996%'"
    ],
    "991": [
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'Austrian' AND STRFTIME('%Y', T1.dob) BETWEEN '1981' AND '1991'",
        "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "SELECT forename || ' ' || surname AS full_name, dob AS date_of_birth FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND STRFTIME('%Y', drivers.dob) BETWEEN '1981' AND '1991'",
        "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND substr(dob, 1, 4) BETWEEN '1981' AND '1991'",
        "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'"
    ],
    "760": [
        "SELECT (SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "SELECT (CAST(SUM(T2.id = 13) AS FLOAT) / COUNT(T1.id) * 100) AS percentage FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "SELECT (COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "SELECT CAST(SUM(CASE WHEN T3.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "SELECT (SELECT COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180 AND T2.publisher_name = 'Marvel Comics') * 100.0 / COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "SELECT (COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180"
    ],
    "1252": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(P.ID) AS how_many_patients, COUNT(E.Symptoms) AS how_many_symptoms FROM Patient P JOIN Laboratory L ON P.ID = L.ID LEFT JOIN Examination E ON P.ID = E.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON E.ID = P.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.IGG > 900 AND T1.IGG < 2000 AND T2.Symptoms IS NOT NULL",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Laboratory AS T1  INNER JOIN Patient AS T2 ON T1.ID = T2.ID  WHERE T1.IGG > 900 AND T1.IGG < 2000 AND T2.Symptoms IS NOT NULL"
    ],
    "405": [
        "SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
        "SELECT COUNT(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
        "SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
        "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brazil)'",
        "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brazil)'"
    ],
    "1019": [
        "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "SELECT AVG(T2.milliseconds) FROM lapTimes AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "SELECT AVG(T2.milliseconds) AS average_lap_time FROM lapTimes AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId INNER JOIN circuits AS C ON T1.circuitId = C.circuitId WHERE C.country = 'Italy'",
        "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "SELECT AVG(T2.milliseconds) FROM circuits AS T1 JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T1.country = 'Italy'",
        "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN circuits AS T2 ON T1.raceId = T2.circuitId WHERE T2.country = 'Italy'"
    ],
    "151": [
        "SELECT DISTINCT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
        "SELECT DISTINCT district.A2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
        "SELECT DISTINCT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
        "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
        "SELECT DISTINCT D.A2 FROM district AS D JOIN account AS A ON D.district_id = A.district_id JOIN trans AS T ON A.account_id = T.account_id WHERE T.type = 'VYDAJ'",
        "SELECT DISTINCT T3.A2 FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T2.type = 'VYDAJ'"
    ],
    "1506": [
        "SELECT DISTINCT P.Description FROM transactions_1k AS T JOIN gasstations AS G ON T.GasStationID = G.GasStationID JOIN products AS P ON T.ProductID = P.ProductID WHERE G.Country = 'CZE'",
        "SELECT P.Description FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID INNER JOIN products AS P ON T.ProductID = P.ProductID WHERE G.Country = 'CZE'",
        "SELECT DISTINCT P.Description FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID INNER JOIN products AS P ON T.ProductID = P.ProductID WHERE G.Country = 'CZE'",
        "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "SELECT T3.Description FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "SELECT DISTINCT P.Description  FROM gasstations AS G  INNER JOIN transactions_1k AS T ON G.GasStationID = T.GasStationID  INNER JOIN products AS P ON T.ProductID = P.ProductID  WHERE G.Country = 'CZE'"
    ],
    "587": [
        "SELECT AVG(posts.ViewCount) AS 'the average view count', posts.Title AS 'the title', postHistory.Comment AS 'the comment' FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%' WHERE tags.TagName = 'humor' GROUP BY posts.Id",
        "SELECT AVG(posts.ViewCount) AS 'the average view count', posts.Title AS 'the title', postHistory.Comment AS 'the comment' FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%' WHERE tags.TagName = 'humor' GROUP BY posts.Id",
        "SELECT AVG(posts.ViewCount) AS average_view_count, posts.Title, posts.Body AS comment FROM posts INNER JOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%' WHERE tags.TagName = 'humor' GROUP BY posts.Id",
        "SELECT CAST(AVG(T1.ViewCount) AS FLOAT), T1.Title, T2.Text FROM posts AS T1 INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId INNER JOIN tags AS T4 ON T3.PostId = T4.ExcerptPostId INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T4.TagName = '<humor>' GROUP BY T1.Id",
        "SELECT posts.Title, comments.Text FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId JOIN comments ON posts.Id = comments.PostId WHERE tags.TagName = 'humor' GROUP BY posts.Id",
        "SELECT T1.Title, T2.Text, AVG(T1.ViewCount) as AverageViewCount  FROM posts AS T1  INNER JOIN comments AS T2 ON T1.Id = T2.PostId  INNER JOIN tags AS T3 ON T1.Id = T3.ExcerptPostId  WHERE T3.TagName = 'humor'  GROUP BY T1.Title, T2.Text"
    ],
    "1377": [
        "SELECT COUNT(*) FROM member WHERE position = 'President'",
        "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
        "SELECT COUNT(member.member_id) FROM member WHERE member.position = 'President'",
        "SELECT COUNT(position) FROM member WHERE position = 'President'",
        "SELECT COUNT(*) FROM member WHERE position = 'President'",
        "SELECT COUNT(*) FROM member WHERE position = 'President'"
    ],
    "1337": [
        "SELECT SUM(T1.amount) FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'",
        "SELECT SUM(amount) FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'",
        "SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker'",
        "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'",
        "SELECT SUM(T1.amount) FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'",
        "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'"
    ],
    "619": [
        "SELECT COUNT(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65",
        "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE B.Name = 'Supporter' AND U.Age BETWEEN 19 AND 65",
        "SELECT COUNT(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65",
        "SELECT COUNT(badges.UserId) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Age BETWEEN 19 AND 65 AND badges.Name = 'Supporter'",
        "SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age BETWEEN 19 AND 65",
        "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE B.Name = 'Supporter' AND U.Age BETWEEN 19 AND 65"
    ],
    "766": [
        "SELECT superhero.full_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength')",
        "SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
        "SELECT S.full_name FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Strength' AND HA.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength')",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') ORDER BY T2.attribute_value DESC LIMIT 1",
        "SELECT T3.full_name FROM hero_attribute T1 JOIN attribute T2 ON T1.attribute_id = T2.id JOIN superhero T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Strength' ORDER BY T1.attribute_value DESC LIMIT 1",
        "SELECT T2.full_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))"
    ],
    "1515": [
        "SELECT customers.Segment FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00'",
        "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'",
        "SELECT customers.Segment FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00'",
        "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23'",
        "SELECT C.Segment FROM transactions_1k AS T1 JOIN customers AS C ON T1.CustomerID = C.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "SELECT T2.Segment  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-23'"
    ],
    "951": [
        "SELECT COUNT(DISTINCT C.constructorId) FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE C.nationality = 'Japanese' AND CS.points = 0 GROUP BY C.constructorId HAVING COUNT(CS.raceId) = 2",
        "SELECT COUNT(DISTINCT T1.constructorId) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2",
        "SELECT COUNT(C.constructorId) FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE C.nationality = 'Japanese' AND CS.points = 0 GROUP BY C.constructorId HAVING COUNT(DISTINCT CS.raceId) = 2",
        "SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2",
        "SELECT COUNT(DISTINCT T1.constructorId) FROM constructors T1 JOIN constructorStandings T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2",
        "SELECT COUNT(DISTINCT T1.constructorId)  FROM results AS T1  INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.nationality = 'Japanese' AND T1.points = 0  GROUP BY T1.constructorId  HAVING COUNT(T1.raceId) = 2"
    ],
    "158": [
        "SELECT a.district_id FROM account AS a JOIN order AS o ON a.account_id = o.account_id WHERE o.order_id = 33333",
        "SELECT account.district_id FROM account JOIN `order` ON account.account_id = `order`.account_id WHERE `order`.order_id = 33333",
        "SELECT A.district_id FROM account AS A INNER JOIN `order` AS O ON A.account_id = O.account_id WHERE O.order_id = 33333",
        "SELECT T1.district_id FROM account AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333",
        "SELECT T1.district_id FROM account AS T1 JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333",
        "SELECT a.district_id  FROM account AS a  INNER JOIN order AS o ON a.account_id = o.account_id  WHERE o.order_id = 33333"
    ],
    "1401": [
        "SELECT cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Posters' AND T3.event_name = 'September Speaker'",
        "SELECT e.cost FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE e.expense_description = 'Posters' AND ev.event_name = 'September Speaker'",
        "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_name = 'September Speaker'",
        "SELECT T2.spent FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Posters' AND T3.event_name = 'September Speaker'",
        "SELECT T1.cost FROM expense T1 JOIN budget T2 ON T1.link_to_budget = T2.budget_id JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Posters' AND T3.event_name = 'September Speaker'",
        "SELECT expense.cost  FROM expense  INNER JOIN budget ON expense.link_to_budget = budget.budget_id  INNER JOIN event ON budget.link_to_event = event.event_id  WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'"
    ],
    "109": [
        "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "SELECT COUNT(*) FROM client INNER JOIN account ON client.client_id = disp.client_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.A2 = 'Jesenik'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.district_id IN (SELECT district_id FROM district WHERE A2 = 'Jesenik')",
        "SELECT COUNT(DISTINCT C.client_id) FROM client C JOIN account A ON C.client_id = A.account_id JOIN district D ON A.district_id = D.district_id WHERE C.gender = 'F' AND D.A2 = 'Jesenik'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Jesenik' AND T1.gender = 'F'"
    ],
    "167": [
        "SELECT DISTINCT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "SELECT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "SELECT DISTINCT c.client_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN card AS ca ON d.account_id = ca.disp_id WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01'",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
        "SELECT DISTINCT C.client_id FROM client AS C JOIN disp AS D ON C.client_id = D.client_id JOIN card AS CA ON D.disp_id = CA.disp_id WHERE CA.type = 'junior' AND CA.issued >= '1997-01-01'",
        "SELECT DISTINCT T2.client_id  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'"
    ],
    "502": [
        "SELECT sets.releaseDate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío'",
        "SELECT s.releaseDate FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.translation = 'Ola de frío'",
        "SELECT S.releaseDate FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Ola de frío'",
        "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'",
        "SELECT sets.releaseDate FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Ola de frío'",
        "SELECT S.releaseDate FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Ola de frío'"
    ],
    "937": [
        "SELECT T1.time, T2.forename || ' ' || T2.surname AS driver FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Chinese Grand Prix' AND T3.year = 2008 AND T1.positionOrder = 2",
        "SELECT results.time, drivers.forename || ' ' || drivers.surname AS driver FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE results.position = 2 AND races.name = 'Chinese Grand Prix' AND races.year = 2008",
        "SELECT T1.time, T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.positionOrder = 2 AND T3.name = 'Chinese Grand Prix' AND T3.year = 2008",
        "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T1.position = 2 AND T2.name = 'Chinese Grand Prix' AND T3.year = 2008",
        "SELECT R.time FROM races AS R JOIN results AS Res ON R.raceId = Res.raceId WHERE R.name = 'Chinese Grand Prix' AND R.year = 2008 AND Res.position = 2",
        "SELECT results.time  FROM results  INNER JOIN races ON results.raceId = races.raceId  WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.position = 2"
    ],
    "975": [
        "SELECT Ra.year, MAX(T1.lapTimes) FROM lapTimes AS T1 INNER JOIN races AS Ra ON T1.raceId = Ra.raceId GROUP BY Ra.year ORDER BY MAX(T1.lapTimes) ASC LIMIT 1",
        "SELECT R.year, MAX(LAP.milliseconds) AS lowest_lap_time FROM results R JOIN lapTimes LAP ON R.raceId = LAP.raceId GROUP BY R.year ORDER BY lowest_lap_time ASC LIMIT 1",
        "SELECT R.year, MAX(L.time) FROM races AS R JOIN lapTimes AS L ON R.raceId = L.raceId ORDER BY L.time DESC LIMIT 1",
        "SELECT R.year FROM lapTimes AS L INNER JOIN results AS R ON L.raceId = R.raceId ORDER BY L.time ASC LIMIT 1",
        "SELECT T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapSpeed IS NOT NULL ORDER BY T1.fastestLapSpeed ASC LIMIT 1",
        "SELECT T2.year FROM races AS T2 INNER JOIN lapTimes AS T1 ON T1.raceId = T2.raceId GROUP BY T2.year ORDER BY MAX(T1.time) ASC LIMIT 1"
    ],
    "946": [
        "SELECT C.lat, C.lng FROM circuits AS C WHERE C.country = 'USA'",
        "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "SELECT lat, lng FROM circuits",
        "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "SELECT lat, lng FROM circuits WHERE country = 'USA'"
    ],
    "1017": [
        "SELECT C.lat, C.lng FROM circuits C INNER JOIN results R ON C.circuitId = R.raceId WHERE R.fastestLapTime = '1:29.488'",
        "SELECT C.lat, C.lng FROM circuits C INNER JOIN races R ON C.circuitId = R.circuitId INNER JOIN results Res ON R.raceId = Res.raceId WHERE Res.fastestLapTime = '1:29.488'",
        "SELECT C.lat, C.lng FROM circuits AS C INNER JOIN lapTimes AS L ON C.circuitId = L.circuitId WHERE L.time = '1:29.488'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T3 ON T1.circuitId = T3.circuitId INNER JOIN lapTimes AS T2 ON T3.raceId = T2.raceId WHERE T2.time = '1:29.488'",
        "SELECT C.lat, C.lng FROM results AS R JOIN races AS RA ON R.raceId = RA.raceId JOIN circuits AS C ON RA.circuitId = C.circuitId WHERE R.fastestLapTime = '1:29.488'",
        "SELECT T1.lat, T1.lng  FROM circuits AS T1  INNER JOIN results AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.time = '1:29.488'"
    ],
    "218": [
        "SELECT (1 - (COUNT(DISTINCT a.molecule_id) * 1.0 / COUNT(DISTINCT m.molecule_id))) * 100 AS percentage_without_fluorine FROM molecule AS m LEFT JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element <> 'f'",
        "SELECT (100.0 * COUNT(DISTINCT m.molecule_id) - COUNT(DISTINCT a.molecule_id)) / COUNT(DISTINCT m.molecule_id) AS percentage FROM molecule AS m LEFT JOIN atom AS a ON m.molecule_id = a.molecule_id AND a.element = 'f' WHERE m.label = '+'",
        "SELECT 100 * (COUNT(DISTINCT T1.molecule_id) - COUNT(DISTINCT CASE WHEN T2.element = 'f' THEN T1.molecule_id END)) / COUNT(DISTINCT T1.molecule_id) AS percentage_non_fluorine_carcinogenic FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "###SQL: SELECT CAST(100 * COUNT(DISTINCT T1.molecule_id) AS REAL) / (SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 WHERE T1.label = '+') FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id AND T2.element = 'f' WHERE T1.label = '+' AND T2.element IS NULL",
        "SELECT (COUNT(DISTINCT T3.molecule_id) - SUM(CASE WHEN T1.element = 'f' THEN 1 ELSE 0 END)) * 100.0 / COUNT(DISTINCT T3.molecule_id) AS percentage_non_fluorine FROM atom T1 JOIN molecule T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+'",
        "SELECT (1 - (SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'f' AND T2.label = '+') * 1.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+')) * 100 AS percentage"
    ],
    "1290": [
        "SELECT E.`Examination Date` FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.ALB = (SELECT MAX(L2.ALB) FROM Laboratory AS L2 WHERE L2.ALB > 3.5 AND L2.ALB < 5.5)",
        "SELECT E.`Examination Date` FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID WHERE L.ALB > 3.5 AND L.ALB < 5.5 ORDER BY L.ALB DESC LIMIT 1",
        "SELECT E.`Examination Date` FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)",
        "SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)",
        "SELECT T2.`Examination Date` FROM Laboratory AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5) LIMIT 1",
        "SELECT E.Date  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)"
    ],
    "372": [
        "SELECT COUNT(id) FROM cards WHERE toughness = '99'",
        "SELECT COUNT(id) FROM cards WHERE toughness = '99'",
        "SELECT COUNT(*) FROM cards WHERE toughness = '99'",
        "SELECT COUNT(toughness) FROM cards WHERE toughness = '99'",
        "SELECT COUNT(*) FROM cards WHERE toughness = '99'",
        "SELECT COUNT(*) FROM cards WHERE toughness = '99'"
    ],
    "657": [
        "SELECT users.DisplayName, users.WebsiteUrl FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)",
        "SELECT users.DisplayName, users.WebsiteUrl FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)",
        "SELECT U.DisplayName, U.WebsiteUrl FROM votes AS V INNER JOIN users AS U ON V.UserId = U.Id WHERE V.VoteTypeId = 8 AND V.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)",
        "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.VoteTypeId = 8 AND T2.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)",
        "SELECT U.DisplayName, U.WebsiteUrl FROM votes V JOIN users U ON V.UserId = U.Id WHERE V.VoteTypeId = 8 ORDER BY V.BountyAmount DESC LIMIT 1",
        "SELECT U.DisplayName, U.WebsiteUrl  FROM users AS U  INNER JOIN votes AS V ON U.Id = V.UserId  WHERE V.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8) AND V.VoteTypeId = 8"
    ],
    "414": [
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica'",
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica'",
        "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180",
        "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica'",
        "SELECT ST.language FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.block = 'Ravnica' AND S.baseSetSize = 180",
        "SELECT DISTINCT ST.language  FROM sets AS S  INNER JOIN set_translations AS ST ON S.code = ST.setCode  WHERE S.baseSetSize = 180 AND S.block = 'Ravnica'"
    ],
    "124": [
        "SELECT T1.loan_id, T3.A2 AS district, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60",
        "SELECT T1.loan_id, T3.A2 AS district, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60",
        "SELECT loan.loan_id, district.A3 AS district, district.A11 AS average_salary FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60",
        "SELECT T1.loan_id, T2.district_id, T3.A11 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 24",
        "SELECT loan.loan_id, district.A2, district.A11 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60",
        "SELECT T1.loan_id, T2.A2 AS district, T2.A11 AS average_salary  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.duration = 60"
    ],
    "529": [
        "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')",
        "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')",
        "SELECT S.name FROM sets AS S LEFT JOIN set_translations AS ST_JP ON S.code = ST_JP.setCode AND ST_JP.language = 'Japanese' LEFT JOIN set_translations AS ST_KR ON S.code = ST_KR.setCode AND ST_KR.language = 'Korean' WHERE ST_JP.setCode IS NULL AND ST_KR.setCode IS NOT NULL",
        "###SQL: SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' AND T1.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')",
        "SELECT DISTINCT S.name FROM sets S LEFT JOIN set_translations ST ON S.code = ST.setCode WHERE ST.language = 'Korean' AND S.code NOT IN (SELECT ST2.setCode FROM set_translations ST2 WHERE ST2.language LIKE '%Japanese%')",
        "SELECT DISTINCT S.name  FROM sets AS S  INNER JOIN set_translations AS ST ON S.code = ST.setCode  WHERE ST.language = 'Korean'  AND S.code NOT IN (SELECT setCode FROM set_translations WHERE language LIKE '%Japanese%')"
    ],
    "1372": [
        "SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
        "SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
        "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
        "SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'",
        "SELECT T2.date_received FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
        "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'"
    ],
    "828": [
        "SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.attribute_value = 100 AND T2.attribute_name = 'Speed'",
        "SELECT COUNT(*) FROM hero_attribute AS HA INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE HA.attribute_value = 100 AND A.attribute_name = 'Speed'",
        "SELECT COUNT(DISTINCT hero_attribute.hero_id) AS fastest_superheroes FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
        "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.attribute_value > 90 AND T2.attribute_name = 'Speed'",
        "SELECT COUNT(*) FROM hero_attribute AS T1 JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
        "SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100"
    ],
    "140": [
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek'",
        "SELECT COUNT(A1.account_id) FROM account AS A1 INNER JOIN district AS A2 ON A1.district_id = A2.district_id WHERE A2.A2 = 'Pisek'",
        "SELECT COUNT(T1.account_id) FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'"
    ],
    "198": [
        "SELECT AVG(carcinogenic_count) FROM (SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_count FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY m.molecule_id)",
        "SELECT AVG(single_bond_count) FROM (SELECT COUNT(*) AS single_bond_count FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = '+' AND b.bond_type = '-' GROUP BY b.molecule_id)",
        "SELECT AVG(single_bond_count) FROM (SELECT COUNT(bond.bond_type) AS single_bond_count FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '-' GROUP BY bond.molecule_id)",
        "SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+'",
        "SELECT CAST(SUM(bond.bond_type = '-') AS FLOAT) / COUNT(DISTINCT molecule.molecule_id) AS average_single_bonded_carMolecules FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
        "SELECT AVG(single_bond_count) FROM (SELECT COUNT(bond.bond_id) AS single_bond_count FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '-' GROUP BY bond.molecule_id)"
    ],
    "107": [
        "SELECT client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = (SELECT MIN(birth_date) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A11 = (SELECT MAX(A11) FROM district)) LIMIT 1",
        "SELECT gender FROM client WHERE client_id = (SELECT client_id FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.A11 DESC, client.birth_date ASC LIMIT 1)",
        "SELECT c.gender, c.birth_date FROM client c INNER JOIN account a ON c.client_id = (SELECT client_id FROM disp d WHERE d.account_id = a.account_id) INNER JOIN district d ON a.district_id = d.district_id WHERE d.A11 = (SELECT MAX(A11) FROM district) ORDER BY c.birth_date ASC LIMIT 1",
        "SELECT T1.gender FROM client AS T1 WHERE T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1))",
        "SELECT client.gender FROM client INNER JOIN account ON client.client_id = account.district_id WHERE account.district_id = (SELECT district.district_id FROM district ORDER BY district.A11 DESC LIMIT 1) ORDER BY client.birth_date LIMIT 1",
        "SELECT T1.gender  FROM client AS T1  INNER JOIN account AS T2 ON T1.client_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T3.A11 = (SELECT MAX(A11) FROM district)  ORDER BY T1.birth_date  LIMIT 1"
    ],
    "1465": [
        "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
        "SELECT b.category FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters'",
        "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
        "###SQL: SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Posters'",
        "SELECT T2.category FROM expense AS T1 JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
        "SELECT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'"
    ],
    "1134": [
        "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS difference",
        "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS difference",
        "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS difference",
        "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 148337) - (SELECT jumping FROM Player_Attributes WHERE id = 167165) AS difference",
        "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_score_difference",
        "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS score_difference"
    ],
    "415": [
        "SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage FROM cards T1 JOIN legalities T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT (COUNT(CASE WHEN cards.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal'",
        "SELECT CAST(COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM cards AS T1  INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE T2.format = 'commander' AND T2.status = 'legal'"
    ],
    "240": [
        "SELECT element FROM atom WHERE molecule_id = 'TR004' ORDER BY element",
        "SELECT element FROM atom WHERE molecule_id = 'TR004'",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004'",
        "SELECT element FROM atom WHERE molecule_id = 'TR004'",
        "SELECT T1.element FROM atom T1 WHERE T1.molecule_id = 'TR004'",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004'"
    ],
    "1260": [
        "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 60",
        "SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 60",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 60",
        "SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 60",
        "SELECT T1.ID FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 60",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 60"
    ],
    "570": [
        "SELECT b.Name FROM badges b WHERE b.UserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms')",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms')",
        "SELECT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'"
    ],
    "41": [
        "SELECT s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Virtual = 'F' AND ss.AvgScrRead IN (SELECT AvgScrRead FROM satscores ss2 JOIN schools s2 ON ss2.cds = s2.CDSCode WHERE s2.Virtual = 'F' AND s2.County = s.County ORDER BY ss2.AvgScrRead DESC LIMIT 5) ORDER BY ss.AvgScrRead DESC",
        "SELECT s.sname FROM satscores ss INNER JOIN schools s ON ss.cds = s.CDSCode WHERE s.Virtual = 'F' AND ss.AvgScrRead IN (SELECT DISTINCT AvgScrRead FROM satscores ss2 INNER JOIN schools s2 ON ss2.cds = s2.CDSCode WHERE s2.Virtual = 'F' ORDER BY ss2.AvgScrRead DESC LIMIT 5) ORDER BY s.cname",
        "SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T1.County IN (SELECT T3.County FROM satscores AS T3 WHERE T3.AvgScrRead IS NOT NULL GROUP BY T3.County ORDER BY AVG(T3.AvgScrRead) DESC LIMIT 5) ORDER BY T2.AvgScrRead DESC",
        "WITH RankedSchools AS (SELECT s.School, st.AvgScrRead, s.County, ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY st.AvgScrRead DESC) AS rank FROM schools AS s INNER JOIN satscores AS st ON s.CDSCode = st.cds WHERE s.Virtual = 'F') SELECT School FROM RankedSchools WHERE rank <= 5",
        "WITH RankedSchools AS (SELECT T1.School AS SchoolName, T2.cname AS CountyName, T2.AvgScrRead, ROW_NUMBER() OVER (PARTITION BY T2.cname ORDER BY T2.AvgScrRead DESC) AS Rank FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F') SELECT SchoolName FROM RankedSchools WHERE Rank <= 5",
        "SELECT T2.School, T2.County  FROM (     SELECT T1.sname, T1.cname, T1.AvgScrRead,             ROW_NUMBER() OVER (PARTITION BY T1.cname ORDER BY T1.AvgScrRead DESC) AS Rank     FROM schools AS T1     INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds     WHERE T1.Virtual = 'F' ) AS T3 WHERE T3.Rank <= 5"
    ],
    "650": [
        "SELECT U.LastAccessDate, U.Location FROM users AS U JOIN badges AS B ON U.Id = B.UserId WHERE B.Name = 'outliers'",
        "SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'outliers'",
        "SELECT users.LastAccessDate, users.Location FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'outliers'",
        "SELECT T1.LastAccessDate, T2.Location FROM users AS T2 INNER JOIN badges AS T1 ON T2.Id = T1.UserId WHERE T1.Name = 'outliers'",
        "SELECT T2.LastAccessDate, T2.Location FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Outliers'",
        "SELECT U.LastAccessDate, U.Location  FROM badges AS B  INNER JOIN users AS U ON B.UserId = U.Id  WHERE B.Name = 'Outliers'"
    ],
    "817": [
        "SELECT T1.race FROM superhero T1 JOIN colour T2 ON T1.hair_colour_id = T2.id JOIN gender T3 ON T1.gender_id = T3.id WHERE T2.colour = 'Blue' AND T3.gender = 'Male'",
        "SELECT T2.race FROM superhero AS T1 JOIN colour AS T3 ON T1.hair_colour_id = T3.id JOIN gender AS T4 ON T1.gender_id = T4.id JOIN race AS T2 ON T1.race_id = T2.id WHERE T3.colour = 'blue' AND T4.gender = 'Male'",
        "SELECT race.race FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'Male'",
        "SELECT T1.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.colour = 'Blue' AND T3.gender = 'Male'",
        "SELECT T3.race FROM superhero AS T1 JOIN colour AS T2 ON T1.hair_colour_id = T2.id JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.colour = 'blue' AND T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male')",
        "SELECT T3.race FROM superhero AS T1  INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id  INNER JOIN race AS T3 ON T1.race_id = T3.id  WHERE T2.colour = 'blue' AND T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male')"
    ],
    "1459": [
        "SELECT MA.major_name, MA.department FROM member AS M JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'",
        "SELECT MA.major_name, MA.department FROM member AS M JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'",
        "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "SELECT T1.major_name, T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Gerke'",
        "SELECT T2.major_name, T2.department FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "SELECT M.major_name, M.department FROM member AS R INNER JOIN major AS M ON R.link_to_major = M.major_id WHERE R.first_name = 'Garrett' AND R.last_name = 'Gerke'"
    ],
    "1005": [
        "SELECT T1.forename, T1.surname, MAX(T2.duration) AS longest_pit_stop FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.duration IS NOT NULL",
        "SELECT MAX(duration) FROM pitStops",
        "SELECT T1.duration, T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.duration DESC LIMIT 1",
        "SELECT MAX(duration) FROM pitStops",
        "SELECT MAX(duration) FROM pitStops WHERE duration IS NOT NULL",
        "SELECT MAX(duration) FROM pitStops"
    ],
    "373": [
        "SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd'",
        "SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd'",
        "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT id FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT name FROM cards WHERE artist = 'Aaron Boyd'"
    ],
    "876": [
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NULL",
        "SELECT COUNT(DISTINCT R.driverId) FROM results R INNER JOIN races RA ON R.raceId = RA.raceId WHERE R.time IS NULL AND RA.date = '2015-11-29'",
        "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NULL AND T2.date = '2015-11-29'",
        "SELECT COUNT(*) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.date = '2015-11-29' AND T1.time IS NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NULL"
    ],
    "934": [
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE R.grid = 4 AND RA.year = 1989 AND RA.name = 'Australian Grand Prix'",
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS T ON R.raceId = T.raceId WHERE R.grid = 4 AND T.name = 'Australian Grand Prix' AND T.year = 1989",
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RACE ON R.raceId = RACE.raceId WHERE RACE.year = 1989 AND RACE.name = 'Australian Grand Prix' AND R.grid = 4",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 0 AND T3.year = 1989 AND T3.name = 'Detroit Grand Prix'",
        "SELECT D.forename, D.surname FROM results AS R JOIN drivers AS D ON R.driverId = D.driverId JOIN races AS RA ON R.raceId = RA.raceId WHERE R.grid = 4 AND RA.name = 'Australian Grand Prix' AND RA.year = 1989",
        "SELECT drivers.forename, drivers.surname  FROM results  INNER JOIN races ON results.raceId = races.raceId  INNER JOIN drivers ON results.driverId = drivers.driverId  WHERE races.year = 1989 AND races.name = 'Australian Grand Prix' AND results.grid = 4"
    ],
    "701": [
        "SELECT (COUNT(p.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1))) AS percentage FROM posts p WHERE p.OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1) AND p.Score > 50",
        "SELECT (COUNT(CASE WHEN p.Score > 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT (COUNT(CASE WHEN p.Score > 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT CAST(COUNT(CASE WHEN T1.Score > 50 THEN 1 END) AS REAL) * 100 / CAST(COUNT(T1.Id) AS REAL) FROM stats_posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT (COUNT(T1.Id) * 100.0 / total_posts.total) AS percentage FROM posts T1 JOIN (SELECT COUNT(Id) AS total FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)) total_posts ON 1=1 WHERE T1.OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1) AND T1.Score > 50",
        "SELECT (COUNT(CASE WHEN T1.Score > 50 THEN 1 END) * 100.0 / COUNT(T1.Id)) AS percentage  FROM posts AS T1  WHERE T1.OwnerUserId = (SELECT MAX(T2.Reputation)                           FROM users AS T2                           ORDER BY T2.Reputation DESC                           LIMIT 1)"
    ],
    "1186": [
        "SELECT DISTINCT P.ID FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis LIKE '%Behcet%' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'",
        "SELECT P.ID FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis = 'BEHCET' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis LIKE '%Behcet%' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'",
        "SELECT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis LIKE '%Behcet%' AND strftime('%Y-%m-%d', E.`Examination Date`) >= '1997-01-01' AND strftime('%Y-%m-%d', E.`Examination Date`) < '1998-01-01'",
        "SELECT T1.ID FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.Diagnosis LIKE '%Behcet%' AND T2.`Examination Date` >= '1997-01-01' AND T2.`Examination Date` < '1998-01-01'",
        "SELECT P.ID  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE E.Diagnosis LIKE '%Behcet%'  AND E.`Examination Date` >= '1997-01-01'  AND E.`Examination Date` < '1998-01-01'"
    ],
    "1133": [
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01'",
        "SELECT COUNT(Player.player_name) FROM Player WHERE Player.player_name LIKE 'Aaron%' AND Player.birthday > '1990-01-01 00:00:00'",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'",
        "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01'"
    ],
    "598": [
        "SELECT (COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) * 100.0 / COUNT(Name)) - (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) * 100.0 / COUNT(Name)) AS percentage_difference FROM badges WHERE Name = 'Student'",
        "SELECT (COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) * 100.0 / COUNT(Name) - COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) * 100.0 / COUNT(Name)) AS percentage_difference FROM badges WHERE Name = 'Student'",
        "SELECT ( (COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) / COUNT(Name)) * 100 ) - ( (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) / COUNT(Name)) * 100 ) AS percentage_difference, 'student badges given' FROM badges WHERE Name = 'Student'",
        "SELECT (CAST(COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN Id END) AS REAL) * 100 / COUNT(Id) - CAST(COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN Id END) AS REAL) * 100 / COUNT(Id)) AS percentage_difference FROM badges WHERE badges.Name = 'Student'",
        "SELECT (SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM badges)) FROM badges WHERE Name = 'Student' AND strftime('%Y', Date) = '2010') - (SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM badges)) FROM badges WHERE Name = 'Student' AND strftime('%Y', Date) = '2011') AS percentage_difference",
        "SELECT      ((SUM(CASE WHEN STRFTIME('%Y', Date) = '2010' THEN 1 ELSE 0 END) * 100.0) / COUNT(Name) -      (SUM(CASE WHEN STRFTIME('%Y', Date) = '2011' THEN 1 ELSE 0 END) * 100.0) / COUNT(Name)) AS percentage_difference FROM badges  WHERE Name = 'Student'"
    ],
    "1452": [
        "SELECT AVG(cost) AS average_amount_paid, COUNT(DISTINCT expense.link_to_member) AS students FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'",
        "SELECT AVG(cost) AS 'average amount paid', COUNT(DISTINCT expense.link_to_member) AS 'students' FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'",
        "SELECT AVG(cost) AS 'average amount paid' FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
        "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
        "SELECT AVG(exp.cost) AS average_amount_paid FROM member AS M JOIN expense AS exp ON M.member_id = exp.link_to_member WHERE M.position != 'Member'",
        "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'"
    ],
    "282": [
        "SELECT ROUND(CAST(SUM(CASE WHEN A.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(A.element), 4) AS \"the ratio\", M.label AS \"Hydrogen elements\", 'TR006' AS \"molecule ID TR006\" FROM atom AS A JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.molecule_id = 'TR006'",
        "SELECT ROUND(CAST(SUM(CASE WHEN T.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T.element), 4) AS 'the ratio', molecule.label FROM atom AS T INNER JOIN molecule ON T.molecule_id = molecule.molecule_id WHERE T.molecule_id = 'TR006' GROUP BY molecule.label",
        "SELECT (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.element)) AS 'the ratio', m.label AS 'Hydrogen elements', m.molecule_id FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR006' GROUP BY m.label",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element) AS ratio, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(T1.element) AS ratio, T2.label FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' GROUP BY T2.label",
        "SELECT DIVIDE(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END), COUNT(T1.element)) AS ratio, T2.label  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.molecule_id = 'TR006'"
    ],
    "1306": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC >= 3.5 AND L.WBC <= 9.0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0"
    ],
    "900": [
        "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006",
        "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006",
        "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "SELECT T1.name, T1.location, T2.name FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "SELECT T1.name AS circuit_name, T1.location AS circuit_location, T2.name AS race_name  FROM circuits AS T1  INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.year = 2006 AND T1.country = 'USA'"
    ],
    "1175": [
        "SELECT (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.Birthday)) AS age, P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.HGB = (SELECT MAX(HGB) FROM Laboratory) LIMIT 1",
        "SELECT (strftime('%Y', `Examination Date`) - strftime('%Y', P.Birthday)) AS age, E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.HGB = (SELECT MAX(HGB) FROM Laboratory)",
        "SELECT (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.Birthday)) AS age, P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday IS NOT NULL ORDER BY E.HGB DESC LIMIT 1",
        "SELECT strftime('%Y', T1.`Examination Date`) - strftime('%Y', T2.Birthday) AS age, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID ORDER BY T3.HGB DESC LIMIT 1",
        "SELECT SUBSTR(strftime('%Y', `Examination Date`), 1, 4) - SUBSTR(strftime('%Y', Birthday), 1, 4) AS Age, Diagnosis FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE HGB = (SELECT MAX(HGB) FROM Laboratory) LIMIT 1",
        "SELECT (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.Birthday)) AS Age, P.Diagnosis  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  INNER JOIN Patient AS P ON E.ID = P.ID  WHERE L.HGB = (SELECT MAX(HGB) FROM Laboratory)"
    ],
    "1278": [
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG BETWEEN 901 AND 1999 AND T1.Admission = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND P.Admission = '+'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG BETWEEN 901 AND 1999 AND P.Admission = '+'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Admission = '+'",
        "SELECT COUNT(*) FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.IGG > 900 AND T1.IGG < 2000 AND T2.Admission = '+'",
        "SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.IGG > 900 AND L.IGG < 2000 AND P.Admission = '+'"
    ],
    "30": [
        "SELECT schools.City FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT schools.City FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT schools.City FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT T1.City, T2.\"Enrollment (K-12)\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.\"Enrollment (K-12)\" ASC LIMIT 5",
        "SELECT s.City FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode ORDER BY f.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT T2.City, SUM(T1.`Enrollment (K-12)`) AS total_enrollment  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  GROUP BY T2.City  ORDER BY total_enrollment ASC  LIMIT 5"
    ],
    "1383": [
        "SELECT T1.first_name || ' ' || T1.last_name AS name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "SELECT T1.first_name || ' ' || T1.last_name AS name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "SELECT first_name || ' ' || last_name AS name FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE Z.city = 'Georgetown' AND Z.state = 'South Carolina'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "SELECT DISTINCT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'"
    ],
    "377": [
        "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes <> 'Angel'",
        "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes <> 'Angel'",
        "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'",
        "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'"
    ],
    "1253": [
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 ORDER BY L.IGA DESC LIMIT 1",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 ORDER BY L.IGA DESC LIMIT 1",
        "SELECT Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)",
        "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA = (SELECT MAX(T3.IGA) FROM Laboratory AS T3 WHERE T3.IGA BETWEEN 80 AND 500)",
        "SELECT P.Diagnosis FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.IGA > 80 AND L.IGA < 500 ORDER BY L.IGA DESC LIMIT 1",
        "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)"
    ],
    "1068": [
        "SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', PA.date) BETWEEN '2010' AND '2015' AND P.height > 170",
        "SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', PA.date) BETWEEN '2010' AND '2015' AND P.height > 170",
        "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes AS t2 INNER JOIN Player AS t1 ON t2.player_api_id = t1.player_api_id WHERE strftime('%Y', t2.date) BETWEEN '2010' AND '2015' AND t1.height > 170",
        "SELECT CAST(SUM(T1.overall_rating) AS REAL) / COUNT(T1.id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) BETWEEN '2010' AND '2015' AND T2.height > 170",
        "SELECT AVG(t2.overall_rating) FROM Player_Attributes AS t2 JOIN Player AS t1 ON t2.player_api_id = t1.player_api_id WHERE strftime('%Y', t2.date) >= '2010' AND strftime('%Y', t2.date) <= '2015' AND t1.height > 170",
        "SELECT AVG(T2.overall_rating) FROM Player_Attributes AS T2 INNER JOIN Player AS T1 ON T2.player_api_id = T1.player_api_id WHERE STRFTIME('%Y', T2.date) BETWEEN '2010' AND '2015' AND T1.height > 170"
    ],
    "115": [
        "SELECT (COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) * 100.0 / COUNT(T1.client_id)) AS percentage_male_clients FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')",
        "SELECT (COUNT(CASE WHEN client.gender = 'M' THEN 1 END) * 100.0 / COUNT(client.client_id)) AS male_percentage FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'south Bohemia' AND district.A10 = (SELECT MAX(A10) FROM district WHERE A3 = 'south Bohemia')",
        "SELECT (COUNT(CASE WHEN client.gender = 'M' THEN 1 END) * 100.0 / COUNT(client.client_id)) AS male_percentage FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'south Bohemia'",
        "SELECT CAST(COUNT(CASE WHEN T1.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')",
        "SELECT (COUNT(CASE WHEN C.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage FROM district D JOIN client C ON D.district_id = C.district_id WHERE D.A3 = 'south Bohemia' AND D.A9 = (SELECT D2.A9 FROM district D2 WHERE D2.A3 = 'south Bohemia' ORDER BY D2.A9 DESC LIMIT 1)",
        "SELECT (COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')"
    ],
    "607": [
        "SELECT COUNT(*) FROM comments WHERE Score > 60",
        "SELECT COUNT(*) FROM comments WHERE Score > 60",
        "SELECT COUNT(*) FROM comments WHERE Score > 60",
        "SELECT COUNT(Score) FROM comments WHERE Score > 60",
        "SELECT COUNT(*) FROM comments WHERE Score > 60",
        "SELECT COUNT(*) FROM comments WHERE score > 60"
    ],
    "459": [
        "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "(SELECT id, convertedManaCost FROM cards WHERE name = 'Serra Angel') UNION (SELECT id, convertedManaCost FROM cards WHERE name = 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1"
    ],
    "889": [
        "SELECT T2.year FROM seasons AS T2 INNER JOIN races AS T1 ON T1.year = T2.year INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.name = 'Brands Hatch' AND T1.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "SELECT MAX(T1.year) FROM seasons AS T1 JOIN races AS T2 ON T1.year = T2.year JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Brands Hatch' AND T2.name = 'British Grand Prix'",
        "SELECT T2.year FROM races AS T1 INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T3.name = 'Brands Hatch' AND T1.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "SELECT MAX(T1.year) FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Brands Hatch' AND T2.name = 'British Grand Prix'",
        "SELECT MAX(races.year) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix'",
        "SELECT MAX(races.year)  FROM races  INNER JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix'"
    ],
    "672": [
        "SELECT COUNT(DISTINCT users.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Location = 'United Kingdom' AND posts.FavoriteCount >= 4",
        "SELECT COUNT(DISTINCT u.Id) FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4",
        "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4",
        "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN posts T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "SELECT COUNT(DISTINCT T1.Id)  FROM users AS T1  INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId  WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4"
    ],
    "976": [
        "SELECT L.driverId FROM lapTimes AS L INNER JOIN races AS R ON L.raceId = R.raceId WHERE L.lap = 1 ORDER BY L.milliseconds ASC LIMIT 5",
        "SELECT lapTimes.driverId FROM lapTimes INNER JOIN results ON lapTimes.raceId = results.raceId WHERE lapTimes.lap = 1 GROUP BY lapTimes.driverId ORDER BY MIN(lapTimes.time) ASC LIMIT 5",
        "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.milliseconds ASC LIMIT 5",
        "###SQL: SELECT T1.driverId FROM lapTimes AS T1 GROUP BY T1.driverId ORDER BY MIN(T1.time) ASC LIMIT 5",
        "SELECT T1.driverId FROM lapTimes AS T1 WHERE T1.lap = 1 ORDER BY T1.milliseconds ASC LIMIT 5",
        "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5"
    ],
    "939": [
        "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'British' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'",
        "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'British' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'",
        "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'British' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'",
        "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND T1.raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers T1 JOIN driverStandings T2 ON T1.driverId = T2.driverId JOIN races T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'British' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008",
        "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.nationality = 'British' AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'"
    ],
    "681": [
        "SELECT u.DisplayName FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND STRFTIME('%Y', p.CreaionDate) = '2011'",
        "SELECT u.DisplayName FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND STRFTIME('%Y', p.CreaionDate) = '2011'",
        "SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ViewCount > 20000 AND strftime('%Y', posts.CreaionDate) = '2011'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ViewCount > 0 AND strftime('%Y', posts.CreationDate) = '2011'",
        "SELECT u.DisplayName FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreaionDate) = '2011'",
        "SELECT DISTINCT users.DisplayName  FROM posts  INNER JOIN users ON posts.OwnerUserId = users.Id  WHERE posts.ViewCount > 20000 AND STRFTIME('%Y', posts.CreaionDate) = '2011'"
    ],
    "595": [
        "SELECT DISTINCT u.Id, u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount >= 1000 AND (SELECT COUNT(*) FROM postHistory ph WHERE ph.PostId = p.Id AND ph.UserId = u.Id) = 1",
        "SELECT DISTINCT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id IN (SELECT ph.PostId FROM postHistory ph GROUP BY ph.PostId HAVING COUNT(ph.Id) = 1) AND p.ViewCount >= 1000",
        "SELECT DISTINCT ph.UserId FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE ph.PostId IN (SELECT PostId FROM postHistory GROUP BY PostId HAVING COUNT(*) = 1) AND p.ViewCount >= 1000",
        "SELECT users.Id FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN postHistory ON posts.Id = postHistory.PostId WHERE posts.Views >= 1000 GROUP BY users.Id, postHistory.PostId HAVING COUNT(postHistory.Id) = 1",
        "SELECT T1.OwnerUserId FROM posts T1 JOIN postHistory T2 ON T1.Id = T2.PostId WHERE T1.ViewCount >= 1000 GROUP BY T1.OwnerUserId, T1.Id HAVING COUNT(T2.Id) = 1",
        "SELECT T1.OwnerUserId FROM posts AS T1 WHERE T1.Views >= 1000 GROUP BY T1.Id HAVING COUNT(T1.Id) = 1"
    ],
    "774": [
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "SELECT R.race FROM superhero AS S JOIN race AS R ON S.race_id = R.id WHERE S.superhero_name = 'A-Bomb'",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'"
    ],
    "705": [
        "SELECT U.Reputation, U.UpVotes FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'fine, you win :)'",
        "SELECT U.Reputation, U.UpVotes FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'fine, you win :)'",
        "SELECT u.Reputation, u.UpVotes FROM users AS u INNER JOIN comments AS c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)'",
        "SELECT T1.Reputation, T1.UpVotes FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'fine, you win :)'",
        "SELECT U.Reputation, U.UpVotes FROM comments AS C JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'fine, you win :)'",
        "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'"
    ],
    "135": [
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.balance < 0 AND trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.balance < 0 AND account.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM trans T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(DISTINCT T1.account_id)  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE' AND T1.balance < 0"
    ],
    "1504": [
        "SELECT AVG(Amount * Price) AS average_total_price FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "SELECT AVG(Amount * Price) AS average_total_price FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "SELECT AVG(Amount * Price) FROM transactions_1k WHERE Date LIKE '2012-01%'"
    ],
    "523": [
        "SELECT AVG(totalSetSize) AS annual_average_sets, (SELECT language FROM set_translations GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'",
        "SELECT AVG(set_count) AS annual_average_sets, common_language FROM (SELECT COUNT(*) AS set_count, MAX(language) AS common_language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY strftime('%Y', sets.releaseDate)) AS yearly_sets",
        "SELECT COUNT(*) / (strftime('%Y', '2015-12-31') - strftime('%Y', '2012-01-01') + 1) AS annual_average_number_of_sets, (SELECT language FROM foreign_data GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'",
        "SELECT CAST(COUNT(T1.id) AS REAL) / CAST((strftime('%Y', '2015-12-31') - strftime('%Y', '2012-01-01') + 1) AS REAL) AS annual_average_sets, (SELECT language FROM set_translations WHERE set_translations.setCode = T1.code GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1) AS common_language FROM sets AS T1 WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'",
        "SELECT COUNT(T1.id) / 4 AS average_sets, (SELECT T2.language FROM foreign_data T2 WHERE T2.uuid IN (SELECT T1.uuid FROM sets T1 WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31') GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1) AS common_language FROM sets T1 WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'",
        "SELECT AVG(sets_count) AS annual_average_sets, common_language  FROM (     SELECT STRFTIME('%Y', releaseDate) AS year, COUNT(id) AS sets_count      FROM sets      WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'      GROUP BY year ) AS yearly_counts, (     SELECT language, COUNT(language) AS language_count      FROM foreign_data      GROUP BY language      ORDER BY language_count DESC      LIMIT 1 ) AS common_lang"
    ],
    "1189": [
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.`ANA Pattern` = 'S' AND E.`aCL IgM` > (AVG(E.`aCL IgM`) OVER ()) * 1.2",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.`ANA Pattern` = 'S' AND E.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination)",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.`ANA Pattern` = 'S' AND E.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination)",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2 AND T2.`ANA Pattern` = 'S' AND T2.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2",
        "SELECT COUNT(*) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 2 AND E.`ANA Pattern` = 'S' AND L.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Laboratory)",
        "SELECT COUNT(*)  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE E.Thrombosis = 2  AND E.`ANA Pattern` = 'S'  AND L.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Laboratory)"
    ],
    "15": [
        "SELECT T1.dname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' ORDER BY T1.AvgScrRead DESC LIMIT 1",
        "SELECT schools.District FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' ORDER BY satscores.AvgScrRead DESC LIMIT 1",
        "SELECT T1.`District Name`, AVG(T2.AvgScrRead) AS average_reading_score FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' GROUP BY T1.`District Name` ORDER BY average_reading_score DESC LIMIT 1",
        "SELECT schools.District, satscores.AvgScrRead FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.StatusType = 'Active' ORDER BY satscores.AvgScrRead DESC LIMIT 1",
        "SELECT T1.`District Name` FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T2.CDSCode = T3.cds WHERE T2.StatusType = 'Active' ORDER BY T3.AvgScrRead DESC LIMIT 1",
        "SELECT T1.District, AVG(T2.AvgScrRead) AS AverageReadingScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' GROUP BY T1.District ORDER BY AverageReadingScore DESC LIMIT 1"
    ],
    "169": [
        "SELECT (SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) * 100.0 / SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS growth_rate, SUM(loan.amount) AS total_amount_loans FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M' AND (strftime('%Y', loan.date) = '1996' OR strftime('%Y', loan.date) = '1997')",
        "SELECT (SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) / NULLIF(SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END), 0) * 100 AS growth_rate, SUM(loan.amount) AS total_amount_loans FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M' AND (strftime('%Y', loan.date) = '1996' OR strftime('%Y', loan.date) = '1997')",
        "SELECT (SUM(CASE WHEN loan.date LIKE '1997%' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN loan.date LIKE '1996%' THEN loan.amount ELSE 0 END)) * 100.0 / NULLIF(SUM(CASE WHEN loan.date LIKE '1996%' THEN loan.amount ELSE 0 END), 0) AS growth_rate, SUM(loan.amount) AS total_amount_loans FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'",
        "SELECT (CAST(SUM(CASE WHEN strftime('%Y', L.date) = '1997' THEN L.amount ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN strftime('%Y', L.date) = '1996' THEN L.amount ELSE 0 END) AS REAL)) * 100.0 / CAST(SUM(CASE WHEN strftime('%Y', L.date) = '1996' THEN L.amount ELSE 0 END) AS REAL) FROM loan AS L INNER JOIN client AS C ON L.account_id IN (SELECT account_id FROM disp WHERE client_id = C.client_id) WHERE C.gender = 'M'",
        "SELECT ((SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) / NULLIF(SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END), 0)) * 100) AS growth_rate FROM loan AS L JOIN account AS A ON L.account_id = A.account_id JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M'",
        "SELECT ((SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) -           SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) /           NULLIF(SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END), 0)) * 100) AS growth_rate FROM loan  INNER JOIN account ON loan.account_id = account.account_id  INNER JOIN disp ON account.account_id = disp.account_id  INNER JOIN client ON disp.client_id = client.client_id  WHERE client.gender = 'M'"
    ],
    "101": [
        "SELECT account.account_id FROM account WHERE date LIKE '1995%' ORDER BY date ASC LIMIT 1",
        "SELECT account.account_id FROM account WHERE account.date LIKE '1995%' ORDER BY account.date LIMIT 1",
        "SELECT account_id FROM account WHERE date BETWEEN '1995-01-01' AND '1995-12-31' ORDER BY date ASC LIMIT 1",
        "SELECT account_id, date FROM account WHERE strftime('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "SELECT T1.account_id FROM trans AS T1 WHERE T1.date BETWEEN '1995-01-01' AND '1995-12-31' ORDER BY T1.date ASC LIMIT 1",
        "SELECT DISTINCT T1.account_id  FROM trans AS T1  WHERE T1.date LIKE '1995%'  AND T1.date = (SELECT MIN(T2.date) FROM trans AS T2 WHERE T2.date LIKE '1995%')"
    ],
    "49": [
        "SELECT schools.County, schools.School, schools.ClosedDate FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(schools.School) DESC",
        "SELECT schools.County, schools.School, schools.ClosedDate FROM schools WHERE schools.StatusType = 'Closed' ORDER BY schools.County",
        "SELECT schools.County, schools.School, schools.ClosedDate FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(*) DESC",
        "SELECT schools.County, schools.ClosedDate FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(schools.CDSCode) DESC",
        "SELECT School, ClosedDate FROM schools AS T1 WHERE StatusType = 'Closed' AND County = (SELECT County FROM schools AS T2 WHERE T2.StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T1.County, T1.School, T1.ClosedDate  FROM schools AS T1  WHERE T1.StatusType = 'Closed'  AND T1.County IS NOT NULL ORDER BY T1.County LIMIT (SELECT COUNT(*)         FROM schools AS T2         WHERE T2.StatusType = 'Closed'         AND T2.County = T1.County) DESC"
    ],
    "100": [
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Sokolov'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Sokolov'",
        "SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'F' AND C.birth_date < '1950-01-01' AND D.A2 = 'Sokolov'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Nymburk'",
        "SELECT COUNT(DISTINCT C.client_id) FROM client AS C JOIN account AS A ON C.client_id = A.account_id JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'F' AND C.birth_date < '1950-01-01' AND D.A2 = 'Sokolov'",
        "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Sokolov'"
    ],
    "1197": [
        "SELECT P.`First Date`, P.Diagnosis FROM Patient AS P WHERE P.ID = 48473",
        "SELECT P.`First Date`, P.Diagnosis FROM Patient AS P WHERE P.ID = 48473",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473",
        "SELECT T1.Description, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 48473",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473",
        "SELECT T1.Description, T1.Diagnosis  FROM Patient AS T1  WHERE T1.ID = 48473"
    ],
    "496": [
        "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'",
        "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'",
        "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'",
        "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'",
        "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON ST.setCode = S.code WHERE ST.translation = 'Rinascita di Alara'",
        "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Rinascita di Alara'"
    ],
    "205": [
        "SELECT DISTINCT molecule_id FROM atom WHERE element = 'c'",
        "SELECT DISTINCT molecule_id FROM atom WHERE element = 'c'",
        "SELECT DISTINCT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c'",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'c'",
        "SELECT DISTINCT T3.molecule_id FROM atom AS T1 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'c'",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'c'"
    ],
    "1120": [
        "SELECT SUM(M.away_team_goal) FROM Match M JOIN Player P ON M.away_player_1 = P.player_api_id OR M.away_player_2 = P.player_api_id OR M.away_player_3 = P.player_api_id OR M.away_player_4 = P.player_api_id OR M.away_player_5 = P.player_api_id OR M.away_player_6 = P.player_api_id OR M.away_player_7 = P.player_api_id OR M.away_player_8 = P.player_api_id OR M.away_player_9 = P.player_api_id OR M.away_player_10 = P.player_api_id OR M.away_player_11 = P.player_api_id WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "SELECT SUM(M.away_team_goal) FROM Match M JOIN Player P ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "SELECT SUM(M.away_team_goal) FROM Player AS P INNER JOIN Match AS M ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Player AS P ON (M.away_player_1 = P.player_api_id OR M.away_player_2 = P.player_api_id OR M.away_player_3 = P.player_api_id OR M.away_player_4 = P.player_api_id OR M.away_player_5 = P.player_api_id OR M.away_player_6 = P.player_api_id OR M.away_player_7 = P.player_api_id OR M.away_player_8 = P.player_api_id OR M.away_player_9 = P.player_api_id OR M.away_player_10 = P.player_api_id OR M.away_player_11 = P.player_api_id) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "SELECT SUM(M.away_team_goal) FROM Match AS M JOIN Player AS P ON (P.player_api_id = M.away_player_1 OR P.player_api_id = M.away_player_2 OR P.player_api_id = M.away_player_3 OR P.player_api_id = M.away_player_4 OR P.player_api_id = M.away_player_5 OR P.player_api_id = M.away_player_6 OR P.player_api_id = M.away_player_7 OR P.player_api_id = M.away_player_8 OR P.player_api_id = M.away_player_9 OR P.player_api_id = M.away_player_10 OR P.player_api_id = M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "SELECT SUM(M.away_team_goal)  FROM Match AS M  INNER JOIN Player AS P ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11)  WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')"
    ],
    "346": [
        "SELECT C.id, C.artist FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE (C.power = '*' OR C.power IS NULL) AND L.format = 'commander' AND L.status = 'Legal'",
        "SELECT C.id, C.artist FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE (C.power = '*' OR C.power IS NULL) AND L.format = 'commander' AND L.status = 'Legal'",
        "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT T1.id, T1.artist FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'",
        "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'"
    ],
    "72": [
        "SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm WHERE `Educational Option Type` = 'State Special School' AND `County Name` = 'Fremont' AND `Academic Year` = '2014-2015'",
        "SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm WHERE `County Name` = 'Fremont' AND `Academic Year` = '2014-2015' AND `Educational Option Type` = 'State Special School'",
        "SELECT SUM(frpm.`Enrollment (Ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.EdOpsCode = 'SSS' AND schools.City = 'Fremont' AND frpm.`Academic Year` = '2014-2015'",
        "SELECT COUNT(\"Enrollment (Ages 5-17)\") FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.\"EdOpsCode\" = 'SSS' AND frpm.\"Academic Year\" = '2014-2015' AND schools.\"City\" = 'Fremont'",
        "SELECT SUM(frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.`Academic Year` = '2014-2015' AND frpm.`County Name` = 'Fremont' AND frpm.`EdOpsCode` = 'SSS'",
        "SELECT SUM(frpm.`Enrollment (Ages 5-17)`)  FROM frpm  INNER JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.`EdOpsCode` = 'SSS' AND schools.City = 'Fremont' AND frpm.`Academic Year` = '2014-2015'"
    ],
    "399": [
        "SELECT DISTINCT types FROM cards WHERE availability = 'arena'",
        "SELECT DISTINCT cards.types FROM cards WHERE cards.availability = 'arena'",
        "SELECT DISTINCT types FROM cards WHERE availability = 'arena'",
        "SELECT subtypes, supertypes FROM cards WHERE availability = 'arena'",
        "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability LIKE '%arena%'",
        "SELECT DISTINCT TRIM(value) AS card_type FROM (SELECT SUBSTR(subtypes, INSTR(subtypes, ',') + 1) AS value FROM cards WHERE availability LIKE '%arena%' UNION SELECT SUBSTR(supertypes, INSTR(supertypes, ',') + 1) AS value FROM cards WHERE availability LIKE '%arena%')"
    ],
    "569": [
        "SELECT COUNT(votes.Id) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'",
        "SELECT COUNT(votes.Id) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'",
        "SELECT COUNT(votes.Id) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'",
        "SELECT COUNT(T3.Id) FROM posts AS T1 INNER JOIN votes AS T3 ON T1.Id = T3.PostId WHERE T1.Title LIKE '%data visualization%'",
        "SELECT COUNT(T2.Id) FROM votes T2 INNER JOIN posts T1 ON T2.PostId = T1.Id WHERE T1.Title LIKE '%data visualization%'",
        "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')"
    ],
    "1262": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.C3 > 35 AND T2.\"ANA Pattern\" = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'",
        "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.C3 > 35 AND E.\"ANA Pattern\" = 'P'"
    ],
    "692": [
        "SELECT julianday(B.Date) - julianday(U.CreationDate) AS DaysToGetBadge FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Zolomon'",
        "SELECT JULIANDAY(B.Date) - JULIANDAY(U.CreationDate) AS DaysToGetBadge FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Zolomon'",
        "SELECT julianday(badges.Date) - julianday(users.CreationDate) AS days_to_get_badge FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'",
        "SELECT JULIANDAY(T1.Date) - JULIANDAY(T2.CreationDate) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "SELECT DATE(badges.Date) - DATE(users.CreationDate) AS time_difference FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "SELECT STRFTIME('%Y-%m-%d', badges.Date) AS BadgeDate, STRFTIME('%Y-%m-%d', users.CreationDate) AS CreationDate,         (JULIANDAY(badges.Date) - JULIANDAY(users.CreationDate)) AS DaysTaken  FROM badges  INNER JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'Zolomon'"
    ],
    "597": [
        "SELECT COUNT(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Teacher' AND users.Location = 'India'",
        "SELECT COUNT(DISTINCT badges.UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'India' AND badges.Name = 'Teacher'",
        "SELECT COUNT(DISTINCT users.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Teacher' AND users.Location = 'India'",
        "SELECT COUNT(DISTINCT T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "SELECT COUNT(DISTINCT U.Id) FROM badges B JOIN users U ON B.UserId = U.Id WHERE U.Location = 'India' AND B.Name = 'Teacher'",
        "SELECT COUNT(DISTINCT U.Id)  FROM users AS U  INNER JOIN badges AS B ON U.Id = B.UserId  WHERE U.Location = 'India' AND B.Name = 'Teacher'"
    ],
    "35": [
        "SELECT schools.AdmEmail1 FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 1",
        "SELECT schools.AdmEmail1 FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 1",
        "SELECT schools.AdmEmail1 FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 1",
        "SELECT s.AdmEmail1 FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1",
        "SELECT s.AdmEmail1 FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1",
        "SELECT T4.AdmEmail1 FROM (SELECT T1.CDSCode, T1.\"Enrollment (K-12)\", T2.AdmEmail1    FROM frpm AS T1    INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode    WHERE T1.\"Charter School (Y/N)\" = 1    ORDER BY T1.\"Enrollment (K-12)\" ASC    LIMIT 1) AS T4"
    ],
    "86": [
        "SELECT T1.AdmLName1, T1.District, T1.County, T1.School FROM schools AS T1 WHERE T1.CharterNum = '40'",
        "SELECT schools.AdmLName1, schools.District, schools.County, schools.School FROM schools WHERE schools.CharterNum = '40'",
        "SELECT S.AdmLName1, S.District, S.County, S.School FROM schools AS S WHERE S.CharterNum = '40'",
        "SELECT T1.AdmLName1, T1.District, T1.County, T1.School FROM schools AS T1 WHERE T1.CharterNum = '40'",
        "SELECT T1.AdmLName1, T1.District, T1.County, T1.School FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.CharterNum = '40'",
        "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'"
    ],
    "238": [
        "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(DISTINCT T1.molecule_id) AS How_many_molecules FROM bond AS T1 WHERE T1.bond_type = '#'",
        "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'",
        "SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'"
    ],
    "116": [
        "SELECT ((T2.balance - T1.balance) / T1.balance) * 100 AS increase_rate, T3.balance AS account_balance FROM trans AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1993-03-22' AND T2.date = '1998-12-27' AND T1.account_id = (SELECT T.account_id FROM loan AS T WHERE T.date = '1993-07-05' ORDER BY T.loan_id ASC LIMIT 1)",
        "SELECT ((T3.balance - T2.balance) / T2.balance) * 100 AS 'increase rate', T2.balance AS 'account balance' FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.date = '1993-07-05' AND T1.date = '1998-12-27' AND T2.date = '1993-03-22'",
        "SELECT ((final_balance.balance - initial_balance.balance) * 100.0 / initial_balance.balance) AS increase_rate, final_balance.balance AS account_balance FROM (SELECT balance FROM trans WHERE date = '1998-12-27' AND account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date ASC LIMIT 1)) AS final_balance, (SELECT balance FROM trans WHERE date = '1993-03-22' AND account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date ASC LIMIT 1)) AS initial_balance",
        "###SQL: SELECT CAST(((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AND date = '1998-12-27') - (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AND date = '1993-03-22')) AS REAL) * 100 / (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AND date = '1993-03-22')",
        "SELECT ((T2.balance - T1.balance) / T1.balance) * 100 AS increase_rate FROM loan AS L JOIN trans AS T1 ON L.account_id = T1.account_id AND T1.date = '1993-03-22' JOIN trans AS T2 ON L.account_id = T2.account_id AND T2.date = '1998-12-27' WHERE L.date = (SELECT MIN(date) FROM loan WHERE date >= '1993-07-05')",
        "SELECT ((T2.balance - T1.balance) / T1.balance) * 100 AS increase_rate FROM trans AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id JOIN loan AS L ON L.account_id = T1.account_id WHERE L.date = '1993-07-05' AND T1.date = '1993-03-22' AND T2.date = '1998-12-27'"
    ],
    "674": [
        "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)"
    ],
    "1108": [
        "SELECT TA.buildUpPlaySpeedClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Willem II' AND TA.date = '2011-02-22 00:00:00'",
        "SELECT TA.buildUpPlaySpeedClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Willem II' AND TA.date = '2011-02-22'",
        "SELECT Team_Attributes.buildUpPlaySpeedClass FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Willem II' AND Team_Attributes.date = '2011-02-22 00:00:00'",
        "SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND T1.date = '2011-02-22'",
        "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22 00:00:00'",
        "SELECT T2.buildUpPlaySpeedClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22'"
    ],
    "711": [
        "SELECT COUNT(DISTINCT users.Id) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score = 0 AND users.Age = 40",
        "SELECT COUNT(DISTINCT UserId) FROM comments WHERE Score = 0 AND UserId IN (SELECT Id FROM users WHERE Age = 40)",
        "SELECT COUNT(DISTINCT comments.UserId) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score = 0 AND users.Age = 40",
        "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score > 60 AND T1.Age > 60",
        "SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
        "SELECT COUNT(DISTINCT U.Id) FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score = 0 AND U.Age = 40"
    ],
    "656": [
        "SELECT users.DisplayName, posts.ParentId FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND ParentId IS NOT NULL",
        "SELECT T1.OwnerDisplayName, T1.ParentId FROM posts AS T1 WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1",
        "SELECT u.DisplayName, p.ParentId FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) LIMIT 1",
        "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ParentId IS NOT NULL AND T2.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)",
        "SELECT U.DisplayName FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Id = (SELECT Id FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1)",
        "SELECT U.DisplayName  FROM posts AS C  JOIN posts AS P ON C.ParentId = P.Id  JOIN users AS U ON P.OwnerUserId = U.Id  WHERE C.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)"
    ],
    "1169": [
        "SELECT (SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END), 0)) AS ratio, SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS male, SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS female FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID",
        "SELECT (SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END), 0)) AS ratio, SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS male, SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS female FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID",
        "SELECT CAST(SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END), 0) AS ratio, SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS male, SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS female FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID",
        "SELECT CAST(SUM(CASE WHEN T1.UA <= 8.0 AND T2.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.UA <= 6.5 AND T2.SEX = 'F' THEN 1 ELSE 0 END) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID",
        "SELECT CAST(SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END), 0) AS ratio FROM Laboratory L JOIN Patient P ON L.ID = P.ID",
        "SELECT      (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.UA <= 8.0) * 1.0 /      (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.UA <= 6.5) AS ratio"
    ],
    "321": [
        "SELECT DISTINCT B.molecule_id FROM connected AS C JOIN atom AS A1 ON C.atom_id = A1.atom_id JOIN atom AS A2 ON C.atom_id2 = A2.atom_id JOIN bond AS B ON C.bond_id = B.bond_id WHERE A1.atom_id = 'TR000_2' AND A2.atom_id = 'TR000_4'",
        "SELECT T1.molecule_id FROM atom T1 INNER JOIN connected T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 = 'TR000_4' AND T1.atom_id = 'TR000_2'",
        "SELECT DISTINCT T.molecule_id FROM connected AS C JOIN atom AS T ON C.atom_id = T.atom_id WHERE C.atom_id = 'TR000_2' AND C.atom_id2 = 'TR000_4'",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 WHERE T1.atom_id = 'TR000_2' OR T1.atom_id = 'TR000_4'",
        "SELECT T2.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_2' OR T1.atom_id = 'TR000_4' GROUP BY T1.molecule_id HAVING COUNT(DISTINCT T1.atom_id) = 2",
        "SELECT T1.molecule_id FROM atom AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_2' AND T2.atom_id = 'TR000_4'"
    ],
    "384": [
        "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'",
        "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'",
        "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'",
        "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "SELECT T1.uuid, T3.language FROM cards T1 JOIN legalities T2 ON T1.uuid = T2.uuid JOIN foreign_data T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "SELECT T1.uuid, T2.language  FROM cards AS T1  INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T3.format = 'legacy'"
    ],
    "878": [
        "SELECT T2.forename || ' ' || T2.surname AS full_name FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
        "SELECT CONCAT(drivers.forename, ' ', drivers.surname) AS full_name FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 348 ORDER BY results.time ASC LIMIT 1",
        "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN results AS T3 ON T3.raceId = T2.raceId WHERE T3.raceId = 348 ORDER BY T2.time LIMIT 1",
        "SELECT T2.forename, T2.surname FROM lapTimes T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348)",
        "SELECT T2.forename || ' ' || T2.surname AS full_name  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 348  ORDER BY T1.time  LIMIT 1"
    ],
    "1412": [
        "SELECT e.expense_description FROM expense AS e INNER JOIN member AS m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large'",
        "SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'",
        "SELECT T3.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
        "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'",
        "SELECT T2.expense_description FROM expense AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'",
        "SELECT DISTINCT T2.expense_description  FROM member AS T1  INNER JOIN expense AS T2  ON T1.member_id = T2.link_to_member  WHERE T1.t_shirt_size = 'X-Large'"
    ],
    "1485": [
        "SELECT (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference",
        "SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference",
        "SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference",
        "SELECT SUM(CASE WHEN CustomerID = 7 THEN Consumption ELSE 0 END) - SUM(CASE WHEN CustomerID = 5 THEN Consumption ELSE 0 END) FROM yearmonth WHERE Date = '201304'",
        "SELECT (SELECT Consumption FROM yearmonth T1 WHERE T1.CustomerID = 7 AND T1.Date = '201304') - (SELECT Consumption FROM yearmonth T2 WHERE T2.CustomerID = 5 AND T2.Date = '201304') AS ConsumptionDifference",
        "SELECT (T1.Consumption - T2.Consumption) AS Difference  FROM yearmonth AS T1  JOIN yearmonth AS T2 ON T1.Date = T2.Date  WHERE T1.CustomerID = 7 AND T2.CustomerID = 5 AND T1.Date = '201304'"
    ],
    "1451": [
        "SELECT T1.link_to_member, MAX(T3.cost) FROM expense AS T3 INNER JOIN attendance AS T2 ON T3.link_to_member = T2.link_to_member GROUP BY T1.link_to_member HAVING COUNT(DISTINCT T2.link_to_event) > 1",
        "SELECT T1.link_to_member, SUM(T2.cost) AS total_spent FROM expense AS T2 JOIN attendance AS T3 ON T2.link_to_member = T3.link_to_member GROUP BY T1.link_to_member HAVING COUNT(DISTINCT T3.link_to_event) > 1 ORDER BY total_spent DESC LIMIT 1",
        "SELECT T1.link_to_member, SUM(T2.cost) AS total_cost FROM expense AS T2 INNER JOIN member AS T1 ON T2.link_to_member = T1.member_id GROUP BY T1.link_to_member HAVING COUNT(DISTINCT T2.link_to_budget) > 1 ORDER BY total_cost DESC LIMIT 1",
        "SELECT T1.member_id, T1.first_name, T1.last_name, CAST(MAX(T2.cost) AS REAL) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member GROUP BY T1.member_id, T1.first_name, T1.last_name HAVING COUNT(DISTINCT T3.link_to_event) > 1 ORDER BY MAX(T2.cost) DESC LIMIT 1",
        "SELECT e.link_to_member, SUM(e.cost) AS total_spent FROM expense e INNER JOIN (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1) AS e2 ON e.link_to_member = e2.link_to_member GROUP BY e.link_to_member ORDER BY total_spent DESC LIMIT 1",
        "SELECT T1.first_name, T1.last_name, MAX(T2.total_cost) AS max_cost FROM member AS T1 INNER JOIN (     SELECT link_to_member, SUM(cost) AS total_cost     FROM expense     GROUP BY link_to_member     HAVING COUNT(DISTINCT link_to_budget) > 1 ) AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY max_cost DESC LIMIT 1"
    ],
    "1393": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.email FROM member AS T1 WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.email FROM member AS T1 WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.email FROM member AS T1 WHERE T1.position = 'Secretary'",
        "SELECT T1.first_name, T1.last_name, T1.email FROM member AS T1 WHERE T1.position = 'Secretary'",
        "SELECT member.first_name, member.last_name, member.email FROM member WHERE member.position = 'Secretary'",
        "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'"
    ],
    "29": [
        "SELECT schools.OpenDate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm) AND schools.GSserved = 'K-12'",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' ORDER BY enroll12 DESC LIMIT 1",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' ORDER BY Enrollment DESC LIMIT 1",
        "###SQL: SELECT schools.OpenDate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm WHERE `Academic Year` = '2014-2015') AND schools.GSserved = 'K-12'",
        "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "SELECT T3.OpenDate FROM (SELECT MAX(T1.`Enrollment (K-12)`) AS MaxEnrollment, T1.CDSCode FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.GSserved LIKE '%K-12%' GROUP BY T1.CDSCode) AS T4 INNER JOIN schools AS T3 ON T4.CDSCode = T3.CDSCode WHERE T4.MaxEnrollment = (SELECT MAX(`Enrollment (K-12)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.GSserved LIKE '%K-12%')"
    ],
    "348": [
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Sublime Epiphany' AND C.number = '74s'",
        "SELECT R.text FROM rulings AS R JOIN cards AS C ON R.uuid = C.uuid WHERE C.name = 'Sublime Epiphany' AND C.number = '74s'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Sublime Epiphany' AND T2.number = '74s'",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Sublime Epiphany' AND C.number = '74s'",
        "SELECT R.text FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Sublime Epiphany' AND C.number = '74s'"
    ],
    "94": [
        "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' AND client.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND account.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MIN(A11) FROM district)); WITH max_salary AS (SELECT MAX(A11) FROM district), min_salary AS (SELECT MIN(A11) FROM district) SELECT (SELECT MAX(A11) FROM max_salary) - (SELECT MIN(A11) FROM min_salary) AS gap",
        "SELECT a.account_id, (SELECT MAX(d.A11) FROM district d) - (SELECT MIN(d.A11) FROM client c INNER JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F')) AS gap FROM account a INNER JOIN disp d ON a.account_id = d.account_id INNER JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'F' AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F')",
        "SELECT A.account_id, (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district WHERE district.district_id IN (SELECT C.district_id FROM client AS C WHERE C.gender = 'F' AND C.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))) AS gap FROM account AS A WHERE A.district_id IN (SELECT C.district_id FROM client AS C WHERE C.gender = 'F' AND C.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))",
        "###SQL: SELECT MIN(district.A11) AS lowest_salary, MAX(district.A11) AS highest_salary, (MAX(district.A11) - MIN(district.A11)) AS salary_gap FROM account INNER JOIN client ON account.account_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F'",
        "SELECT T1.account_id, (SELECT MAX(T2.A11) FROM district T2) - (SELECT MIN(T2.A11) FROM client T3 JOIN district T2 ON T3.district_id = T2.district_id WHERE T3.gender = 'F') AS gap FROM disp T1 JOIN client T2 ON T1.client_id = T2.client_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(T3.birth_date) FROM client T3 WHERE T3.gender = 'F')",
        "SELECT T3.account_id, (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district) AS salary_gap  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F')"
    ],
    "756": [
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "SELECT COUNT(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad'",
        "SELECT COUNT(id) FROM superhero WHERE alignment_id = 2",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')",
        "SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')"
    ],
    "673": [
        "SELECT AVG(post_count) FROM (SELECT COUNT(v.PostId) AS post_count FROM votes AS v INNER JOIN users AS u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users) GROUP BY v.UserId) AS subquery",
        "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))",
        "SELECT AVG(T1.PostId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = (SELECT MAX(Age) FROM users)",
        "SELECT COUNT(T1.PostId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = (SELECT MAX(Age) FROM users)",
        "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))",
        "SELECT AVG(T1.PostId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = (SELECT MAX(Age) FROM users)"
    ],
    "507": [
        "SELECT CAST(SUM(CASE WHEN S.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE T.language = 'Portuguese (Brazil)'",
        "SELECT CAST(SUM(CASE WHEN sets.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Portuguese (Brazil)'",
        "SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
        "SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
        "SELECT (SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM foreign_data T1 JOIN cards T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Portuguese (Brazil)'",
        "SELECT (SUM(CASE WHEN S.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_online_only FROM foreign_data AS F INNER JOIN sets AS S ON F.setCode = S.code WHERE F.language = 'Portuguese (Brazil)'"
    ],
    "114": [
        "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' LIMIT 1",
        "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account.date ASC LIMIT 1",
        "SELECT T1.account_id FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "SELECT T1.account_id  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.client_id = T3.client_id  INNER JOIN district AS T4 ON T3.district_id = T4.district_id  WHERE T4.A3 = 'Prague'  ORDER BY T1.date  LIMIT 1"
    ],
    "1343": [
        "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')"
    ],
    "536": [
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND date(CreationDate) > '2013-12-31'",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01'",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01'",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-12-31'",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > '2013'"
    ],
    "1494": [
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage, COUNT(*) AS gas_stations FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage, COUNT(*) AS gas_stations FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(GasStationID)) AS percentage, COUNT(GasStationID) AS gas_stations FROM gasstations WHERE Country = 'SVK'",
        "SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations AS T1 WHERE T1.Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_premium FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_premium  FROM gasstations  WHERE Country = 'SVK'"
    ],
    "1233": [
        "SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU < 180 AND STRFTIME('%Y', P.Description) = '1991'",
        "SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU < 180 AND STRFTIME('%Y', P.Description) = '1991'",
        "SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU < 180 AND STRFTIME('%Y', P.Description) = '1991'",
        "SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Description) = '1991' AND T2.GLU < 180",
        "SELECT P.ID, L.GLU FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Description) = '1991' AND L.GLU < 180",
        "SELECT P.ID, L.GLU  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE STRFTIME('%Y', P.Description) = '1991' AND L.GLU < 180"
    ],
    "966": [
        "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
        "SELECT COUNT(*) FROM results WHERE raceId = 18",
        "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
        "###SQL: SELECT COUNT(driverId) FROM results WHERE raceId = 380",
        "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
        "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18"
    ],
    "1083": [
        "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1",
        "SELECT T.player_name FROM Player AS T INNER JOIN Player_Attributes AS A ON T.player_api_id = A.player_api_id WHERE A.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "SELECT T1.id FROM Player_Attributes T1 ORDER BY T1.overall_rating DESC LIMIT 1",
        "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)"
    ],
    "1144": [
        "SELECT T1.finishing, T2.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT finishing, curve FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT PA.finishing, PA.curve FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT T1.finishing, T2.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT PA.finishing, PA.curve FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT PA.finishing, PA.curve  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE P.weight = (SELECT MAX(weight) FROM Player)"
    ],
    "149": [
        "SELECT DISTINCT D.A2 AS account_type, AVG(D.A11) AS average_income FROM account A INNER JOIN disp D ON A.account_id = D.account_id INNER JOIN district DT ON A.district_id = DT.district_id WHERE D.type <> 'OWNER' AND D.A11 > 8000 AND D.A11 <= 9000 GROUP BY D.A2",
        "SELECT DISTINCT D.A2 AS account_type, AVG(D.A11) AS average_income FROM account A INNER JOIN disp D ON A.account_id = D.account_id INNER JOIN district DT ON A.district_id = DT.district_id WHERE D.type != 'OWNER' AND D.A11 > 8000 AND D.A11 <= 9000 GROUP BY D.A2",
        "SELECT DISTINCT disp.type, AVG(district.A11) AS average_income FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type <> 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000 GROUP BY disp.type",
        "SELECT account.frequency, AVG(district.A11) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type <> 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000",
        "SELECT DISTINCT disp.type, district.A11 FROM disp AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type <> 'OWNER' AND T3.A11 > 8000 AND T3.A11 <= 9000",
        "SELECT DISTINCT T3.type FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T2.type != 'OWNER' AND T3.A11 > 8000 AND T3.A11 <= 9000"
    ],
    "1347": [
        "SELECT z.county FROM zip_code AS z INNER JOIN member AS m ON z.zip_code = m.zip WHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher'",
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
        "SELECT z.county FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher'",
        "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
        "SELECT Z.county FROM member AS M JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Adela' AND M.last_name = 'O''Gallagher'",
        "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'"
    ],
    "290": [
        "SELECT element FROM atom WHERE molecule_id = 'TR151'",
        "SELECT element FROM atom WHERE molecule_id = 'TR151'",
        "SELECT element FROM atom WHERE molecule_id = 'TR151'",
        "SELECT element FROM atom WHERE molecule_id = 'TR151'",
        "SELECT T1.element FROM atom T1 WHERE T1.molecule_id = 'TR151'",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR151'"
    ],
    "18": [
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.City = 'Fresno' AND s.FundingType = 'Directly funded' AND ss.NumTstTakr <= 250",
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Fresno' AND s.FundingType = 'Directly funded' AND ss.NumTstTakr <= 250",
        "SELECT COUNT(s.CDSCode) FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Fresno' AND f.`Charter Funding Type` = 'Directly funded' AND s.NumTstTakr <= 250",
        "SELECT COUNT(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Fresno' AND T2.FundingType = 'Directly funded' AND T1.NumTstTakr <= 250",
        "SELECT COUNT(T1.CDSCode) FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250",
        "SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250"
    ],
    "733": [
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(superhero.id) AS GoldEyedSuperheroes FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
        "SELECT COUNT(T2.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T3.colour = 'Gold' AND T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN publisher T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'"
    ],
    "123": [
        "SELECT T1.account_id, T3.A2 AS district, T3.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 300000",
        "SELECT T1.account_id, T4.A2 AS district, T4.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.amount > 300000",
        "SELECT account.account_id, district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000",
        "SELECT T1.account_id, T2.A2, T2.A3 FROM loan AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.amount > 300000",
        "SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan T1 JOIN account T3 ON T1.account_id = T3.account_id JOIN district T2 ON T3.district_id = T2.district_id WHERE T1.amount > 300000",
        "SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.amount > 300000"
    ],
    "613": [
        "SELECT b.Date FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'",
        "SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'",
        "SELECT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY'",
        "SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'",
        "SELECT T1.Date FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'",
        "SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'"
    ],
    "91": [
        "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END AS higher_unemployment_ratio FROM district",
        "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END AS higher_unemployment_year FROM district",
        "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END AS higher_unemployment_year FROM district",
        "SELECT AVG(A12) AS unemployment_rate_1995, AVG(A13) AS unemployment_rate_1996, CASE WHEN AVG(A12) > AVG(A13) THEN '1995 has a higher unemployment rate' WHEN AVG(A12) < AVG(A13) THEN '1996 has a higher unemployment rate' ELSE 'Both years have the same unemployment rate' END AS comparison_result FROM district",
        "SELECT '1995' AS year, AVG(district.A12) AS average_unemployment FROM district WHERE district.A12 IS NOT NULL UNION SELECT '1996', AVG(district.A13) FROM district WHERE district.A13 IS NOT NULL ORDER BY average_unemployment DESC LIMIT 1",
        "SELECT CASE             WHEN AVG(A12) > AVG(A13) THEN '1995 has a higher unemployment rate'            WHEN AVG(A12) < AVG(A13) THEN '1996 has a higher unemployment rate'            ELSE 'Both years have the same unemployment rate'        END AS comparison FROM district"
    ],
    "948": [
        "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "SELECT MAX(T1.points) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "SELECT MAX(CR.points) FROM constructorResults AS CR INNER JOIN constructors AS C ON CR.constructorId = C.constructorId WHERE C.nationality = 'British'",
        "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "SELECT MAX(T2.points) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'British'",
        "SELECT MAX(T2.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'British'"
    ],
    "371": [
        "SELECT (COUNT(CASE WHEN foreign_data.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE isStorySpotlight = 1",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1",
        "SELECT (COUNT(T1.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1 AND T2.language = 'French'",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
        "SELECT (SELECT COUNT(T1.id) FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1 AND T2.language = 'French') * 100.0 / (SELECT COUNT(T1.id) FROM cards T1 WHERE T1.isStorySpotlight = 1) AS percentage_french_story_spotlight",
        "SELECT (COUNT(CASE WHEN language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM cards  WHERE isStorySpotlight = 1"
    ],
    "340": [
        "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"
    ],
    "1205": [
        "SELECT CASE WHEN (L.UA > 8.0 AND P.SEX = 'M') OR (L.UA > 6.5 AND P.SEX = 'F') THEN 'Normal' ELSE 'Abnormal' END AS Uric_Acid_Status FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 57266",
        "SELECT CASE WHEN (L.UA > 8.0 AND P.SEX = 'M') OR (L.UA > 6.5 AND P.SEX = 'F') THEN 'Yes' ELSE 'No' END AS is_normal_range FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 57266",
        "SELECT CASE WHEN (UA > 8.0 AND SEX = 'M') OR (UA > 6.5 AND SEX = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.ID = 57266",
        "SELECT T1.SEX, T2.UA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266 AND ((T2.UA > 8.0 AND T1.SEX = 'M') OR (T2.UA > 6.5 AND T1.SEX = 'F'))",
        "SELECT CASE WHEN L.UA > 8.0 AND P.SEX = 'M' THEN 'Normal' WHEN L.UA > 6.5 AND P.SEX = 'F' THEN 'Normal' ELSE 'Abnormal' END AS Uric_Acid_Status FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 57266",
        "SELECT CASE      WHEN (P.SEX = 'M' AND L.UA > 8.0) OR (P.SEX = 'F' AND L.UA > 6.5) THEN 'Yes'      ELSE 'No'  END AS is_within_normal_range FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.ID = 57266"
    ],
    "288": [
        "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1')",
        "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'",
        "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "SELECT T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'"
    ],
    "1288": [
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
        "SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0",
        "SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TP < 6.0"
    ],
    "659": [
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000"
    ],
    "505": [
        "SELECT ST.translation FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Mirrodin' AND ST.language = 'Chinese Simplified'",
        "SELECT ST.translation FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Mirrodin' AND ST.language = 'Chinese Simplified'",
        "SELECT ST.translation, S.name FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Mirrodin' AND ST.language = 'Chinese Simplified'",
        "SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Mirrodin' AND T1.language = 'Chinese Simplified'",
        "SELECT ST.translation FROM set_translations AS ST JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Chinese Simplified' AND S.name = 'Mirrodin'",
        "SELECT translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Mirrodin' AND T1.language = 'Chinese Simplified'"
    ],
    "1371": [
        "SELECT COUNT(DISTINCT T2.link_to_member) FROM attendance AS T2 JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'Women''s Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'",
        "SELECT COUNT(T2.link_to_member) FROM attendance AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'Women''s Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member)  FROM attendance AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T2.event_name = 'Women's Soccer'"
    ],
    "559": [
        "SELECT CreationDate, COUNT(Id) AS maximum_number_of_votes FROM votes GROUP BY CreationDate ORDER BY maximum_number_of_votes DESC LIMIT 1",
        "SELECT CreationDate, COUNT(Id) AS MaxVotes FROM votes GROUP BY CreationDate ORDER BY MaxVotes DESC LIMIT 1",
        "SELECT CreationDate, COUNT(Id) AS max_votes FROM votes GROUP BY CreationDate ORDER BY max_votes DESC LIMIT 1",
        "SELECT T1.CreationDate FROM votes AS T1 GROUP BY T1.CreationDate ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "SELECT T2.CreaionDate FROM votes AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1",
        "SELECT CreationDate FROM votes GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(vote_count) FROM (SELECT COUNT(Id) AS vote_count FROM votes GROUP BY CreationDate))"
    ],
    "439": [
        "SELECT name FROM sets WHERE code = 'ALL'",
        "SELECT name FROM sets WHERE code = 'ALL'",
        "SELECT name FROM sets WHERE code = 'ALL'",
        "###SQL: SELECT name FROM sets WHERE code = 'ALL'",
        "SELECT T1.name FROM sets AS T1 WHERE T1.code = 'ALL'",
        "SELECT name FROM sets WHERE code = 'ALL'"
    ],
    "374": [
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'",
        "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%mtgo%'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'"
    ],
    "331": [
        "SELECT COUNT(molecule.molecule_id) FROM molecule WHERE molecule.label = '+'",
        "SELECT COUNT(molecule.molecule_id) FROM molecule WHERE molecule.label = '+'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'",
        "SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+'"
    ],
    "491": [
        "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "SELECT T1.mcmName FROM sets AS T1 WHERE T1.releaseDate = '2017-06-09'",
        "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'"
    ],
    "206": [
        "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR004_8_9'",
        "SELECT DISTINCT a.element FROM atom AS a JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_id = 'TR004_8_9'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR004_8_9'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR004_8_9'",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR004_8_9'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR004_8_9'"
    ],
    "1188": [
        "SELECT ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+'",
        "SELECT ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+'",
        "SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'",
        "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'",
        "SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'",
        "SELECT COUNT(ID), ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+' GROUP BY ID"
    ],
    "14": [
        "SELECT schools.NCESSchool FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "SELECT schools.NCESSchool FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "SELECT schools.NCESSchool FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.\"Enrollment (Ages 5-17)\" DESC LIMIT 5",
        "SELECT schools.NCESSchool FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "SELECT `School Code` FROM frpm ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5"
    ],
    "661": [
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT users.Age FROM users WHERE users.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)"
    ],
    "1148": [
        "SELECT (COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id",
        "SELECT (COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player WHERE height < 180)) AS percentage, COUNT(*) AS players FROM Player WHERE height < 180 AND overall_rating > 70",
        "SELECT CAST(COUNT(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id",
        "SELECT (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0 / COUNT(P.id)) AS percentage FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id",
        "SELECT (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0 / COUNT(P.id)) AS percentage  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id"
    ],
    "159": [
        "SELECT trans.* FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE disp.client_id = 3356 AND trans.operation = 'VYBER'",
        "SELECT trans.trans_id, trans.amount, trans.date FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE disp.client_id = 3356 AND trans.operation = 'VYBER'",
        "SELECT T1.trans_id, T1.amount, T1.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.client_id = 3356 AND T1.operation = 'VYBER'",
        "SELECT T1.amount, T1.date FROM trans AS T1 WHERE T1.type = 'VYBER' AND T1.account_id IN (SELECT account_id FROM disp WHERE client_id = 2758)",
        "SELECT T1.trans_id, T1.amount, T1.date FROM trans AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'",
        "SELECT T2.* FROM trans AS T2 INNER JOIN disp AS T1 ON T2.account_id = T1.account_id WHERE T1.client_id = 3356 AND T2.operation = 'VYBER'"
    ],
    "1208": [
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
        "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60"
    ],
    "1362": [
        "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'"
    ],
    "988": [
        "SELECT T1.forename || ' ' || T1.surname AS full_name FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY AVG(T2.duration) ASC LIMIT 3",
        "SELECT D.forename || ' ' || D.surname AS full_name, AVG(P.duration) AS avg_duration FROM drivers D JOIN pitStops P ON D.driverId = P.driverId WHERE D.nationality = 'German' AND strftime('%Y', D.dob) BETWEEN '1980' AND '1985' GROUP BY D.driverId ORDER BY avg_duration ASC LIMIT 3",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN pitStops AS P ON D.driverId = P.driverId WHERE D.nationality = 'German' AND STRFTIME('%Y', D.dob) BETWEEN '1980' AND '1985' GROUP BY D.driverId ORDER BY AVG(P.duration) ASC LIMIT 3",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY AVG(CAST(T2.duration AS REAL)) LIMIT 3",
        "SELECT T1.driverId, T1.forename, T1.surname, AVG(CAST(T2.duration AS REAL)) AS avg_duration FROM drivers T1 JOIN pitStops T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND year(T1.dob) > 1980 AND year(T1.dob) < 1985 GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY avg_duration ASC LIMIT 3",
        "SELECT T1.forename || ' ' || T1.surname AS full_name, AVG(T2.duration) AS avg_duration  FROM drivers AS T1  INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId  WHERE T1.dob BETWEEN '1980-01-01' AND '1985-12-31' AND T1.nationality = 'German'  GROUP BY T1.driverId  ORDER BY avg_duration ASC  LIMIT 3"
    ],
    "925": [
        "SELECT DISTINCT C.url FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix'",
        "SELECT C.url FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix'",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND CAST(T1.year AS REAL) = 2009",
        "SELECT T2.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009",
        "SELECT T2.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009"
    ],
    "489": [
        "SELECT T1.keyruneCode FROM sets AS T1 WHERE T1.code = 'PKHC'",
        "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"
    ],
    "663": [
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)",
        "SELECT Id FROM users ORDER BY Age ASC LIMIT 1",
        "SELECT id FROM users WHERE Age = (SELECT MIN(Age) FROM users)"
    ],
    "1261": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND P.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis > 0)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.RF < 20 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND E.Thrombosis = 0",
        "###SQL: SELECT COUNT(Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0",
        "SELECT COUNT(T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  INNER JOIN Examination AS T3 ON T1.ID = T3.ID   WHERE T2.RF < 20 AND T3.Thrombosis = '0'"
    ],
    "344": [
        "SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'",
        "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'",
        "SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'",
        "SELECT T1.id, T1.rarity FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned'",
        "SELECT T1.id FROM cards T1 INNER JOIN legalities T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'",
        "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'"
    ],
    "560": [
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "SELECT COUNT(*) FROM badges WHERE Name = 'Revival'",
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "SELECT COUNT(*) FROM badges WHERE Name = 'Revival'"
    ],
    "136": [
        "SELECT COUNT(*) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
        "SELECT COUNT(*) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
        "SELECT COUNT(*) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
        "SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(*) FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T2.frequency = 'POPLATEK MESICNE'",
        "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE'"
    ],
    "142": [
        "SELECT DISTINCT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE order.k_symbol = 'SIPO' AND district.A2 = 'Pisek'",
        "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE order.k_symbol = 'SIPO' AND district.A2 = 'Pisek'",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE order.k_symbol = 'SIPO' AND district.A2 = 'Pisek'",
        "SELECT T1.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "SELECT T1.account_id FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN order AS T3 ON T1.account_id = T3.account_id WHERE T3.k_symbol = 'SIPO' AND T2.A2 = 'Pisek'",
        "SELECT DISTINCT T1.account_id  FROM `order` AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'"
    ],
    "881": [
        "SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(R.driverId)) AS race_completion_rate FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.date = '1983-07-16'",
        "SELECT (COUNT(DISTINCT R.driverId) * 100.0 / COUNT(DISTINCT R.driverId)) AS race_completion_rate FROM results AS R INNER JOIN races AS Ra ON R.raceId = Ra.raceId WHERE Ra.date = '1983-07-16' AND R.time IS NOT NULL",
        "SELECT ROUND((COUNT(R.driverId) * 100.0 / COUNT(D.driverId)), 2) AS race_completion_rate FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RACE ON RACE.raceId = R.raceId WHERE RACE.date = '1983-07-16' AND R.time IS NOT NULL",
        "SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 WHERE T1.raceId IN (SELECT raceId FROM races WHERE date = '1983-07-16')",
        "SELECT (COUNT(CASE WHEN r.time IS NOT NULL THEN r.driverId END) * 100.0 / COUNT(r.driverId)) AS completion_rate FROM results AS r JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.date = '1983-07-16'",
        "SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(R.driverId)) AS completion_rate  FROM results AS R  INNER JOIN races AS Ra ON R.raceId = Ra.raceId  WHERE Ra.date = '1983-07-16'"
    ],
    "767": [
        "SELECT AVG(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS average_no_skin_colour FROM superhero",
        "SELECT COUNT(*) * 1.0 / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) AS average_no_skin_colour FROM superhero",
        "SELECT AVG(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS average_no_skin_colour FROM superhero",
        "SELECT CAST(COUNT(id) AS REAL) / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero",
        "SELECT COUNT(T1.id) * 1.0 / (SELECT COUNT(*) FROM superhero) AS average FROM superhero T1 WHERE T1.skin_colour_id = 1",
        "SELECT COUNT(*) * 1.0 / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) AS average FROM superhero"
    ],
    "550": [
        "SELECT P.Body FROM tags AS T INNER JOIN posts AS P ON T.ExcerptPostId = P.Id WHERE T.TagName = (SELECT T2.TagName FROM tags AS T2 GROUP BY T2.TagName ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.Count = (SELECT MAX(Count) FROM tags)",
        "SELECT p.Body FROM posts AS p INNER JOIN tags AS t ON p.Id = t.ExcerptPostId GROUP BY t.TagName ORDER BY COUNT(t.TagName) DESC LIMIT 1",
        "SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T2.ExcerptPostId = T1.Id WHERE T2.Count = (SELECT MAX(Count) FROM tags) LIMIT 1",
        "SELECT T2.Body FROM tags AS T1 JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1",
        "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.Count = (SELECT MAX(Count) FROM tags)"
    ],
    "236": [
        "SELECT B.bond_type, C.atom_id || ', ' || C.atom_id2 AS atoms FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_id = 'TR001_6_9'",
        "SELECT T1.bond_type, T2.atom_id, T3.atom_id2 FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR001_6_9'",
        "SELECT B.bond_type, C.atom_id, C.atom_id2 FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_id = 'TR001_6_9'",
        "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'",
        "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'",
        "SELECT T1.bond_type, T2.atom_id, T3.atom_id AS atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR001_6_9'"
    ],
    "61": [
        "SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND DOC = '52' AND Charter = 1",
        "SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND DOC = '52' AND Charter = 1",
        "SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND DOC = '52' AND Charter = 1",
        "###SQL: SELECT COUNT(schools.CDSCode) FROM schools WHERE schools.City = 'Hickman' AND schools.DOC = '52' AND schools.Charter = 1",
        "SELECT COUNT(*) FROM schools AS T1 WHERE T1.Charter = 1 AND T1.DOC = '52' AND T1.City = 'Hickman'",
        "SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = '52' AND City = 'Hickman'"
    ],
    "190": [
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND T2.A3 = 'east Bohemia'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND T2.A3 = 'east Bohemia'",
        "SELECT COUNT(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district.A3 = 'east Bohemia'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.region = 'east Bohemia'",
        "SELECT COUNT(*) FROM client AS C JOIN district AS D ON C.district_id = D.district_id WHERE strftime('%Y', C.birth_date) = '1920' AND D.A3 = 'east Bohemia'",
        "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'"
    ],
    "465": [
        "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Korean'",
        "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Korean'",
        "SELECT COUNT(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Korean'",
        "SELECT T1.uuid FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Korean'",
        "SELECT foreign_data.id FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'",
        "SELECT EXISTS(SELECT 1 FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean')"
    ],
    "1361": [
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'"
    ],
    "1125": [
        "SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday ASC LIMIT 1",
        "SELECT player_name FROM Player WHERE id = (SELECT id FROM Player_Attributes WHERE finishing = 1) ORDER BY birthday LIMIT 1",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY P.birthday LIMIT 1",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY P.birthday ASC LIMIT 1",
        "SELECT T2.player_name FROM Player AS T2 INNER JOIN Player_Attributes AS T1 ON T2.player_api_id = T1.player_api_id WHERE T1.finishing = 1 ORDER BY T2.birthday ASC LIMIT 1"
    ],
    "967": [
        "SELECT drivers.code FROM drivers ORDER BY drivers.dob DESC LIMIT 3; SELECT COUNT(*) FROM drivers WHERE drivers.nationality = 'Dutch' AND drivers.dob IN (SELECT drivers.dob FROM drivers ORDER BY drivers.dob DESC LIMIT 3)",
        "SELECT drivers.code FROM drivers ORDER BY drivers.dob DESC LIMIT 3; SELECT COUNT(*) FROM drivers WHERE drivers.nationality = 'Dutch' AND drivers.dob IN (SELECT drivers.dob FROM drivers ORDER BY drivers.dob DESC LIMIT 3)",
        "SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3; SELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3)",
        "SELECT driverId FROM drivers WHERE driverId IN ( SELECT driverId FROM drivers ORDER BY dob LIMIT 3 ) AND nationality = 'Dutch'",
        "SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3; SELECT COUNT(*) FROM (SELECT driverId FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3))",
        "SELECT T1.code, (SELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3)) AS Netherlandic_count FROM drivers AS T1 ORDER BY T1.dob DESC LIMIT 3"
    ],
    "22": [
        "SELECT s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' ORDER BY ss.NumTstTakr DESC LIMIT 1",
        "SELECT schools.School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' ORDER BY satscores.NumTstTakr DESC LIMIT 1",
        "SELECT s.School, MAX(ss.NumTstTakr) FROM schools AS s JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.School ORDER BY MAX(ss.NumTstTakr) DESC LIMIT 1",
        "SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Contra Costa' ORDER BY T2.NumTstTakr DESC LIMIT 1",
        "SELECT T1.sname FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1",
        "SELECT T1.School, MAX(T2.NumTstTakr) AS MaxTestTakers FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE T1.County = 'Contra Costa'  GROUP BY T1.School  ORDER BY MAX(T2.NumTstTakr) DESC  LIMIT 1"
    ],
    "27": [
        "SELECT schools.`School Name`, AVG(satscores.AvgScrWrite) AS `Average Writing Score`, schools.Phone FROM schools LEFT JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.OpenDate > '1991-01-01' OR schools.ClosedDate < '2000-01-01' GROUP BY schools.`School Name`",
        "SELECT schools.School, satscores.AvgScrWrite, schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.OpenDate > '1991-01-01' OR schools.ClosedDate < '2000-01-01'",
        "SELECT schools.School, satscores.AvgScrWrite, schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE (schools.OpenDate > '1991-01-01' OR schools.ClosedDate < '2000-01-01')",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate > '1991-01-01' OR T1.ClosedDate < '2000-01-01'",
        "SELECT s.`School Name`, AVG(ss.AvgScrWrite) AS Average_Writing_Score, s.Phone FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01' GROUP BY s.`School Name`, s.Phone",
        "SELECT T1.School, AVG(T2.AvgScrWrite) AS AverageWriteScore, T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate > '1991-01-01' OR T1.ClosedDate < '2000-01-01' GROUP BY T1.School, T1.Phone"
    ],
    "413": [
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "SELECT COUNT(T1.id) FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'"
    ],
    "822": [
        "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE C.colour = 'Green' AND S.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')",
        "SELECT COUNT(*) FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')",
        "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE C.colour = 'Green' AND A.alignment = 'Bad'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.skin_colour_id = T2.id JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'"
    ],
    "146": [
        "SELECT DISTINCT C.client_id FROM client AS C JOIN disp AS D ON C.client_id = D.client_id JOIN card AS CC ON D.account_id = CC.disp_id JOIN loan AS L ON D.account_id = L.account_id WHERE C.gender = 'F'",
        "SELECT DISTINCT C.client_id FROM client C JOIN disp D ON C.client_id = D.client_id JOIN card CA ON D.disp_id = CA.disp_id JOIN loan L ON L.account_id = D.account_id WHERE C.gender = 'F'",
        "SELECT DISTINCT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.account_id = card.disp_id INNER JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F'",
        "SELECT T1.client_id, T1.gender, T2.card_id, T3.loan_id FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id INNER JOIN loan AS T3 ON T1.client_id = T3.account_id WHERE T1.gender = 'F'",
        "SELECT DISTINCT C.client_id FROM client AS C JOIN disp AS D ON C.client_id = D.client_id JOIN account AS A ON D.account_id = A.account_id JOIN card AS CARD ON A.account_id = CARD.card_id JOIN loan AS L ON A.account_id = L.account_id WHERE C.gender = 'F'",
        "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.account_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F'"
    ],
    "1267": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SM IN ('-', '+-') AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SM IN ('-', '+-') AND E.Thrombosis = 0",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 0 AND (P.SM = '-' OR P.SM = '+-')",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T2.Thrombosis NOT IN (1, 2, 3)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.SM IN ('-', '+-') AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE L.SM IN ('-', '+-') AND E.Thrombosis = 0"
    ],
    "1051": [
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.potential DESC LIMIT 1",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)",
        "SELECT P.id FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)",
        "SELECT * FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes)"
    ],
    "1132": [
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
        "SELECT Player.player_name FROM Player WHERE Player.height > 180 ORDER BY Player.player_name ASC LIMIT 3",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3"
    ],
    "486": [
        "SELECT (SUM(CASE WHEN cards.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(cards.id)) AS percentage FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap'",
        "SELECT (SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')",
        "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'",
        "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN T1.convertedManaCost ELSE 0 END) AS REAL) * 100 / SUM(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'",
        "SELECT (SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.id) AS percentage FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'",
        "SELECT ROUND((SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) * 1.0) / COUNT(T1.convertedManaCost) * 100, 2) AS percentage FROM cards AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  WHERE T2.name = 'Coldsnap'"
    ],
    "1474": [
        "SELECT yearmonth.CustomerID, SUM(yearmonth.Consumption) AS total_consumption FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' AND yearmonth.Date BETWEEN '201101' AND '201112' GROUP BY yearmonth.CustomerID ORDER BY total_consumption DESC LIMIT 1",
        "SELECT yearmonth.CustomerID FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' AND yearmonth.Date BETWEEN '201101' AND '201112' GROUP BY yearmonth.CustomerID ORDER BY SUM(yearmonth.Consumption) DESC LIMIT 1",
        "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC",
        "SELECT T1.CustomerID FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption  FROM customers AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112'  GROUP BY T1.CustomerID  ORDER BY TotalConsumption DESC"
    ],
    "1174": [
        "SELECT AVG(1999 - STRFTIME('%Y', P.Birthday)) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "SELECT AVG(STRFTIME('%Y', '1999-01-01') - STRFTIME('%Y', P.Birthday)) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "SELECT AVG(SUBTRACT('1999', STRFTIME('%Y', P.Birthday))) AS average_age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "SELECT AVG(CAST(1999 - strftime('%Y', P.Birthday) AS REAL)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "SELECT AVG(1999 - strftime('%Y', T1.Birthday)) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.Date BETWEEN '1991-10-01' AND '1991-10-30'",
        "SELECT AVG(1999 - STRFTIME('%Y', P.Birthday))  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'"
    ],
    "1367": [
        "SELECT T.college FROM (SELECT major.college, COUNT(member.member_id) AS num FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college) T ORDER BY T.num DESC LIMIT 1",
        "SELECT T2.college FROM member T1 INNER JOIN major T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ORDER BY COUNT(T1.member_id) DESC LIMIT 1",
        "SELECT college FROM (SELECT major.college, COUNT(member.member_id) AS num FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college) T ORDER BY T.num DESC LIMIT 1",
        "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.college ORDER BY COUNT(T2.link_to_major) DESC LIMIT 1",
        "SELECT m.link_to_major FROM member m JOIN major j ON m.link_to_major = j.major_id GROUP BY j.college ORDER BY COUNT(m.member_id) DESC LIMIT 1",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1"
    ],
    "535": [
        "SELECT COUNT(T1.Id) FROM users AS T1 WHERE T1.UpVotes > 100 AND T1.DownVotes > 1",
        "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1",
        "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1",
        "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1",
        "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1",
        "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1"
    ],
    "239": [
        "SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'",
        "SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'",
        "SELECT COUNT(T1.bond_id) FROM connected AS T1 WHERE T1.atom_id = 'TR%_19'",
        "SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19'",
        "SELECT COUNT(*) FROM connected T1 WHERE T1.atom_id = 'TR%_19' OR T1.atom_id2 = 'TR%_19'",
        "SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'"
    ],
    "1400": [
        "SELECT (SUM(CASE WHEN T1.type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.event_id)) AS percentage_share FROM event AS T1 WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'",
        "SELECT (COUNT(CASE WHEN type = 'Community Service' THEN 1 END) * 100.0 / COUNT(event_id)) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'",
        "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'",
        "SELECT CAST(SUM(CASE WHEN T1.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'",
        "SELECT (COUNT(CASE WHEN T1.type = 'Community Service' THEN 1 END) * 100.0 / COUNT(T1.event_id)) AS percentage_share FROM event T1 WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'",
        "SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS percentage_share  FROM event  WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'"
    ],
    "283": [
        "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' LIMIT 1",
        "SELECT MAX(T2.label) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "SELECT DISTINCT m.label FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca'",
        "SELECT T2.label, T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "SELECT T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'"
    ],
    "38": [
        "SELECT schools.Website FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000",
        "SELECT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000",
        "SELECT schools.Website FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000",
        "SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000",
        "SELECT T1.Website FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000",
        "SELECT DISTINCT schools.Website  FROM schools  INNER JOIN satscores ON schools.CDSCode = satscores.cds  WHERE schools.County = 'Los Angeles'  AND satscores.NumTstTakr BETWEEN 2000 AND 3000"
    ],
    "1044": [
        "SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10'",
        "SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10'",
        "SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10'",
        "SELECT player_name, birthday FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'",
        "SELECT id FROM Player WHERE substr(birthday, 1, 7) = '1970-10'",
        "SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10'"
    ],
    "1491": [
        "SELECT Country, COUNT(GasStationID) AS Total_Value_For_Money FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country",
        "SELECT Country, COUNT(*) AS Total_Value_For_Money FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country",
        "SELECT gasstations.Country, COUNT(gasstations.GasStationID) AS total_value_for_money_stations FROM gasstations WHERE gasstations.Segment = 'Value for money' GROUP BY gasstations.Country",
        "SELECT Country, COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country",
        "SELECT Country, COUNT(GasStationID) AS TotalDiscountStations FROM gasstations WHERE Segment = 'Discount' GROUP BY Country",
        "SELECT Country, COUNT(*) AS value_for_money_count FROM gasstations WHERE Segment = 'Discount' GROUP BY Country"
    ],
    "1092": [
        "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2008/2009' GROUP BY L.id ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name FROM League L JOIN (SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY match_count DESC LIMIT 1) AS M ON L.id = M.league_id",
        "SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(id) DESC LIMIT 1",
        "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1"
    ],
    "1146": [
        "SELECT T.team_long_name FROM Match M INNER JOIN Team T ON M.away_team_api_id = T.team_api_id WHERE M.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)",
        "SELECT T.team_long_name FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id GROUP BY M.away_team_api_id ORDER BY SUM(M.away_team_goal) DESC LIMIT 1",
        "SELECT T.team_long_name, MAX(M.away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id GROUP BY T.team_long_name ORDER BY MAX(M.away_team_goal) DESC LIMIT 1",
        "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)",
        "SELECT T1.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match) LIMIT 1",
        "SELECT T2.team_long_name  FROM Match AS T1  INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id  WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)"
    ],
    "419": [
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000",
        "SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000",
        "SELECT COUNT(id) FROM cards WHERE colors IS NOT NULL AND edhrecRank > 12000",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000"
    ],
    "65": [
        "SELECT (COUNT(CASE WHEN f.`Charter Funding Type` = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS 'the ratio in percentage', 'Santa Clara County schools' AS 'Santa Clara County schools', 'all other types of charter school funding' AS 'all other types of charter school funding' FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Santa Clara'",
        "SELECT (COUNT(CASE WHEN f.`Charter Funding Type` = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS 'the ratio in percentage' FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Santa Clara'",
        "SELECT (COUNT(*) FILTER (WHERE schools.FundingType = 'Locally funded') * 100.0 / COUNT(*)) AS ratio_percentage, 'Santa Clara County schools' AS county, 'all other types of charter school funding' AS funding_type FROM schools WHERE schools.County = 'Santa Clara'",
        "SELECT CAST(COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM frpm WHERE County = 'Santa Clara'",
        "SELECT (COUNT(CASE WHEN T1.FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_ratio FROM schools AS T1 WHERE T1.County = 'Santa Clara'",
        "SELECT (COUNT(CASE WHEN `Charter Funding Type` = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_ratio  FROM frpm  WHERE `County Name` = 'Santa Clara'"
    ],
    "816": [
        "SELECT superhero_name FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE HA.attribute_value BETWEEN 75 AND 80",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id  WHERE T2.attribute_value BETWEEN 75 AND 80"
    ],
    "326": [
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '='",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
        "SELECT DISTINCT T4.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 's' AND T3.bond_type = '='",
        "SELECT T3.molecule_id FROM atom AS T1 JOIN bond AS T2 ON T1.atom_id = T2.bond_id JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
        "SELECT DISTINCT M.molecule_id FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE A.element = 's' AND B.bond_type = '='"
    ],
    "1403": [
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.status = 'Closed' AND B.remaining < 0 ORDER BY B.remaining LIMIT 1",
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.status = 'Closed' AND B.remaining < 0 ORDER BY B.remaining ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining < 0 AND T1.status = 'Closed' ORDER BY T2.remaining ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1"
    ],
    "1215": [
        "SELECT (L.TP - 8.5) AS deviation FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.TP > 8.5",
        "SELECT L.ID, (L.TP - 8.5) AS deviation FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.TP > 8.5",
        "SELECT (TP - 8.5) AS Deviation FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5",
        "SELECT (T1.TP - 8.5) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP > 8.5",
        "SELECT P.ID, (L.TP - 8.5) AS deviation FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5",
        "SELECT (L.TP - 8.5) AS deviation FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.TP > 8.5"
    ],
    "395": [
        "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1'",
        "SELECT COUNT(T1.id) FROM cards AS T1 WHERE T1.artist = 'UDON' AND T1.availability = 'mtgo' AND T1.hand = '-1'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1'",
        "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1'"
    ],
    "468": [
        "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified'",
        "SELECT ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Eighth Edition' AND ST.language = 'Chinese Simplified'",
        "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
        "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
        "SELECT ST.translation FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Eighth Edition' AND ST.language = 'Chinese Simplified'",
        "SELECT ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Eighth Edition' AND ST.language = 'Chinese Simplified'"
    ],
    "126": [
        "SELECT CAST(COUNT(account.account_id) AS REAL) * 100 / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%') AS percentage, COUNT(account.account_id) AS account FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Decin' AND account.date LIKE '1993%'",
        "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%') AS percentage, COUNT(*) AS account FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Decin' AND account.date LIKE '1993%'",
        "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%') AS percentage, COUNT(*) AS account FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Decin' AND account.date LIKE '1993%'",
        "SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.date) = '1993'",
        "SELECT (COUNT(T1.account_id) * 100.0 / (SELECT COUNT(*) FROM account WHERE date BETWEEN '1993-01-01' AND '1993-12-31')) AS percentage FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Decin' AND T1.date BETWEEN '1993-01-01' AND '1993-12-31'",
        "SELECT (COUNT(T1.account_id) * 100.0 / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%')) AS percentage FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Decin' AND T1.date LIKE '1993%'"
    ],
    "285": [
        "SELECT A.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR001_10_11'",
        "SELECT A.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR001_10_11'",
        "SELECT DISTINCT A.element FROM atom AS A JOIN bond AS B ON A.atom_id = SUBSTR(B.bond_id, 7, 2) OR A.atom_id = SUBSTR(B.bond_id, 10, 2) WHERE B.bond_id = 'TR001_10_11'",
        "SELECT T.element FROM atom AS T INNER JOIN bond AS B ON B.bond_id = 'TR001_10_11' WHERE T.atom_id IN (SUBSTR(B.bond_id, 7, 2), SUBSTR(B.bond_id, 10, 2))",
        "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.atom_id = SUBSTR(T2.bond_id, 7, 2) OR T1.atom_id = SUBSTR(T2.bond_id, 10, 2) WHERE T2.bond_id = 'TR001_10_11'"
    ],
    "1464": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'",
        "SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.link_to_member = T2.link_to_member WHERE T2.date_received = '2019-09-09'",
        "SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'"
    ],
    "426": [
        "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3",
        "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3",
        "SELECT sets.id, sets.name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY sets.name LIMIT 3",
        "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3",
        "SELECT sets.id, sets.name FROM sets WHERE sets.mtgoCode IS NULL OR sets.mtgoCode = '' ORDER BY sets.name ASC LIMIT 3",
        "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3"
    ],
    "1000": [
        "SELECT circuits.name, circuits.location || ', ' || circuits.country AS full_location FROM races JOIN circuits ON races.circuitId = circuits.circuitId ORDER BY races.date DESC LIMIT 1",
        "SELECT circuits.name, circuits.location || ', ' || circuits.country AS full_location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.date = (SELECT MAX(date) FROM races)",
        "SELECT C.location || ', ' || C.country AS full_location FROM races R INNER JOIN circuits C ON R.circuitId = C.circuitId WHERE R.date = (SELECT MAX(date) FROM races)",
        "###SQL: SELECT c.location || ', ' || c.country FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races)",
        "SELECT T2.location || ', ' || T2.country AS full_location FROM races T1 INNER JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.date = (SELECT MAX(date) FROM races)",
        "SELECT T1.location || ', ' || T1.country AS full_location  FROM circuits AS T1  INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.date = (SELECT MAX(date) FROM races)"
    ],
    "1311": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis IN (1, 2) AND L.PT < 14",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis IN (1, 2) AND L.PT < 14",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis IN (1, 2) AND L.PT < 14",
        "SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis IN (1, 2) AND Laboratory.PT < 14",
        "SELECT COUNT(DISTINCT P.ID) FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis IN (1, 2) AND L.PT < 14",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14"
    ],
    "58": [
        "SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'",
        "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "SELECT schools.Phone, schools.Ext, schools.School FROM schools WHERE schools.MailZip = '95203-3704'",
        "SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'",
        "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "SELECT School, Phone, AdmFName2 FROM schools WHERE Zip = '95203-3704'"
    ],
    "626": [
        "SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010",
        "SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010",
        "SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010",
        "SELECT COUNT(Id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
        "SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010'",
        "SELECT COUNT(*) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'"
    ],
    "538": [
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT P.Title FROM users AS U JOIN posts AS P ON U.Id = P.OwnerUserId WHERE U.DisplayName = 'csgillespie'",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    ],
    "217": [
        "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.molecule_id = 'TR181'",
        "SELECT T2.atom_id2 AS connected_atom_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR181'",
        "SELECT DISTINCT T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T3.molecule_id = 'TR181'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 WHERE T1.bond_id IN (SELECT T2.bond_id FROM bond AS T2 WHERE T2.molecule_id = 'TR181')",
        "SELECT DISTINCT T2.atom_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181'",
        "SELECT DISTINCT T2.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181'"
    ],
    "7": [
        "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 > 0 ORDER BY satscores.NumTstTakr DESC LIMIT 1",
        "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 > 0 ORDER BY satscores.NumTstTakr DESC LIMIT 1",
        "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) AND satscores.NumGE1500 > 1500",
        "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = (SELECT MAX(T3.NumGE1500) FROM satscores AS T3 WHERE T3.NumGE1500 >= 1500)",
        "SELECT T2.Phone FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 > 0 ORDER BY T1.NumTstTakr DESC LIMIT 1",
        "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) AND T1.NumGE1500 > 0"
    ],
    "1450": [
        "SELECT Z.city, Z.county FROM income AS I JOIN event AS E ON I.link_to_member = E.event_id JOIN zip_code AS Z ON E.location = Z.city WHERE I.amount > 40 GROUP BY E.event_id HAVING COUNT(I.income_id) > 40",
        "SELECT z.city, z.county FROM income AS i JOIN event AS e ON i.link_to_member = e.event_id JOIN zip_code AS z ON e.location = z.city GROUP BY e.event_id HAVING COUNT(i.income_id) > 40",
        "SELECT z.city, z.county FROM income AS i INNER JOIN budget AS b ON i.link_to_member = b.budget_id INNER JOIN event AS e ON b.link_to_event = e.event_id INNER JOIN zip_code AS z ON e.location = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 40",
        "SELECT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code GROUP BY zip_code.city, zip_code.state HAVING COUNT(income.amount) > 40",
        "SELECT Z.city, Z.county FROM income AS I JOIN member AS M ON I.link_to_member = M.member_id JOIN zip_code AS Z ON M.zip = Z.zip_code JOIN event AS E ON I.link_to_member = M.member_id GROUP BY E.event_id HAVING COUNT(I.income_id) > 40",
        "SELECT DISTINCT Z.city, Z.county  FROM income AS I  INNER JOIN event AS E ON I.link_to_event = E.event_id  INNER JOIN zip_code AS Z ON E.zip = Z.zip_code  GROUP BY E.event_id  HAVING COUNT(I.income_id) > 40"
    ],
    "562": [
        "SELECT CommentCount FROM posts WHERE ViewCount = 1910",
        "SELECT CommentCount FROM posts WHERE ViewCount = 1910",
        "SELECT posts.CommentCount FROM posts WHERE posts.ViewCount = 1910",
        "SELECT COUNT(comments.PostId) FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 915",
        "SELECT CommentCount FROM posts WHERE ViewCount = 1910",
        "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"
    ],
    "1062": [
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010'",
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010'",
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010'",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80 AND strftime('%Y', T2.date) BETWEEN '2008' AND '2010'",
        "SELECT P.player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating > 80 AND strftime('%Y', PA.date) BETWEEN '2008' AND '2010'",
        "SELECT DISTINCT P.player_name FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating > 80  AND STRFTIME('%Y', PA.date) BETWEEN '2008' AND '2010'"
    ],
    "1098": [
        "SELECT MAX(TA.chanceCreationPassing), TA.chanceCreationPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Ajax'",
        "SELECT MAX(TA.chanceCreationPassing) AS \"Ajax's highest chance creation passing score\", TA.chanceCreationPassingClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'",
        "SELECT MAX(TA.chanceCreationPassing) AS \"Ajax's highest chance creation passing score\", TA.chanceCreationPassingClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'",
        "SELECT MAX(TA.chanceCreationPassing), TA.chanceCreationPassingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'",
        "SELECT MAX(TA.chanceCreationPassing) AS highest_chance_creation_passing_score, TA.chanceCreationPassingClass AS classification FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'",
        "SELECT MAX(TA.chanceCreationPassing) AS max_passing_score, TA.chanceCreationPassingClass  FROM Team_Attributes AS TA  INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id  WHERE T.team_long_name = 'Ajax'"
    ],
    "585": [
        "SELECT SUM(v.BountyAmount) FROM votes AS v INNER JOIN posts AS p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'",
        "SELECT SUM(v.BountyAmount) FROM votes AS v INNER JOIN posts AS p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'",
        "SELECT SUM(v.BountyAmount) FROM votes v INNER JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'",
        "###SQL: SELECT SUM(v.BountyAmount) FROM votes AS v INNER JOIN posts AS p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'",
        "SELECT SUM(T2.BountyAmount) FROM posts AS T1 JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
        "SELECT SUM(v.BountyAmount) FROM posts AS p INNER JOIN votes AS v ON p.Id = v.PostId WHERE p.Title LIKE '%data%'"
    ],
    "1461": [
        "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'",
        "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'",
        "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
        "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'",
        "SELECT M.last_name, M.phone FROM major MA JOIN member M ON MA.major_id = M.link_to_major WHERE MA.major_name = 'Elementary Education'",
        "SELECT T1.last_name, T1.phone  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.major_name = 'Elementary Education'"
    ],
    "1010": [
        "SELECT MIN(T1.time) FROM lapTimes AS T1 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT MIN(T1.time) AS lap_record FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY (CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS REAL) * 60) + CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1) AS REAL) ASC LIMIT 1",
        "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "SELECT T1.fastestLapTime FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.fastestLapTime LIMIT 1",
        "SELECT MIN(T3.time) FROM lapTimes AS T3 INNER JOIN results AS T2 ON T3.raceId = T2.raceId INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"
    ],
    "316": [
        "SELECT T1.molecule_id FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c' AND T1.label = '-'",
        "SELECT T2.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
        "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"
    ],
    "60": [
        "SELECT schools.Website FROM schools WHERE schools.Virtual = 'P' AND schools.Charter = 1 AND schools.City = 'San Joaquin'",
        "SELECT schools.Website FROM schools WHERE schools.Virtual = 'P' AND schools.Charter = 1 AND schools.County = 'San Joaquin'",
        "SELECT schools.Website FROM schools WHERE schools.Virtual = 'P' AND schools.Charter = 1 AND schools.County = 'San Joaquin'",
        "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'",
        "SELECT T1.Website FROM schools T1 WHERE T1.Charter = 1 AND T1.Virtual = 'P' AND T1.County = 'San Joaquin'",
        "SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'"
    ],
    "1013": [
        "SELECT time FROM lapTimes L JOIN races R ON L.raceId = R.raceId WHERE R.name = 'Austrian Grand Prix' ORDER BY (CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 + CAST(SUBSTR(time, INSTR(time, ':') + 1) AS REAL)) ASC LIMIT 1",
        "SELECT MIN(T2.time) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix'",
        "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix' ORDER BY (CASE WHEN INSTR(T1.time, ':') <> INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + INSTR(T1.time, ':') THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(T1.time, INSTR(T1.time, ':') - 2 * (INSTR(T1.time, ':') = INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + INSTR(T1.time, ':')), INSTR(T1.time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(T1.time, '.') - INSTR(T1.time, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix' ORDER BY CAST(substr(T1.time, 1, instr(T1.time, ':') - 1) AS INTEGER) * 60 + CAST(substr(T1.time, instr(T1.time, ':') + 1) AS REAL) ASC LIMIT 1",
        "SELECT MIN(results.fastestLapTime) FROM results JOIN races AS T1 ON results.raceId = T1.raceId JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'red_bull_ring'",
        "SELECT MIN(results.fastestLapTime) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix'"
    ],
    "586": [
        "SELECT U.DisplayName FROM votes AS V INNER JOIN posts AS P ON V.PostId = P.Id INNER JOIN users AS U ON V.UserId = U.Id WHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%'",
        "SELECT U.DisplayName FROM votes AS V INNER JOIN posts AS P ON V.PostId = P.Id INNER JOIN users AS U ON V.UserId = U.Id WHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%'",
        "SELECT u.DisplayName FROM votes v INNER JOIN posts p ON v.PostId = p.Id INNER JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'",
        "SELECT users.DisplayName FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE votes.BountyAmount = 50 AND posts.Title LIKE '%variance%'",
        "SELECT U.DisplayName FROM votes V JOIN posts P ON V.PostId = P.Id JOIN users U ON V.UserId = U.Id WHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%'",
        "SELECT U.DisplayName  FROM votes AS V  INNER JOIN posts AS P ON V.PostId = P.Id  INNER JOIN users AS U ON V.UserId = U.Id  WHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%'"
    ],
    "1475": [
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000",
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000",
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000",
        "SELECT COUNT(DISTINCT customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Consumption < 30000 AND yearmonth.Date BETWEEN '201201' AND '201212'",
        "SELECT COUNT(DISTINCT C.CustomerID) FROM customers C JOIN yearmonth Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'KAM' AND Y.Consumption < 30000 AND Y.Date BETWEEN 201201 AND 201212",
        "SELECT COUNT(DISTINCT T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'KAM' AND T1.Consumption < 30000"
    ],
    "1119": [
        "SELECT COUNT(*) FROM Match WHERE home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_2 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_3 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_4 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_5 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_6 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_7 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_8 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_9 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_10 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_11 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')",
        "SELECT COUNT(M.home_team_goal) FROM Match M WHERE M.home_player_1 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_2 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_3 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_4 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_5 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_6 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_7 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_8 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_9 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_10 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_11 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon')",
        "SELECT SUM(M.home_team_goal) FROM Match M WHERE M.home_player_1 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_2 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_3 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_4 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_5 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_6 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_7 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_8 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_9 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_10 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon') OR M.home_player_11 = (SELECT P.player_api_id FROM Player P WHERE P.player_name = 'Aaron Lennon')",
        "###SQL: SELECT COUNT(M1.home_team_goal) FROM Match AS M1 INNER JOIN Player AS P1 ON M1.home_player_X1 = P1.player_api_id OR M1.home_player_X2 = P1.player_api_id OR M1.home_player_X3 = P1.player_api_id OR M1.home_player_X4 = P1.player_api_id OR M1.home_player_X5 = P1.player_api_id OR M1.home_player_X6 = P1.player_api_id OR M1.home_player_X7 = P1.player_api_id OR M1.home_player_X8 = P1.player_api_id OR M1.home_player_X9 = P1.player_api_id OR M1.home_player_X10 = P1.player_api_id OR M1.home_player_X11 = P1.player_api_id WHERE P1.player_name = 'Aaron Lennon'",
        "SELECT SUM(M.home_team_goal) FROM Player P JOIN Match M ON P.player_api_id = M.home_player_1 OR P.player_api_id = M.home_player_2 OR P.player_api_id = M.home_player_3 OR P.player_api_id = M.home_player_4 OR P.player_api_id = M.home_player_5 OR P.player_api_id = M.home_player_6 OR P.player_api_id = M.home_player_7 OR P.player_api_id = M.home_player_8 OR P.player_api_id = M.home_player_9 OR P.player_api_id = M.home_player_10 OR P.player_api_id = M.home_player_11 WHERE P.player_name = 'Aaron Lennon'",
        "SELECT SUM(Match.home_team_goal)  FROM Match  INNER JOIN Player ON      Player.player_api_id IN (Match.home_player_1, Match.home_player_2, Match.home_player_3, Match.home_player_4, Match.home_player_5, Match.home_player_6, Match.home_player_7, Match.home_player_8, Match.home_player_9, Match.home_player_10, Match.home_player_11)  WHERE Player.player_name = 'Aaron Lennon'"
    ],
    "47": [
        "SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT COUNT(*) / 12.0 AS monthly_average_schools FROM schools WHERE County = 'Alameda' AND DOCType = 'Elementary School District' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT COUNT(*) / 12 AS monthly_average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980'",
        "SELECT CAST(COUNT(T1.CDSCode) AS REAL) / 12 FROM schools AS T1 WHERE T1.DOC = '52' AND strftime('%Y', T1.OpenDate) = '1980' AND T1.County = 'Alameda'",
        "SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND County = 'Alameda' AND DOC = '52'",
        "SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE DOC = '52' AND County = 'Alameda' AND STRFTIME('%Y', OpenDate) = '1980'"
    ],
    "852": [
        "SELECT COUNT(races.raceId) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')",
        "SELECT COUNT(*) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ('China', 'Japan', 'India', 'Singapore', 'Malaysia', 'United Arab Emirates', 'Russia', 'UK', 'Germany', 'France', 'Italy', 'Belgium', 'Spain', 'Portugal', 'Netherlands')",
        "SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('Asia', 'Europe')",
        "SELECT COUNT(DISTINCT T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('France')",
        "SELECT COUNT(*) FROM races AS R JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('China', 'UK', 'France', 'Germany', 'Spain', 'Italy', 'Japan', 'India', 'Malaysia', 'Singapore')",
        "SELECT COUNT(RaceId) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('Japan', 'China', 'India', 'France', 'Germany', 'Italy', 'Spain', 'UK', 'Netherlands', 'Belgium', 'Russia')"
    ],
    "1196": [
        "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "SELECT Symptoms, COUNT(*) as symptom_count FROM Examination WHERE Diagnosis LIKE '%SLE%' GROUP BY Symptoms ORDER BY symptom_count DESC LIMIT 1",
        "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "SELECT E.Symptoms FROM Examination AS E JOIN Patient AS P ON E.ID = P.ID WHERE P.Diagnosis LIKE '%SLE%' GROUP BY E.Symptoms ORDER BY COUNT(E.Symptoms) DESC LIMIT 1",
        "SELECT Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1"
    ],
    "1468": [
        "SELECT Z.city FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'",
        "SELECT Z.city FROM member AS M JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'",
        "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
        "SELECT zip_code.city FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
        "SELECT Z.city FROM member AS M JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'",
        "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'"
    ],
    "525": [
        "SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND (T2.status = 'Banned' OR T2.status = 'Restricted')",
        "SELECT T1.uuid FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND (T2.status = 'Banned' OR T2.status = 'Restricted')",
        "SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND (T2.status = 'Banned' OR T2.status = 'Restricted')",
        "SELECT uuid FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status IN ('Banned', 'Restricted'))",
        "SELECT T1.uuid FROM legalities AS T1 WHERE T1.format = 'oldschool' AND (T1.status = 'banned' OR T1.status = 'restricted')",
        "SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND (T2.status = 'banned' OR T2.status = 'restricted')"
    ],
    "1082": [
        "SELECT L.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Germany'",
        "SELECT L.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Germany'",
        "SELECT L.name FROM League L JOIN Country C ON L.country_id = C.id WHERE C.name = 'Germany'",
        "SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Germany'",
        "SELECT id, name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany')",
        "SELECT L.name  FROM League AS L  INNER JOIN Country AS C ON L.country_id = C.id  WHERE C.name = 'Germany'"
    ],
    "1511": [
        "SELECT AVG(T1.Amount * T1.Price) AS average_total_price FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
        "SELECT AVG(t.Amount * t.Price) FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'",
        "SELECT AVG(TA.Price * TA.Amount) AS average_total_price FROM transactions_1k AS TA INNER JOIN customers AS C ON TA.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'",
        "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
        "SELECT AVG(T2.Price) FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'"
    ],
    "1330": [
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
        "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Tyler' AND T2.last_name = 'Hewitt'",
        "SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'"
    ],
    "1309": [
        "SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis = 'MCTD'",
        "SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis = 'MCTD'",
        "SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis = 'MCTD'",
        "SELECT T1.PLT FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'",
        "SELECT T1.PLT FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'",
        "SELECT L.PLT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'MCTD' AND L.PLT > 100 AND L.PLT < 400"
    ],
    "385": [
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Beacon of Immortality'",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Beacon of Immortality'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Beacon of Immortality'",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Beacon of Immortality'",
        "SELECT R.text FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Beacon of Immortality'"
    ],
    "1398": [
        "SELECT T2.event_name FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE B.category = 'Advertisement' ORDER BY B.spent DESC LIMIT 1",
        "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
        "###SQL: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1",
        "SELECT T2.event_name FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "SELECT T2.event_name  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T1.category = 'Advertisement'  AND T1.spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement')"
    ],
    "528": [
        "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Hour of Devastation' AND T2.status = 'Legal'",
        "SELECT cards.name, legalities.format FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
        "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.id = T1.id WHERE T3.name = 'Hour of Devastation' AND T2.status = 'Legal'",
        "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T3.name = 'Hour of Devastation' WHERE T2.status = 'Legal'",
        "SELECT DISTINCT C.name, L.format FROM sets S JOIN cards C ON S.code = C.setCode JOIN legalities L ON C.uuid = L.uuid WHERE S.name = 'Hour of Devastation' AND L.status = 'Legal'",
        "SELECT T1.name, T3.format  FROM cards AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid  WHERE T2.name = 'Hour of Devastation' AND T3.status = 'Legal'"
    ],
    "1463": [
        "SELECT event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
        "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
        "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking'",
        "SELECT T2.event_name FROM budget T1 INNER JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food'",
        "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food'"
    ],
    "1472": [
        "SELECT yearmonth.CustomerID FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212' AND customers.Segment = 'LAM' ORDER BY yearmonth.Consumption ASC LIMIT 1",
        "SELECT yearmonth.CustomerID FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'LAM' AND yearmonth.Date BETWEEN '201201' AND '201212' ORDER BY yearmonth.Consumption ASC LIMIT 1",
        "SELECT yearmonth.CustomerID FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date BETWEEN '201201' AND '201212' AND customers.Segment = 'LAM' ORDER BY yearmonth.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID, T2.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' ORDER BY T1.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' ORDER BY T1.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' ORDER BY T1.Consumption ASC LIMIT 1"
    ],
    "417": [
        "SELECT (COUNT(CASE WHEN sets.type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage, COUNT(*) AS \"Japanese translated sets\" FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Japanese'",
        "SELECT (COUNT(CASE WHEN sets.type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese'",
        "SELECT (COUNT(DISTINCT set_translations.setCode) * 100.0 / (SELECT COUNT(*) FROM set_translations)) AS percentage, COUNT(DISTINCT set_translations.setCode) AS \"Japanese translated sets\" FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Japanese' AND sets.type = 'expansion'",
        "SELECT CAST(COUNT(CASE WHEN T1.language = 'Japanese' THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN T1.language = 'Japanese' THEN 1 END) FROM sets AS T1 WHERE T1.type = 'expansion'",
        "SELECT (COUNT(CASE WHEN T1.type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM set_translations T2 JOIN sets T1 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'",
        "SELECT (COUNT(CASE WHEN S.type = 'expansion' THEN 1 END) * 100.0 / COUNT(T.language)) AS percentage  FROM set_translations AS T  INNER JOIN sets AS S ON T.setCode = S.code  WHERE T.language = 'Japanese'"
    ],
    "1469": [
        "SELECT T1.first_name, T1.last_name AS full_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T1.zip = 28092",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina'",
        "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina'",
        "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.position  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092"
    ],
    "1137": [
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player)) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80",
        "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM Player_Attributes",
        "SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Player_Attributes",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80"
    ],
    "964": [
        "SELECT code FROM drivers WHERE nationality = 'American'",
        "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'American'",
        "SELECT code FROM drivers WHERE nationality = 'American'",
        "SELECT code FROM drivers WHERE nationality = 'American'",
        "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'America'",
        "SELECT code FROM drivers WHERE nationality = 'America'"
    ],
    "1180": [
        "SELECT Patient.SEX FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-06-12'",
        "SELECT Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-06-12'",
        "SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = 9 AND L.Date = '1992-06-12'",
        "SELECT T2.SEX FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GPT = 108 AND T1.Date = '1992-06-12'",
        "SELECT P.SEX FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = '9' AND L.Date = '1992-06-12'",
        "SELECT DISTINCT P.SEX FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GPT = '9' AND L.Date = '1992-06-12'"
    ],
    "1256": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRP = '+' AND P.Description IS NULL",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRP = '+' AND P.Description IS NULL",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.CRP = '+' AND Patient.Description IS NULL",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP = '+' AND P.Description IS NULL",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRP = '+' AND P.Description IS NULL"
    ],
    "903": [
        "SELECT COUNT(DISTINCT r.raceId) FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId INNER JOIN circuits AS c ON r.circuitId = c.circuitId INNER JOIN drivers AS d ON res.driverId = d.driverId WHERE d.surname = 'Schumacher' AND d.forename = 'Michael' AND res.points = (SELECT MAX(points) FROM results WHERE raceId = r.raceId) AND c.name = 'Sepang International Circuit'",
        "SELECT COUNT(*) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit' AND results.positionOrder = 1",
        "SELECT COUNT(*) FROM results AS R INNER JOIN races AS RAC ON R.raceId = RAC.raceId INNER JOIN circuits AS C ON RAC.circuitId = C.circuitId INNER JOIN constructors AS CON ON R.constructorId = CON.constructorId WHERE CON.name = 'Ferrari' AND C.name = 'Sepang International Circuit' AND R.points = (SELECT MAX(points) FROM results WHERE raceId = R.raceId)",
        "SELECT MAX(T2.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN drivers AS T4 ON T1.driverId = T4.driverId WHERE T3.name = 'Sepang International Circuit' AND T4.surname = 'Schumacher' AND T4.forename = 'Michael'",
        "SELECT COUNT(*) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId JOIN circuits T3 ON T2.circuitId = T3.circuitId JOIN drivers T4 ON T1.driverId = T4.driverId WHERE T3.circuitRef = 'sepang' AND T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T1.points = (SELECT MAX(points) FROM results T5 WHERE T5.raceId = T1.raceId)",
        "SELECT COUNT(*) FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId  INNER JOIN constructors AS T4 ON T1.constructorId = T4.constructorId  WHERE T3.name = 'Sepang International Circuit' AND T4.name = 'Michael Schumacher' AND T1.points = (SELECT MAX(points) FROM results WHERE raceId = T2.raceId)"
    ],
    "1158": [
        "SELECT T1.ID, T1.Birthday, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
        "SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250",
        "SELECT T1.ID, T1.SEX, T1.Birthday, T1.Admission, T1.Diagnosis, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250",
        "SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250"
    ],
    "638": [
        "SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer'",
        "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'",
        "SELECT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer'",
        "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'",
        "SELECT T2.DisplayName FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'",
        "SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'"
    ],
    "1481": [
        "SELECT AVG(CASE WHEN Segment = 'SME' THEN TotalConsumption END) - AVG(CASE WHEN Segment = 'LAM' THEN TotalConsumption END) AS Difference_SME_LAM, AVG(CASE WHEN Segment = 'LAM' THEN TotalConsumption END) - AVG(CASE WHEN Segment = 'KAM' THEN TotalConsumption END) AS Difference_LAM_KAM, AVG(CASE WHEN Segment = 'KAM' THEN TotalConsumption END) - AVG(CASE WHEN Segment = 'SME' THEN TotalConsumption END) AS Difference_KAM_SME FROM (SELECT T1.Segment, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201301' AND '201312' AND T1.Currency = 'CZK' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1) AS Subquery",
        "SELECT (AVG(CASE WHEN Segment = 'SME' THEN total_consumption END) - AVG(CASE WHEN Segment = 'LAM' THEN total_consumption END)) AS difference_SME_LAM, (AVG(CASE WHEN Segment = 'LAM' THEN total_consumption END) - AVG(CASE WHEN Segment = 'KAM' THEN total_consumption END)) AS difference_LAM_KAM, (AVG(CASE WHEN Segment = 'KAM' THEN total_consumption END) - AVG(CASE WHEN Segment = 'SME' THEN total_consumption END)) AS difference_KAM_SME FROM (SELECT C.Segment, SUM(Y.Consumption) AS total_consumption FROM yearmonth Y INNER JOIN customers C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201301' AND '201312 GROUP BY C.CustomerID HAVING total_consumption = (SELECT MIN(SUM(Y2.Consumption)) FROM yearmonth Y2 INNER JOIN customers C2 ON Y2.CustomerID = C2.CustomerID WHERE Y2.Date BETWEEN '201301' AND '201312' AND C2.Segment = C.Segment) ) AS segment_consumption",
        "SELECT (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) - (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'LAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) AS SME_LAM_Difference, (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'LAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) - (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) AS LAM_KAM_Difference, (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) - (SELECT AVG(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1)) AS KAM_SME_Difference",
        "SELECT (CAST(SUM(T1.Consumption) AS REAL) / COUNT(T1.CustomerID)) - (CAST(SUM(T2.Consumption) AS REAL) / COUNT(T2.CustomerID)), (CAST(SUM(T2.Consumption) AS REAL) / COUNT(T2.CustomerID)) - (CAST(SUM(T3.Consumption) AS REAL) / COUNT(T3.CustomerID)), (CAST(SUM(T3.Consumption) AS REAL) / COUNT(T3.CustomerID)) - (CAST(SUM(T1.Consumption) AS REAL) / COUNT(T1.CustomerID)) FROM yearmonth AS T1 INNER JOIN customers AS C1 ON T1.CustomerID = C1.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND C1.Currency = 'CZK' GROUP BY C1.Segment",
        "SELECT (SME_avg - LAM_avg) AS SME_LAM_diff, (LAM_avg - KAM_avg) AS LAM_KAM_diff, (KAM_avg - SME_avg) AS KAM_SME_diff FROM (SELECT AVG(Consumption) AS SME_avg FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME' AND T2.Currency = 'CZK' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1) AS SME, (SELECT AVG(Consumption) AS LAM_avg FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'LAM' AND T2.Currency = 'CZK' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1) AS LAM, (SELECT AVG(Consumption) AS KAM_avg FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'KAM' AND T2.Currency = 'CZK' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1) AS KAM",
        "SELECT      (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS SME_avg) -     (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS LAM_avg) AS SME_LAM_diff,          (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS LAM_avg) -     (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS KAM_avg) AS LAM_KAM_diff,          (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS KAM_avg) -     (SELECT AVG(consumption) FROM (SELECT SUM(Consumption) AS consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID) AS SME_avg) AS KAM_SME_diff"
    ],
    "740": [
        "SELECT COUNT(S.id) FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE G.gender = 'Female' AND A.attribute_name = 'Strength' AND HA.attribute_value = 100",
        "SELECT COUNT(S.id) FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id JOIN gender AS G ON S.gender_id = G.id WHERE G.gender = 'Female' AND A.attribute_name = 'Strength' AND HA.attribute_value = 100",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T2.gender = 'Female' AND T3.attribute_name = 'Strength' AND T3.attribute_value = 100",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100"
    ],
    "1015": [
        "SELECT races.name FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' ORDER BY (CASE WHEN INSTR(results.fastestLapTime, ':') <> INSTR(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, ':') + 1), ':') + INSTR(results.fastestLapTime, ':') THEN CAST(SUBSTR(results.fastestLapTime, 1, INSTR(results.fastestLapTime, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, ':') - 2 * (INSTR(results.fastestLapTime, ':') = INSTR(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, ':') + 1), ':') + INSTR(results.fastestLapTime, ':')), INSTR(results.fastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, ':') + 1, INSTR(results.fastestLapTime, '.') - INSTR(results.fastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix' ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "WITH fastest_lap AS (SELECT T1.FastestLapTime, T2.raceId FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix' AND T1.FastestLapTime IS NOT NULL ORDER BY (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1) AS REAL)) ASC LIMIT 1) SELECT T2.name FROM races AS T2 INNER JOIN fastest_lap AS FL ON T2.raceId = FL.raceId",
        "SELECT T1.raceId, T1.name, T2.time FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix' ORDER BY T2.time ASC LIMIT 1",
        "SELECT R.name FROM races R JOIN circuits C ON R.circuitId = C.circuitId JOIN lapTimes L ON L.raceId = R.raceId WHERE C.name LIKE '%Austrian Grand Prix%' ORDER BY L.time LIMIT 1",
        "SELECT R.name  FROM results AS Res  INNER JOIN races AS R ON Res.raceId = R.raceId  WHERE Res.constructorId IN (SELECT constructorId FROM results WHERE fastestLapTime IS NOT NULL AND raceId IN (SELECT raceId FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix')))  ORDER BY Res.fastestLapTime ASC  LIMIT 1"
    ],
    "1050": [
        "SELECT preferred_foot FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday = (SELECT MAX(birthday) FROM Player) LIMIT 1",
        "SELECT preferred_foot FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.birthday IS NOT NULL ORDER BY P.birthday DESC LIMIT 1",
        "SELECT pa.preferred_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY p.birthday DESC LIMIT 1",
        "SELECT preferred_foot FROM Player ORDER BY birthday DESC LIMIT 1",
        "SELECT PA.preferred_foot FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id ORDER BY P.birthday DESC LIMIT 1",
        "SELECT preferred_foot FROM Player ORDER BY birthday DESC LIMIT 1"
    ],
    "304": [
        "SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "SELECT m.molecule_id, a.element FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+'",
        "SELECT T1.molecule_id, T1.label, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "SELECT T1.molecule_id, T2.element FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
        "SELECT T1.molecule_id, T2.element  FROM molecule AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '+'"
    ],
    "454": [
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)",
        "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND power = '*'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power IS NULL OR power = '*')",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)"
    ],
    "727": [
        "SELECT P.publisher_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.superhero_name = 'Sauron'",
        "SELECT P.publisher_name FROM publisher AS P INNER JOIN superhero AS S ON P.id = S.publisher_id WHERE S.superhero_name = 'Sauron'",
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'"
    ],
    "1382": [
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T2.major_name = 'Interior Design' AND T4.event_name = 'Community Theater'",
        "SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T4.major_name = 'Interior Design' AND T3.event_name = 'Community Theater'",
        "SELECT M.first_name, M.last_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN major AS Maj ON M.link_to_major = Maj.major_id WHERE Maj.major_name = 'Interior Design' AND E.event_name = 'Community Theater'",
        "SELECT M.first_name, M.last_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN major AS Maj ON M.link_to_major = Maj.major_id WHERE Maj.major_name = 'Interior Design' AND E.event_name = 'Community Theater'",
        "SELECT M.member_id FROM major AS M JOIN member AS M2 ON M.major_id = M2.link_to_major JOIN attendance AS A ON M2.member_id = A.link_to_member JOIN event AS E ON A.link_to_event = E.event_id WHERE M.major_name = 'Interior Design' AND E.event_name = 'Community Theater'",
        "SELECT T1.first_name, T1.last_name, T1.email  FROM member AS T1  INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member  INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id  INNER JOIN major AS T4 ON T1.link_to_major = T4.major_id  WHERE T4.major_name = 'Interior Design' AND T3.event_name = 'Community Theater'"
    ],
    "1385": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
        "SELECT M.member_id FROM member AS M JOIN income AS I ON M.member_id = I.link_to_member WHERE I.amount > 40",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member  WHERE T2.amount > 40"
    ],
    "105": [
        "SELECT account.district_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'",
        "SELECT account.district_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'",
        "SELECT account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25'",
        "SELECT T2.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25'",
        "SELECT T1.district_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25'",
        "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'"
    ],
    "637": [
        "SELECT T.TagName FROM posts AS P INNER JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE P.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND P.CommentCount = 0",
        "SELECT DISTINCT T.TagName FROM posts AS P INNER JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE P.OwnerDisplayName = 'Mark Meckes' AND P.CommentCount = 0",
        "SELECT T3.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId LEFT JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0",
        "SELECT T3.TagName FROM tags AS T1 INNER JOIN postLinks AS T2 ON T1.ExcerptPostId = T2.PostId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN users AS T4 ON T3.OwnerUserId = T4.Id WHERE T4.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "SELECT T3.TagName FROM posts T1 JOIN tags T3 ON T1.Id = T3.ExcerptPostId WHERE T1.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND T1.CommentCount = 0",
        "SELECT DISTINCT T3.TagName  FROM users AS T1  INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId  INNER JOIN postLinks AS T4 ON T2.Id = T4.PostId  INNER JOIN tags AS T3 ON T4.RelatedPostId = T3.ExcerptPostId  WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0"
    ],
    "1234": [
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 ORDER BY P.Birthday ASC GROUP BY P.SEX",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 ORDER BY strftime('%Y', 'now') - strftime('%Y', P.Birthday), P.SEX",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.ID ORDER BY strftime('%Y', 'now') - strftime('%Y', P.Birthday) ASC",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX ORDER BY strftime('%Y', T1.Birthday) ASC",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE (L.WBC <= 3.5 OR L.WBC >= 9.0) AND L.WBC IS NOT NULL ORDER BY P.Birthday ASC",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 ORDER BY P.Birthday ASC"
    ],
    "720": [
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING COUNT(hero_power.power_id) > 15",
        "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "SELECT T1.full_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.id HAVING COUNT(T2.power_id) > 15",
        "SELECT T1.full_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  GROUP BY T1.full_name  HAVING COUNT(T2.power_id) > 15"
    ],
    "1496": [
        "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1",
        "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1",
        "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "SELECT customers.Segment FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date = '201309' GROUP BY customers.Segment ORDER BY SUM(yearmonth.Consumption) ASC LIMIT 1",
        "SELECT C.Segment FROM yearmonth AS Y JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date = '201309' GROUP BY C.Segment ORDER BY SUM(Y.Consumption) ASC LIMIT 1",
        "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1"
    ],
    "882": [
        "SELECT MIN(races.year) FROM races WHERE races.name = 'Singapore Grand Prix'",
        "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'",
        "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'",
        "SELECT MIN(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')",
        "SELECT MIN(year) FROM races WHERE name LIKE '%Singapore Grand Prix%'",
        "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'"
    ],
    "926": [
        "SELECT MIN(R.fastestLapTime) FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT MIN(fastestLapTime) FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.fastestLapTime IS NOT NULL",
        "SELECT MIN(T4.fastestLapTime) AS fastest_lap_time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN lapTimes AS T4 ON T4.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "SELECT MIN(T1.fastestLapTime) FROM results AS T1 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT MIN(T2.fastestLapTime) FROM results AS T2 JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL",
        "SELECT MIN(results.fastestLapTime) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
    ],
    "289": [
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR151'"
    ],
    "1195": [
        "SELECT AVG(L.ALB) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE'",
        "SELECT AVG(L.ALB) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE'",
        "SELECT AVG(L.ALB) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND E.Diagnosis LIKE '%SLE%'",
        "###SQL: SELECT AVG(LA.ALB) FROM Laboratory AS LA INNER JOIN Patient AS P ON LA.ID = P.ID WHERE P.SEX = 'F' AND LA.PLT > 400 AND P.Diagnosis = 'SLE'",
        "SELECT AVG(LAB.ALB) FROM Patient AS PAT JOIN Laboratory AS LAB ON PAT.ID = LAB.ID WHERE PAT.SEX = 'F' AND LAB.PLT > 400 AND PAT.Diagnosis = 'SLE'",
        "SELECT AVG(Laboratory.ALB)  FROM Patient  INNER JOIN Examination ON Patient.ID = Examination.ID  INNER JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE'"
    ],
    "1162": [
        "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F' AND strftime('%Y', T1.`First Date`) = '1997' AND T1.Admission = '-'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-'"
    ],
    "1107": [
        "SELECT PA.date FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Constant' AND PA.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = P.player_api_id) LIMIT 1",
        "SELECT PA.date FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Constant' AND PA.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = P.player_api_id) ORDER BY PA.date ASC LIMIT 1",
        "SELECT PA.date FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Kevin Constant' AND PA.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = P.player_api_id) ORDER BY PA.date LIMIT 1",
        "SELECT date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1",
        "SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant')",
        "SELECT MIN(TA.date)  FROM Player_Attributes AS TA  INNER JOIN Player AS TB ON TA.player_api_id = TB.player_api_id  WHERE TB.player_name = 'Kevin Constant' AND TA.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = TB.player_api_id)"
    ],
    "1110": [
        "SELECT TA.buildUpPlayPassingClass FROM Team_Attributes TA INNER JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'FC Lorient' AND TA.date LIKE '2010-02-22%'",
        "SELECT TA.buildUpPlayPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'FC Lorient' AND TA.date LIKE '2010-02-22%'",
        "SELECT TA.buildUpPlayPassingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'FC Lorient' AND TA.date LIKE '2010-02-22%'",
        "SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'FC Lorient' AND T1.date LIKE '2010-02-22%'",
        "SELECT TA.buildUpPlayPassingClass FROM Team T JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'FC Lorient' AND TA.date LIKE '2010-02-22%'",
        "SELECT T2.buildUpPlayPassingClass  FROM Team_Attributes AS T1  INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T2.team_long_name = 'FC Lorient' AND T1.date LIKE '2010-02-22%'"
    ],
    "642": [
        "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "SELECT COUNT(*) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
        "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'"
    ],
    "635": [
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Matt Parker' AND Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4)",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Matt Parker' AND Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4)",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Matt Parker') AND (SELECT COUNT(*) FROM votes WHERE PostId = posts.Id) > 4",
        "SELECT COUNT(posts.Id) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id LEFT JOIN votes ON posts.Id = votes.PostId WHERE users.DisplayName = 'Matt Parker' GROUP BY posts.Id HAVING COUNT(votes.Id) > 4",
        "SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id JOIN votes T3 ON T1.Id = T3.PostId GROUP BY T1.Id HAVING COUNT(T3.Id) > 4 AND T2.DisplayName = 'Matt Parker'",
        "SELECT COUNT(DISTINCT T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN votes AS T3 ON T1.Id = T3.PostId WHERE T2.DisplayName = 'Matt Parker' GROUP BY T1.Id HAVING COUNT(T3.Id) > 4"
    ],
    "99": [
        "SELECT T1.account_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 12 AND T1.date LIKE '1993%' ORDER BY T2.amount DESC LIMIT 1",
        "SELECT T1.account_id FROM account T1 JOIN loan T2 ON T1.account_id = T2.account_id WHERE T2.duration > 12 AND T1.date LIKE '1993%' ORDER BY T2.amount DESC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1",
        "SELECT loan.account_id, MAX(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND strftime('%Y', account.date) = '1993' GROUP BY loan.account_id",
        "SELECT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
        "SELECT T1.account_id  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993'  AND T1.amount = (SELECT MAX(T3.amount) FROM loan AS T3 WHERE T3.duration > 12)"
    ],
    "747": [
        "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
        "SELECT COUNT(full_name) FROM superhero WHERE full_name IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL"
    ],
    "1219": [
        "SELECT AVG(L.UA) AS average_UA FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID)",
        "SELECT AVG(L.UA) AS average_UA FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = L.ID)",
        "SELECT AVG(Laboratory.UA) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Patient.SEX = 'M' AND Laboratory.UA < 8.0) OR (Patient.SEX = 'F' AND Laboratory.UA < 6.5)",
        "SELECT AVG(Laboratory.UA) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE (L.UA < 8.0 AND P.SEX = 'M') OR (L.UA < 6.5 AND P.SEX = 'F') AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID)",
        "SELECT AVG(T2.UA) FROM Laboratory AS T2 JOIN Patient AS T1 ON T1.ID = T2.ID WHERE T2.UA < (CASE WHEN T1.SEX = 'M' THEN 8.0 ELSE 6.5 END) AND T2.Date IN (SELECT MAX(Date) FROM Laboratory AS T3 WHERE T3.ID = T2.ID GROUP BY T3.ID)",
        "SELECT AVG(L.UA)  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5)  AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = L.ID)"
    ],
    "1054": [
        "SELECT PA.defensive_work_rate FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'David Wilson'",
        "SELECT PA.defensive_work_rate FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'David Wilson'",
        "SELECT PA.defensive_work_rate FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'David Wilson'",
        "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson'",
        "SELECT T2.defensive_work_rate FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson'",
        "SELECT PA.defensive_work_rate  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE P.player_name = 'David Wilson'"
    ],
    "892": [
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.points = (SELECT MAX(points) FROM driverStandings)",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId ORDER BY DS.points DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE DS.points = (SELECT MAX(points) FROM driverStandings)",
        "SELECT D.forename, D.surname FROM driver AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE DS.points = (SELECT MAX(points) FROM driverStandings)",
        "SELECT T1.points, T2.forename, T2.surname FROM driverStandings T1 JOIN drivers T2 ON T1.driverId = T2.driverId ORDER BY T1.points DESC LIMIT 1",
        "SELECT T2.forename, T2.surname, T1.points  FROM driverStandings AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.points = (SELECT MAX(points) FROM driverStandings)"
    ],
    "691": [
        "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000"
    ],
    "485": [
        "SELECT R.date FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Reminisce'",
        "SELECT R.date FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Reminisce'",
        "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Reminisce'",
        "SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'",
        "SELECT R.date FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Reminisce'",
        "SELECT R.date FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Reminisce'"
    ],
    "26": [
        "SELECT schools.`School Name`, CONCAT(schools.Street, ', ', schools.City, ', ', schools.State, ' ', schools.Zip) AS `Full Communication Address` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Monterey' AND frpm.`Free Meal Count (Ages 5-17)` > 800 AND schools.EILCode = 'HS'",
        "SELECT schools.School, CONCAT(schools.Street, ', ', schools.City, ', ', schools.State, ', ', schools.Zip) AS 'full communication address' FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`County Name` = 'Monterey' AND frpm.`FRPM Count (Ages 15-17)` > 800 AND schools.EILCode = 'HS'",
        "SELECT frpm.`School Name`, CONCAT(schools.MailStreet, ', ', schools.MailCity, ', ', schools.MailState, ' ', schools.MailZip) AS FullAddress FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`County Name` = 'Monterey' AND frpm.`Free Meal Count (Ages 5-17)` > 800 AND schools.EILCode = 'HS'",
        "SELECT T1.\"School Name\", T1.Street, T1.City, T1.State, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Monterey' AND T2.`Free Meal Count (Ages 5-17)` > 800",
        "SELECT T1.`School Name`, T1.`Street`, T1.`City`, T1.`State`, T1.`Zip` FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T2.`School Type` = 'High School'",
        "SELECT T1.School, T1.Street, T1.City, T1.State, T1.Zip  FROM schools AS T1  INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T1.EILCode = 'HS' AND T2.County = 'Monterey' AND T2.Free Meal Count (Ages 5-17) > 800"
    ],
    "544": [
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT U.DisplayName FROM posts AS P JOIN users AS U ON P.LastEditorUserId = U.Id WHERE P.Title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'"
    ],
    "66": [
        "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'",
        "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'",
        "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'",
        "SELECT COUNT(*) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Directly funded' AND T2.County = 'Stanislaus' AND T2.OpenDate BETWEEN '2000-01-01' AND '2005-12-31'",
        "SELECT COUNT(*) FROM schools AS T1 WHERE T1.FundingType = 'Directly funded' AND T1.County = 'Stanislaus' AND T1.OpenDate BETWEEN '2000-01-01' AND '2005-12-31'",
        "SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'"
    ],
    "1373": [
        "SELECT COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'",
        "SELECT COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'",
        "SELECT COUNT(*) FROM zip_code WHERE state = 'Maryland'",
        "SELECT COUNT(T1.zip) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'",
        "SELECT COUNT(DISTINCT M.member_id) FROM member AS M JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE Z.state = 'Maryland'",
        "SELECT COUNT(*) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'"
    ],
    "1103": [
        "SELECT PA.overall_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Mooy' AND PA.date LIKE '2016-02-04%'",
        "SELECT PA.overall_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Mooy' AND PA.date LIKE '2016-02-04%'",
        "SELECT Player_Attributes.overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Mooy' AND Player_Attributes.date LIKE '2016-02-04%'",
        "SELECT PA.overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Mooy' AND PA.date LIKE '2016-02-04%'",
        "SELECT PA.overall_rating FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Mooy' AND PA.date LIKE '2016-02-04%'",
        "SELECT `T2`.`overall_rating` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`player_name` = 'Aaron Mooy' AND `T2`.`date` LIKE '2016-02-04%'"
    ],
    "1348": [
        "SELECT COUNT(*) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Meeting' AND b.remaining < 0",
        "SELECT COUNT(*) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Meeting' AND b.remaining < 0",
        "SELECT COUNT(*) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting') AND remaining < 0",
        "SELECT COUNT(budget.budget_id) FROM budget WHERE budget.remaining < 0 AND budget.link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting')",
        "SELECT COUNT(*) FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
        "SELECT COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0"
    ],
    "446": [
        "SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE name = 'Abyssal Horror'",
        "SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE name = 'Abyssal Horror'",
        "SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE name = 'Abyssal Horror'",
        "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'",
        "SELECT (COUNT(CASE WHEN T1.convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'",
        "SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) as percentage  FROM cards  WHERE setCode = (SELECT code FROM sets WHERE name = 'Abyssal Horror')"
    ],
    "1007": [
        "SELECT MAX(pitStops.duration) FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
        "SELECT MAX(CAST(duration AS REAL)) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "SELECT MAX(p.duration) FROM pitStops AS p INNER JOIN drivers AS d ON p.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND p.duration IS NOT NULL",
        "SELECT MAX(T1.duration)  FROM pitStops AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"
    ],
    "365": [
        "SELECT type FROM cards WHERE name = 'Benalish Knight'",
        "SELECT type FROM cards WHERE name = 'Benalish Knight'",
        "SELECT originalType FROM cards WHERE name = 'Benalish Knight' AND originalType IS NOT NULL",
        "SELECT T1.type FROM cards AS T1 WHERE T1.name = 'Benalish Knight'",
        "SELECT type FROM cards WHERE name = 'Benalish Knight'",
        "SELECT type FROM cards WHERE name = 'Benalish Knight'"
    ],
    "1471": [
        "SELECT CAST(COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS REAL) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS ratio, COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS \"customers who pay in EUR\", COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS \"customers who pay in CZK\" FROM customers",
        "SELECT (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') * 1.0 / (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS ratio, (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') AS 'customers who pay in EUR', (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS 'customers who pay in CZK'",
        "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS ratio, SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS \"customers who pay in EUR\", SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS \"customers who pay in CZK\" FROM customers",
        "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers",
        "SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0 / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS ratio FROM customers",
        "SELECT      (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0) /      NULLIF(COUNT(CASE WHEN Currency = 'CZK' THEN 1 END), 0) AS ratio FROM customers"
    ],
    "300": [
        "SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186'",
        "SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186'",
        "SELECT atom_id FROM atom WHERE molecule_id = 'TR186'",
        "SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186'",
        "SELECT T1.atom_id, T1.element FROM atom AS T1 WHERE T1.molecule_id = 'TR186'",
        "SELECT atom.atom_id, atom.element FROM atom WHERE atom.molecule_id = 'TR186'"
    ],
    "1295": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` > 2.0 AND T2.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Laboratory AS T1  JOIN Patient AS T2 ON T1.ID = T2.ID  JOIN Examination AS T3 ON T2.ID = T3.ID  WHERE T1.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'"
    ],
    "1285": [
        "SELECT T1.ID, T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
        "SELECT MAX(Patient.`First Date`) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH >= 500",
        "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
        "SELECT MAX(T1.\"First Date\"), T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500",
        "SELECT T1.`First Date` FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
        "SELECT MAX(P.`First Date`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH >= 500"
    ],
    "242": [
        "SELECT DISTINCT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25'",
        "SELECT DISTINCT m.molecule_id, m.label FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+'"
    ],
    "118": [
        "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan WHERE amount < 100000",
        "SELECT CAST(SUM(CASE WHEN loan.status = 'C' AND loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id",
        "SELECT CAST(SUM(CASE WHEN loan.status = 'C' AND loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN loan.amount < 100000 THEN 1 ELSE 0 END) AS percentage FROM loan",
        "SELECT CAST(SUM(CASE WHEN T1.status = 'C' AND T1.amount < 100000 THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM loan AS T1 WHERE T1.amount < 100000",
        "SELECT (COUNT(CASE WHEN loan.status = 'C' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running FROM loan WHERE loan.amount < 100000",
        "SELECT (SUM(CASE WHEN status = 'C' THEN amount ELSE 0 END) * 100.0 / NULLIF(SUM(amount), 0)) AS percentage FROM loan WHERE amount < 100000"
    ],
    "958": [
        "SELECT D.forename, D.surname FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.fastestLapTime IS NOT NULL ORDER BY R.fastestLapTime ASC LIMIT 1",
        "SELECT D.forename, D.surname FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.fastestLapTime IS NOT NULL ORDER BY R.fastestLapTime ASC LIMIT 1",
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId ORDER BY R.fastestLapTime ASC LIMIT 1",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time LIMIT 1",
        "SELECT T2.forename, T2.surname FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime LIMIT 1",
        "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL)"
    ],
    "1123": [
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes)",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes)",
        "SELECT P.player_name FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential IS NOT NULL ORDER BY PA.potential DESC LIMIT 1",
        "SELECT T1.player_name  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes)"
    ],
    "905": [
        "SELECT AVG(T2.points) FROM driverStandings AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.year = 2000 AND T2.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'irvine')",
        "SELECT AVG(T1.points) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Eddie' AND T3.surname = 'Irvine' AND T2.year = 2000",
        "SELECT AVG(R.points) FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Eddie' AND D.surname = 'Irvine' AND R2.year = 2000",
        "SELECT AVG(T2.points) FROM driverStandings AS T2 INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN seasons AS T4 ON T3.year = T4.year INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T4.year = 2000",
        "SELECT AVG(DS.points) FROM driverStandings AS DS JOIN drivers AS D ON DS.driverId = D.driverId JOIN races AS R ON DS.raceId = R.raceId WHERE D.forename = 'Eddie' AND D.surname = 'Irvine' AND R.year = 2000",
        "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2000 AND T3.forename = 'Eddie' AND T3.surname = 'Irvine'"
    ],
    "1487": [
        "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1",
        "SELECT T1.CustomerID, MAX(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201310' AND T2.Segment = 'LAM' AND T2.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MAX(T1.Consumption) DESC LIMIT 1",
        "SELECT customers.CustomerID, MAX(yearmonth.Consumption) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'LAM' AND customers.Currency = 'EUR' AND yearmonth.Date = '201310' GROUP BY customers.CustomerID ORDER BY MAX(yearmonth.Consumption) DESC LIMIT 1",
        "SELECT T1.CustomerID, MAX(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' GROUP BY T1.CustomerID ORDER BY MAX(T2.Consumption) DESC LIMIT 1",
        "SELECT T1.CustomerID FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1",
        "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1"
    ],
    "188": [
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT account.account_id FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT T1.account_id, T1.amount, T2.date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01' ORDER BY T1.amount ASC LIMIT 1",
        "SELECT T1.account_id FROM account T1 JOIN loan T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND T1.date < '1997-01-01' ORDER BY T2.amount ASC LIMIT 1",
        "SELECT T1.account_id FROM account AS T1  INNER JOIN loan AS T2 ON T1.account_id = T2.account_id  WHERE T2.duration > 24 AND T1.date < '1997-01-01'  AND T2.amount = (SELECT MIN(T3.amount)                    FROM loan AS T3                    WHERE T3.duration > 24)"
    ],
    "950": [
        "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0",
        "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0",
        "SELECT C.name FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE CR.raceId = 291 AND CR.points = 0",
        "SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0",
        "SELECT T2.name FROM constructorResults T1 JOIN constructors T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0",
        "SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0"
    ],
    "1470": [
        "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "SELECT COUNT(GasStationID) FROM gasstations AS T1 WHERE T1.Country = 'CZE' AND T1.Segment = 'Premium'",
        "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"
    ],
    "301": [
        "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
        "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
        "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
        "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
        "SELECT bond_type FROM bond AS T1 WHERE bond_id = 'TR007_4_19'",
        "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'"
    ],
    "267": [
        "SELECT bond.bond_type, bond.molecule_id FROM bond WHERE bond.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "SELECT bond.bond_type, bond.molecule_id FROM bond WHERE bond.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "SELECT bond.bond_type, bond.molecule_id FROM bond WHERE bond.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
        "SELECT T1.bond_type FROM bond T1 WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
        "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'"
    ],
    "870": [
        "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceId = 345",
        "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceId = 345",
        "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'grassi' AND T1.raceId = 345",
        "###SQL: SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "SELECT T2.q1 FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lucas' AND T1.surname = 'di Grassi' AND T2.raceId = 345",
        "SELECT Q.q1  FROM qualifying AS Q  INNER JOIN drivers AS D ON Q.driverId = D.driverId  WHERE D.forename = 'Lucas' AND D.surname = 'di Grassi' AND Q.raceId = 345"
    ],
    "762": [
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.power_id) DESC LIMIT 1",
        "SELECT T3.power_name FROM hero_power AS T1 INNER JOIN superpower AS T3 ON T1.power_id = T3.id GROUP BY T3.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
        "SELECT superpower.power_name, COUNT(hero_power.power_id) AS PowerCount FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY PowerCount DESC LIMIT 1",
        "SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id GROUP BY T1.power_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
        "SELECT T1.power_name FROM superpower AS T1 JOIN hero_power AS T2 ON T1.id = T2.power_id GROUP BY T1.power_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
        "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1"
    ],
    "1323": [
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20 AND T1.type != 'Fundraiser'",
        "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 20 AND event.event_name NOT LIKE '%Fundraiser%'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20 AND T1.type != 'Fundraising'",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type <> 'fundraiser'",
        "SELECT e.event_name FROM attendance AS a JOIN event AS e ON a.link_to_event = e.event_id WHERE e.type != 'Fundraiser' GROUP BY a.link_to_event HAVING COUNT(a.link_to_member) > 20",
        "SELECT T2.event_name  FROM attendance AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  GROUP BY T2.event_name  HAVING COUNT(T1.link_to_member) > 20 AND T2.type != 'Fundraiser'"
    ],
    "443": [
        "SELECT code FROM sets WHERE type = 'expansion'",
        "SELECT sets.code FROM sets WHERE sets.type = 'expansion'",
        "SELECT setCode FROM sets WHERE type = 'expansion'",
        "SELECT setCode FROM sets WHERE type = 'expansion'",
        "SELECT T1.code FROM sets AS T1 WHERE T1.type = 'expansion'",
        "SELECT setCode FROM sets WHERE type = 'expansion'"
    ],
    "406": [
        "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Creature' AND T2.status = 'Legal'",
        "SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND cards.types LIKE '%Creature%'",
        "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T1.types LIKE '%Creature%'",
        "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T1.types LIKE 'Creature'",
        "SELECT T1.id FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T1.type LIKE '%Creature%'",
        "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types LIKE '%Creature%' AND T2.status = 'legal'"
    ],
    "981": [
        "SELECT T1.forename || ' ' || T1.surname AS name, MIN(T2.date) AS race_date, T2.time FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId GROUP BY T1.driverId ORDER BY T1.dob DESC LIMIT 1",
        "SELECT D.forename, D.surname, MIN(R.date) AS race_date, R.time FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId INNER JOIN races AS R ON Q.raceId = R.raceId WHERE D.dob = (SELECT MAX(dob) FROM drivers) GROUP BY D.driverId",
        "SELECT drivers.forename, drivers.surname, MIN(races.date) AS race_date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId INNER JOIN races ON qualifying.raceId = races.raceId GROUP BY drivers.driverId ORDER BY drivers.dob DESC LIMIT 1",
        "SELECT T1.forename || ' ' || T1.surname AS name, T2.date, T2.time FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T2.date LIMIT 1",
        "SELECT strftime('%Y', MIN(r.date)) AS year, r.name, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) GROUP BY r.name, r.date, r.time",
        "SELECT STRFTIME('%Y', T3.date) AS race_year, T3.name AS race_name, T3.date AS race_date, T3.time AS race_time  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T1.dob = (SELECT MAX(dob) FROM drivers)  ORDER BY T3.date  LIMIT 1"
    ],
    "3": [
        "SELECT schools.MailStreet FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)",
        "SELECT schools.MailStreet, frpm.`School Name` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 1",
        "SELECT schools.MailStreet, frpm.`School Name` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 1",
        "SELECT schools.MailStreet FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(frpm.`FRPM Count (K-12)`) FROM frpm)",
        "SELECT s.MailStreet FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1",
        "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)"
    ],
    "51": [
        "SELECT schools.MailStreet, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrRead ASC LIMIT 1",
        "SELECT schools.MailStreet, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrRead IS NOT NULL ORDER BY satscores.AvgScrRead ASC LIMIT 1",
        "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead LIMIT 1",
        "SELECT s.MailStreet, s.School FROM satscores AS s INNER JOIN schools AS sch ON s.cds = sch.CDSCode ORDER BY s.AvgScrRead ASC LIMIT 1",
        "SELECT S.MailStreet, S.School FROM satscores AS SS INNER JOIN schools AS S ON SS.cds = S.CDSCode WHERE SS.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)"
    ],
    "130": [
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id LEFT JOIN card ON account.account_id = card.account_id WHERE district.A3 = 'south Bohemia' AND card.card_id IS NULL",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id LEFT JOIN card ON account.account_id = card.account_id WHERE district.A3 = 'south Bohemia' AND card.card_id IS NULL",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.client_id NOT IN (SELECT disp.client_id FROM disp INNER JOIN card ON disp.disp_id = card.disp_id) AND disp.client_id IN (SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'south Bohemia')",
        "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id LEFT JOIN disp AS T3 ON T2.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T1.district_id IN (SELECT district_id FROM district WHERE region = 'south Bohemia') AND T4.disp_id IS NULL",
        "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN card AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'South Bohemia' AND T3.card_id IS NULL",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN card AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'South Bohemia' AND T3.card_id IS NULL"
    ],
    "1430": [
        "SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'",
        "SELECT member.last_name, member.position FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10'",
        "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10'",
        "SELECT T1.last_name, T2.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Pizza' AND T2.expense_date = '2019-09-10'",
        "SELECT T1.last_name, T1.position FROM expense T0 JOIN member T1 ON T0.link_to_member = T1.member_id WHERE T0.expense_description = 'Pizza' AND T0.expense_date = '2019-09-10'",
        "SELECT T2.last_name, T2.position  FROM expense AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'"
    ],
    "113": [
        "SELECT C.birth_date FROM client AS C JOIN loan AS L ON C.client_id = L.account_id WHERE L.amount = 98832 AND L.date = '1996-01-03'",
        "SELECT C.birth_date FROM loan AS L JOIN account AS A ON L.account_id = A.account_id JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE L.amount = 98832 AND L.date = '1996-01-03'",
        "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03'",
        "SELECT T1.birth_date FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T2.amount = 21924 AND T2.date = '1996-01-03'",
        "SELECT C.birth_date FROM loan AS L JOIN account AS A ON L.account_id = A.account_id JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE L.amount = 98832 AND L.date = '1996-01-03'",
        "SELECT T2.birth_date FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 98832 AND T1.date = '1996-01-03'"
    ],
    "1449": [
        "SELECT member.first_name || ' ' || member.last_name AS name, major.major_name AS major FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
        "SELECT member.first_name || ' ' || member.last_name AS name, major.major_name FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
        "SELECT member.first_name || ' ' || member.last_name AS name, major.major_name AS major FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
        "SELECT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN expense AS T3 ON T3.link_to_member = T1.member_id WHERE T3.cost > 100",
        "SELECT T1.first_name || ' ' || T1.last_name, T3.major_name FROM expense AS T2 JOIN member AS T1 ON T1.member_id = T2.link_to_member JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T2.cost > 100",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T3.major_name  FROM expense AS T2  INNER JOIN member AS T1 ON T2.link_to_member = T1.member_id  INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id  WHERE T2.cost > 100"
    ],
    "819": [
        "SELECT (SUM(CASE WHEN S.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN S.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM superhero AS S WHERE S.weight_kg = 0 OR S.weight_kg IS NULL",
        "SELECT (SUM(CASE WHEN S.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN S.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM superhero AS S WHERE S.weight_kg = 0 OR S.weight_kg IS NULL",
        "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0",
        "###SQL: SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL",
        "SELECT (SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END)) AS difference FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL",
        "SELECT (SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference  FROM superhero  WHERE weight_kg = 0 OR weight_kg IS NULL"
    ],
    "751": [
        "SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T4.gender = 'Male' LIMIT 5",
        "SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5",
        "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5",
        "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5",
        "SELECT T3.power_name FROM superhero T1 JOIN gender T2 ON T1.gender_id = T2.id JOIN hero_power T4 ON T1.id = T4.hero_id JOIN superpower T3 ON T4.power_id = T3.id WHERE T2.gender = 'Male' LIMIT 5",
        "SELECT DISTINCT T3.power_name  FROM superhero AS T1  INNER JOIN gender AS T2 ON T1.gender_id = T2.id  INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id  INNER JOIN superpower AS T3 ON T4.power_id = T3.id  WHERE T2.gender = 'Male'  LIMIT 5"
    ],
    "215": [
        "SELECT COUNT(DISTINCT T1.atom_id) AS total_atoms, SUM(T1.element = 'i') AS iodine_count, SUM(T1.element = 's') AS sulfur_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND (T1.element = 'i' OR T1.element = 's')",
        "SELECT COUNT(DISTINCT T1.atom_id) AS How_many_atoms FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE (T1.element = 'i' OR T1.element = 's') AND T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element IN ('i', 's') AND T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.bond_type = '-' AND (T1.element = 'i' OR T1.element = 's')"
    ],
    "1228": [
        "SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300",
        "SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300",
        "SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300",
        "SELECT T1.ID, T2.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
        "SELECT P.ID, P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300",
        "SELECT P.ID, P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TG > 300"
    ],
    "193": [
        "SELECT DISTINCT C.client_id, D.A2 FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN district AS DT ON A.district_id = DT.district_id WHERE D.type = 'OWNER'",
        "SELECT DISTINCT disp.client_id, district.A2 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'OWNER'",
        "SELECT client.client_id, client.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER'",
        "SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'",
        "SELECT T1.client_id, T1.district_id FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'",
        "SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'"
    ],
    "1239": [
        "SELECT P.ID, (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.ID) > 2",
        "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.HCT >= 52 GROUP BY Patient.ID HAVING COUNT(Laboratory.ID) > 2",
        "SELECT T1.ID, (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T2.ID) > 2",
        "SELECT Laboratory.ID, (strftime('%Y', current_timestamp) - strftime('%Y', Patient.Birthday)) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.HCT >= 52 GROUP BY Laboratory.ID HAVING COUNT(Laboratory.ID) > 2",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.ID) > 2",
        "SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.HCT >= 52  GROUP BY P.ID  HAVING COUNT(L.ID) > 2"
    ],
    "965": [
        "SELECT raceId FROM races WHERE year = 2009",
        "SELECT raceId FROM races WHERE year = 2009",
        "SELECT raceId FROM races WHERE year = 2009",
        "SELECT raceId FROM races WHERE year = 2012",
        "SELECT raceId FROM races WHERE year = 2009",
        "SELECT raceId FROM races WHERE year = 2009"
    ],
    "717": [
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
        "SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "SELECT DISTINCT T3.power_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  INNER JOIN superpower AS T3 ON T2.power_id = T3.id  WHERE T1.superhero_name = '3-D Man'"
    ],
    "0": [
        "SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS highest_eligible_free_rate FROM frpm WHERE `County Name` = 'Alameda'",
        "SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS highest_eligible_free_rate FROM frpm WHERE `County Name` = 'Alameda'",
        "SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS highest_eligible_free_rate FROM frpm WHERE `County Name` = 'Alameda'",
        "SELECT MAX(CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL)) FROM frpm WHERE frpm.`County Name` = 'Alameda'",
        "SELECT (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) AS Eligible_Free_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda' AND frpm.`Free Meal Count (K-12)` IS NOT NULL AND frpm.`Enrollment (K-12)` IS NOT NULL ORDER BY Eligible_Free_Rate DESC LIMIT 1",
        "SELECT MAX(T1.\"Free Meal Count (K-12)\" / T1.\"Enrollment (K-12)\")  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T2.County = 'Alameda' AND T1.\"Enrollment (K-12)\" > 0"
    ],
    "724": [
        "SELECT superhero_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T5 ON T4.power_id = T5.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond' AND T5.power_name = 'Agility'",
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN colour T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"
    ],
    "1274": [
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN ('negative', '0') AND T2.SYMPTOMS IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN ('negative', '0') AND T2.SYMPTOMS IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSB IN ('negative', '0') AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('negative', '0') AND T1.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('negative', '0') AND T2.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('negative', '0') AND T2.Symptoms IS NOT NULL"
    ],
    "700": [
        "SELECT COUNT(DISTINCT votes.PostId) FROM votes WHERE votes.BountyAmount > 30",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount > 30",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount > 30",
        "SELECT COUNT(*) FROM votes WHERE BountyAmount > 30",
        "SELECT COUNT(*) FROM votes WHERE BountyAmount > 30",
        "SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30"
    ],
    "1008": [
        "SELECT p.lap FROM pitStops AS p INNER JOIN races AS r ON p.raceId = r.raceId INNER JOIN drivers AS d ON p.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.year = 2011 AND r.name = 'Australian Grand Prix'",
        "SELECT p.lap FROM pitStops AS p INNER JOIN drivers AS d ON p.driverId = d.driverId INNER JOIN races AS r ON p.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.name = 'Australian Grand Prix' AND r.year = 2011",
        "SELECT P.lap FROM pitStops AS P INNER JOIN races AS R ON P.raceId = R.raceId INNER JOIN drivers AS D ON P.driverId = D.driverId WHERE R.year = 2011 AND R.name = 'Australian Grand Prix' AND D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT T1.lap FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "SELECT T1.lap FROM pitStops T1 JOIN drivers T2 ON T1.driverId = T2.driverId JOIN races T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
        "SELECT T1.lap FROM pitStops AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN drivers AS T4 ON T2.driverId = T4.driverId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2011 AND T4.forename = 'Lewis' AND T4.surname = 'Hamilton'"
    ],
    "580": [
        "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10",
        "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10",
        "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10",
        "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Necromancer' LIMIT 10",
        "SELECT U.DisplayName FROM badges B JOIN users U ON B.UserId = U.Id WHERE B.Name = 'Necromancer' LIMIT 10",
        "SELECT DISTINCT users.DisplayName  FROM badges  INNER JOIN users ON badges.UserId = users.Id  WHERE badges.Name = 'Necromancer'  LIMIT 10"
    ],
    "480": [
        "SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'",
        "SELECT fd.flavorText FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid WHERE fd.language = 'Italian' AND c.name = 'Ancestor''s Chosen'",
        "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
        "SELECT T2.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Italian'",
        "SELECT FD.flavorText FROM foreign_data FD JOIN cards C ON FD.uuid = C.uuid WHERE C.name = 'Ancestor''s Chosen' AND FD.language = 'Italian'",
        "SELECT fd.flavorText  FROM cards AS c  INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid  WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian'"
    ],
    "578": [
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT u.DisplayName, p.Title, u.Reputation FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT T1.DisplayName, T2.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT u.DisplayName, u.Reputation FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT T1.DisplayName, T2.Reputation  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T1.Title = 'Understanding what Dassault iSight is doing?'"
    ],
    "566": [
        "SELECT u.Reputation FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Id = 65041",
        "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041)",
        "SELECT u.Reputation FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Id = 65041",
        "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "SELECT U.Reputation FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Id = 65041",
        "SELECT T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 65041"
    ],
    "778": [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  INNER JOIN superpower AS T3 ON T2.power_id = T3.id  WHERE T3.power_name = 'Adaptation'"
    ],
    "1434": [
        "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico'",
        "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico'",
        "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico'",
        "SELECT T1.zip_code FROM zip_code AS T1 WHERE T1.county = 'San Juan Municipio' AND T1.state = 'Puerto Rico' AND T1.type = 'PO Box'",
        "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio'",
        "SELECT zip_code.zip_code FROM zip_code WHERE type = 'PO Box' AND state = 'Puerto Rico' AND city = 'San Juan Municipio'"
    ],
    "592": [
        "SELECT COUNT(DISTINCT badges.UserId) FROM badges GROUP BY badges.UserId HAVING COUNT(badges.Id) > 5",
        "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
        "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
        "SELECT COUNT(Name) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
        "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
        "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5"
    ],
    "271": [
        "SELECT COUNT(DISTINCT A.element) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_1_8' AND A.element IN ('cl', 'c')",
        "SELECT COUNT(DISTINCT A.element) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_1_8' AND A.element IN ('cl', 'c')",
        "SELECT COUNT(DISTINCT T.element) AS element_count FROM atom AS T INNER JOIN connected AS C ON T.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_1_8' AND T.element IN ('cl', 'c')",
        "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_1_8' AND atom.element IN ('cl', 'c')",
        "SELECT a1.element, a2.element FROM bond AS b JOIN connected AS c ON b.bond_id = c.bond_id JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_1_8'",
        "SELECT COUNT(DISTINCT T1.element) >= 2 AS has_both_elements FROM connected AS T2 INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c')"
    ],
    "1126": [
        "SELECT Player.player_name FROM Player INNER JOIN Country ON Player.player_api_id = Country.id WHERE Country.name = 'Belgium'",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT team_api_id FROM Team WHERE team_api_id IN (SELECT away_team_api_id FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium')))",
        "SELECT P.player_name FROM Player P INNER JOIN Team T ON P.player_api_id = T.team_api_id INNER JOIN League L ON T.team_fifa_api_id = L.id INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Belgium'",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id INNER JOIN Match AS M ON PA.player_api_id = M.away_player_1 INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium'",
        "SELECT DISTINCT P.player_name FROM Player P JOIN Match M ON M.home_player_1 = P.player_api_id OR M.away_player_1 = P.player_api_id JOIN Team T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_id JOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id JOIN League L ON TA.team_fifa_api_id = L.country_id JOIN Country C ON L.country_id = C.id WHERE C.name = 'Belgium'",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.player_fifa_api_id = T2.id WHERE T2.name = 'Belgium'"
    ],
    "407": [
        "SELECT DISTINCT subtypes, supertypes FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.language = 'German' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "SELECT DISTINCT cards.subtypes, cards.supertypes FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL",
        "SELECT DISTINCT subtypes, supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "SELECT cards.subtypes, cards.supertypes FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL",
        "SELECT DISTINCT FD.type FROM foreign_data FD JOIN cards C ON FD.uuid = C.uuid WHERE FD.language = 'German' AND C.subtypes IS NOT NULL AND C.supertypes IS NOT NULL",
        "SELECT DISTINCT T1.subtypes, T1.supertypes  FROM cards AS T1  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL"
    ],
    "1250": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.`U-PRO` > 0 AND L.`U-PRO` < 30",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
        "SELECT T1.ID FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` NOT NULL AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'SLE' AND T3.`U-PRO` > 0 AND T3.`U-PRO` < 30"
    ],
    "314": [
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-'",
        "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-'",
        "SELECT COUNT(*) FROM bond WHERE bond_type = '-'"
    ],
    "854": [
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Australian Grand Prix'",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Australian Grand Prix'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'",
        "SELECT C.lat, C.lng FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.name = 'Australian Grand Prix'",
        "SELECT T2.lat, T2.lng FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Australian Grand Prix'",
        "SELECT T1.lat, T1.lng  FROM circuits AS T1  INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Australian Grand Prix'"
    ],
    "495": [
        "SELECT s.releaseDate FROM sets s JOIN cards c ON c.setCode = s.code WHERE c.name = 'Evacuation'",
        "SELECT s.releaseDate FROM sets s JOIN cards c ON c.setCode = s.code WHERE c.name = 'Evacuation'",
        "SELECT S.releaseDate FROM sets AS S INNER JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Evacuation'",
        "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'",
        "SELECT S.releaseDate FROM cards AS C JOIN sets AS S ON C.setCode = S.code WHERE C.name = 'Evacuation'",
        "SELECT S.releaseDate  FROM cards AS C  INNER JOIN sets AS S ON C.setCode = S.code  WHERE C.name = 'Evacuation'"
    ],
    "1533": [
        "SELECT Y.Consumption FROM yearmonth AS Y INNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID WHERE T.ProductID = 5 AND (T.Price / T.Amount) > 29.00 AND Y.Date = '201208'",
        "SELECT Y.Consumption FROM yearmonth AS Y INNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID WHERE T.ProductID = 5 AND (T.Price / T.Amount) > 29.00 AND Y.Date = '201208'",
        "SELECT yearmonth.CustomerID, yearmonth.Consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.ProductID = 5 AND (transactions_1k.Price / transactions_1k.Amount) > 29.00 AND yearmonth.Date = '201208'",
        "SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE (CAST(T2.Price AS REAL) / CAST(T2.Amount AS REAL)) > 29.00 AND T1.Date = '201208'",
        "SELECT T2.Consumption FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND (T1.Price / T1.Amount) > 29.00 AND T2.Date = '201208'",
        "SELECT DISTINCT ym.Consumption  FROM yearmonth AS ym  WHERE ym.CustomerID IN (     SELECT DISTINCT t.CustomerID      FROM transactions_1k AS t      WHERE t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 ) AND ym.Date = '201208'"
    ],
    "713": [
        "SELECT U.UpVotes, C.UserDisplayName FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'",
        "SELECT U.UpVotes FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'",
        "SELECT U.UpVotes, C.UserDisplayName FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'",
        "SELECT votes.UserId FROM votes INNER JOIN comments ON votes.PostId = comments.PostId WHERE comments.Text = 'R is also lazy evaluated.'",
        "SELECT U.UpVotes FROM comments AS C JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'",
        "SELECT U.UpVotes FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'"
    ],
    "949": [
        "SELECT constructors.name FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId ORDER BY constructorStandings.points DESC LIMIT 1",
        "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
        "SELECT name FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorStandings ORDER BY points DESC LIMIT 1)",
        "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1",
        "SELECT T1.constructorId FROM constructorStandings AS T1 ORDER BY T1.points DESC LIMIT 1",
        "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = (SELECT MAX(points) FROM constructorStandings)"
    ],
    "718": [
        "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'",
        "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "SELECT COUNT(DISTINCT hp.hero_id) FROM hero_power AS hp JOIN superpower AS sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength'",
        "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'"
    ],
    "862": [
        "SELECT COUNT(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND results.time IS NULL",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL",
        "SELECT COUNT(DISTINCT results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND results.time IS NULL",
        "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T1.time IS NULL",
        "SELECT COUNT(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL",
        "SELECT COUNT(*)  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)  AND time IS NULL"
    ],
    "488": [
        "SELECT ST.code FROM sets AS T1 INNER JOIN set_translations AS ST ON T1.code = ST.setCode WHERE T1.releaseDate = '2017-07-14'",
        "SELECT code FROM sets WHERE releaseDate = '2017-07-14'",
        "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2017-07-14'",
        "SELECT code FROM sets WHERE releaseDate = '2017/7/14'",
        "SELECT code FROM sets WHERE releaseDate = '2017-07-14'",
        "SELECT code FROM sets WHERE releaseDate = '2017-07-14'"
    ],
    "483": [
        "SELECT foreign_data.text FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND T2.language = 'Italian'",
        "SELECT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN foreign_data AS T4 ON T2.uuid = T4.uuid WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian'",
        "SELECT FD.text FROM sets AS S JOIN cards AS C ON S.code = C.setCode JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE S.name = 'Coldsnap' AND FD.language = 'Italian'",
        "SELECT foreign_data.text FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian'"
    ],
    "347": [
        "SELECT C.id, R.text, C.hasContentWarning FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Stephen Daniele'",
        "SELECT C.id, R.text, C.hasContentWarning FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Stephen Daniele'",
        "SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele' AND cards.hasContentWarning = 1",
        "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele' AND T1.hasContentWarning = 1",
        "SELECT T1.id, T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele' AND T1.hasContentWarning = 1",
        "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele' AND T1.hasContentWarning = 1"
    ],
    "851": [
        "SELECT DISTINCT circuits.position FROM circuits INNER JOIN constructorResults ON circuits.circuitId = constructorResults.raceId INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.name = 'Renault'",
        "SELECT constructorStandings.position FROM constructorStandings INNER JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructors.name = 'Renault'",
        "SELECT DISTINCT circuits.position FROM circuits INNER JOIN constructorResults ON circuits.circuitId = constructorResults.raceId INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructors.name = 'Renault'",
        "###SQL: SELECT T1.location, T4.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN constructorResults AS T3 ON T2.raceId = T3.raceId INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T4.name = 'Renault'",
        "SELECT results.position FROM results INNER JOIN constructors AS T1 ON results.constructorId = T1.constructorId WHERE T1.name = 'Renault'",
        "SELECT DISTINCT results.position FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  INNER JOIN results AS T3 ON T2.raceId = T3.raceId  WHERE T1.name = 'Renault'"
    ],
    "781": [
        "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS C ON T1.eye_colour_id = C.id WHERE C.colour = 'Amber'",
        "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS C ON T1.eye_colour_id = C.id WHERE C.colour = 'Amber'",
        "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
        "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "SELECT T1.height_cm FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'"
    ],
    "1328": [
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
        "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "SELECT T1.last_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'"
    ],
    "1341": [
        "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "SELECT T1.location FROM event AS T1 WHERE T1.event_name = 'Spring Budget Review'",
        "SELECT location FROM event WHERE event_name = 'Spring Budget Review'"
    ],
    "153": [
        "SELECT COUNT(DISTINCT card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
        "SELECT COUNT(DISTINCT card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
        "SELECT COUNT(DISTINCT card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN loan ON disp.account_id = loan.account_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
        "SELECT COUNT(T2.type) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'OWNER' AND T1.type = 'classic'",
        "SELECT COUNT(DISTINCT T1.card_id) FROM card T1 JOIN disp T2 ON T1.disp_id = T2.disp_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
        "SELECT COUNT(T1.card_id)  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  WHERE T1.type = 'classic' AND T2.type = 'OWNER'"
    ],
    "1100": [
        "SELECT MAX(Player_Attributes.overall_rating) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Dorlan Pabon'",
        "SELECT MAX(PA.overall_rating) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Dorlan Pabon'",
        "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
        "SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'",
        "SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'",
        "SELECT MAX(TA.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS TA ON T1.player_api_id = TA.player_api_id WHERE T1.player_name = 'Dorlan Pabon'"
    ],
    "1289": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Patient AS T1  INNER JOIN Examination AS T2 ON T1.ID = T2.ID  INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID  WHERE T1.Diagnosis = 'SJS' AND T3.TP > 6.0 AND T3.TP < 8.5"
    ],
    "68": [
        "SELECT County, COUNT(*) AS closure_count FROM schools WHERE SOC = '11' AND strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' GROUP BY County ORDER BY closure_count DESC LIMIT 1",
        "SELECT County, COUNT(*) AS number_of_closures FROM schools WHERE SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY number_of_closures DESC LIMIT 1",
        "SELECT County, COUNT(*) AS NumberOfClosures FROM schools WHERE SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY NumberOfClosures DESC LIMIT 1",
        "SELECT County, COUNT(StatusType) FROM schools WHERE SOC = '11' AND strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' GROUP BY County ORDER BY COUNT(StatusType) DESC",
        "SELECT County, COUNT(*) AS closure_count FROM schools WHERE SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY closure_count DESC LIMIT 1",
        "SELECT T1.County, COUNT(*) AS ClosureCount FROM schools AS T1 WHERE T1.SOC = '11' AND STRFTIME('%Y', T1.ClosedDate) BETWEEN '1980' AND '1989' GROUP BY T1.County ORDER BY ClosureCount DESC LIMIT 1"
    ],
    "1353": [
        "SELECT T1.type FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Christof' AND T2.last_name = 'Nielson'",
        "SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
        "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
        "SELECT T1.type FROM zip_code AS T1 INNER JOIN member AS T2 ON T2.zip = T1.zip_code WHERE T2.first_name = 'Christof' AND T2.last_name = 'Nielson'",
        "SELECT ZC.type FROM member M JOIN zip_code ZC ON M.zip = ZC.zip_code WHERE M.first_name = 'Christof' AND M.last_name = 'Nielson'",
        "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'"
    ],
    "1357": [
        "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton') AND source = 'Dues'",
        "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton') AND source = 'Dues'",
        "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton') AND source = 'Dues'",
        "SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' AND T2.first_name = 'Connor' AND T2.last_name = 'Hilton'",
        "SELECT I.date_received FROM member AS M JOIN income AS I ON M.member_id = I.link_to_member WHERE M.first_name = 'Connor' AND M.last_name = 'Hilton' AND I.source = 'Dues'",
        "SELECT income.date_received  FROM income  INNER JOIN member ON income.link_to_member = member.member_id  WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'"
    ],
    "865": [
        "SELECT drivers.surname, drivers.dob FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1",
        "SELECT drivers.driverId, drivers.forename, drivers.surname, drivers.dob FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob LIMIT 1",
        "SELECT D.driverRef, D.dob FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1",
        "SELECT MAX(T1.dob) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.time IS NOT NULL AND T1.raceId = 592",
        "SELECT D.driverId FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.raceId = 592 AND R.time IS NOT NULL ORDER BY D.dob ASC LIMIT 1",
        "SELECT T1.driverId, T1.dob FROM results AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1"
    ],
    "652": [
        "SELECT P.Id AS PostId, B.Name AS BadgeName FROM posts P JOIN badges B ON P.OwnerUserId = (SELECT Id FROM users WHERE UserDisplayName = 'Samuel') WHERE strftime('%Y', P.CreationDate) = '2013' AND strftime('%Y', B.Date) = '2013'",
        "SELECT posts.Id AS post_id, badges.Name AS badge_name FROM posts JOIN badges ON posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Samuel') WHERE strftime('%Y', posts.CreaionDate) = '2013' AND strftime('%Y', badges.Date) = '2013'",
        "SELECT PH.PostId, B.Name FROM postHistory AS PH INNER JOIN badges AS B ON PH.UserDisplayName = 'Samuel' WHERE Year(PH.CreationDate) = 2013",
        "SELECT T1.Id, T3.Name FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN badges AS T3 ON T2.Id = T3.UserId WHERE T2.DisplayName = 'Samuel' AND strftime('%Y', T1.CreationDate) = '2013' AND strftime('%Y', T3.Date) = '2013'",
        "SELECT P.Id AS PostId, B.Name AS BadgeName FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id JOIN badges AS B ON U.Id = B.UserId WHERE U.DisplayName = 'Samuel' AND strftime('%Y', P.CreaionDate) = '2013' AND strftime('%Y', B.Date) = '2013'",
        "SELECT DISTINCT T1.PostId, T2.Name  FROM comments AS T1  INNER JOIN users AS T3 ON T1.UserId = T3.Id  INNER JOIN badges AS T2 ON T3.Id = T2.UserId  WHERE T3.DisplayName = 'Samuel'  AND STRFTIME('%Y', T1.CreationDate) = '2013'  AND STRFTIME('%Y', T2.Date) = '2013'"
    ],
    "693": [
        "SELECT COUNT(posts.Id) AS number_of_posts, COUNT(comments.Id) AS comments_left FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON users.Id = comments.UserId WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT COUNT(posts.Id) AS NumberOfPosts, COUNT(comments.Id) AS CommentsLeft FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON users.Id = comments.UserId WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT COUNT(P.Id) AS NumberOfPosts, COUNT(C.Id) AS NumberOfComments FROM users AS U LEFT JOIN posts AS P ON U.Id = P.OwnerUserId LEFT JOIN comments AS C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT COUNT(T1.Id), COUNT(T2.Id) FROM users AS T0 LEFT JOIN posts AS T1 ON T0.Id = T1.OwnerUserId LEFT JOIN comments AS T2 ON T0.Id = T2.UserId WHERE T0.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT COUNT(DISTINCT T2.Id) AS NumberOfPosts, COUNT(DISTINCT T3.Id) AS NumberOfComments FROM users AS T1 LEFT JOIN posts AS T2 ON T1.Id = T2.OwnerUserId LEFT JOIN comments AS T3 ON T1.Id = T3.UserId WHERE T1.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)  UNION ALL  SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)"
    ],
    "567": [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini'",
        "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'",
        "SELECT COUNT(T2.Id) FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')"
    ],
    "668": [
        "SELECT U.DisplayName FROM users AS U JOIN ( SELECT B.UserId FROM badges AS B GROUP BY B.UserId HAVING COUNT(B.Name) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId)) ) ) AS MaxBadges ON U.Id = MaxBadges.UserId",
        "SELECT U.DisplayName FROM users AS U JOIN (SELECT B.UserId FROM badges AS B GROUP BY B.UserId ORDER BY COUNT(B.Id) DESC LIMIT 1) AS MostBadges ON U.Id = MostBadges.UserId",
        "SELECT U.DisplayName FROM badges AS B JOIN users AS U ON B.UserId = U.Id GROUP BY B.UserId ORDER BY COUNT(B.Name) DESC LIMIT 1",
        "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId GROUP BY users.DisplayName HAVING COUNT(badges.Name) = (SELECT MAX(badge_count) FROM (SELECT COUNT(Name) as badge_count FROM badges GROUP BY UserId))",
        "SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id GROUP BY b.UserId ORDER BY COUNT(b.Name) DESC LIMIT 1",
        "SELECT U.DisplayName  FROM users AS U  INNER JOIN (SELECT UserId, COUNT(Name) AS BadgeCount              FROM badges              GROUP BY UserId              HAVING COUNT(Name) = (SELECT MAX(BadgeCount)                                   FROM (SELECT COUNT(Name) AS BadgeCount                                         FROM badges                                         GROUP BY UserId))) AS B  ON U.Id = B.UserId"
    ],
    "1047": [
        "SELECT PA.heading_accuracy FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'",
        "SELECT PA.heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'",
        "SELECT pa.heading_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00'",
        "SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francois Affolter' AND T1.date = '2014-09-18 00:00:00'",
        "SELECT PA.heading_accuracy FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'",
        "SELECT PA.heading_accuracy  FROM Player_Attributes AS PA  INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id  WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'"
    ],
    "783": [
        "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
        "SELECT colour.colour AS eye_colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
        "SELECT c.colour AS EyeColor FROM superhero AS s INNER JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')",
        "SELECT T2.eye_colour_id FROM colour AS T1 INNER JOIN superhero AS T2 ON T2.skin_colour_id = T1.id WHERE T1.colour = 'Gold'",
        "SELECT T1.eye_colour_id FROM superhero T1 JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T2.colour = 'Gold'",
        "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')"
    ],
    "896": [
        "SELECT CAST(COUNT(CASE WHEN R.position > 1 THEN R.raceId END) AS FLOAT) / NULLIF(COUNT(R.raceId), 0) * 100 AS percentage FROM results R INNER JOIN drivers D ON R.driverId = D.driverId WHERE D.surname = 'Hamilton' AND R.raceId IN (SELECT raceId FROM races WHERE year >= 2010)",
        "SELECT (CAST(COUNT(CASE WHEN results.position > 1 THEN results.raceId END) AS FLOAT) / NULLIF(COUNT(results.raceId), 0)) * 100 AS percentage FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' AND races.year >= 2010",
        "SELECT (COUNT(T1.raceId) * 100.0 / COUNT(T2.raceId)) AS percentage FROM results AS T1 INNER JOIN drivers AS D ON T1.driverId = D.driverId INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE D.surname = 'Hamilton' AND T1.position > 1 AND T2.year >= 2010",
        "SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.position) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.year >= 2010",
        "SELECT (COUNT(T1.raceId) * 100.0 / (SELECT COUNT(raceId) FROM results T2 WHERE T2.driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND T2.raceId IN (SELECT raceId FROM races WHERE year >= 2010))) AS percentage FROM results T1 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND T1.position > 1 AND T1.raceId IN (SELECT raceId FROM races WHERE year >= 2010)",
        "SELECT (COUNT(CASE WHEN T1.position > 1 THEN 1 END) * 100.0 / COUNT(T1.raceId)) AS percentage  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.surname = 'Hamilton' AND T3.year >= 2010"
    ],
    "730": [
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'",
        "SELECT T1.id, T1.superhero_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'",
        "SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id  INNER JOIN superpower AS T4 ON T3.power_id = T4.id  WHERE T2.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'"
    ],
    "874": [
        "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.position = 2 AND T3.name = 'San Marino Grand Prix' AND T3.year = 2006",
        "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006",
        "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE results.position = 2 AND races.name = 'San Marino Grand Prix' AND races.year = 2006",
        "SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 2 AND T2.name = 'San Marino Grand Prix' AND T2.year = 2006",
        "SELECT D.driverId FROM results R JOIN drivers D ON R.driverId = D.driverId JOIN races RA ON R.raceId = RA.raceId WHERE RA.name = 'San Marino Grand Prix' AND RA.year = 2006 AND R.position = 2",
        "SELECT C.name FROM results AS R  INNER JOIN races AS RA ON R.raceId = RA.raceId  INNER JOIN constructors AS C ON R.constructorId = C.constructorId  WHERE RA.name = 'San Marino Grand Prix' AND RA.year = 2006 AND R.position = 2"
    ],
    "1442": [
        "SELECT (SUM(CASE WHEN B.remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(E.event_id)) AS percentage, COUNT(E.event_id) AS events FROM event AS E JOIN budget AS B ON E.event_id = B.link_to_event",
        "SELECT (SUM(CASE WHEN B.remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(E.event_id)) AS percentage, COUNT(E.event_id) AS events FROM event AS E JOIN budget AS B ON E.event_id = B.link_to_event",
        "SELECT (SUM(CASE WHEN T1.remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.event_id)) AS percentage, COUNT(T1.event_id) AS events FROM budget AS T1",
        "SELECT CAST(SUM(CASE WHEN T1.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T2.event_id) AS REAL) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id",
        "SELECT (SUM(CASE WHEN T1.remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.link_to_event)) AS percentage_over_budget FROM budget AS T1",
        "SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(event_status) AS percentage_over_budget FROM budget"
    ],
    "1420": [
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT MA.major_name FROM member AS M JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.position = 'Vice President'",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"
    ],
    "667": [
        "SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T1.CreationDate ASC LIMIT 1",
        "SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T1.CreationDate ASC LIMIT 1",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)",
        "SELECT P.Title FROM postLinks T1 JOIN posts P ON T1.PostId = P.Id WHERE T1.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)",
        "SELECT T2.Title FROM posts AS T2 INNER JOIN postLinks AS T1 ON T1.PostId = T2.Id WHERE T1.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)"
    ],
    "834": [
        "SELECT (SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.id) AS female_percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
        "SELECT (SUM(CASE WHEN G.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS female_percentage FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE P.publisher_name = 'George Lucas'",
        "SELECT CAST(SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
        "SELECT CAST(SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.id) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
        "SELECT (SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id) AS female_percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN gender g ON s.gender_id = g.id WHERE p.publisher_name = 'George Lucas'",
        "SELECT (COUNT(CASE WHEN T3.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  INNER JOIN gender AS T3 ON T1.gender_id = T3.id  WHERE T2.publisher_name = 'George Lucas'"
    ],
    "894": [
        "SELECT R.name AS race, D.forename, D.surname FROM results AS Res INNER JOIN drivers AS D ON Res.driverId = D.driverId INNER JOIN races AS R ON Res.raceId = R.raceId ORDER BY Res.milliseconds ASC LIMIT 1",
        "SELECT D.forename, D.surname, R.name FROM lapTimes AS L INNER JOIN drivers AS D ON L.driverId = D.driverId INNER JOIN races AS R ON L.raceId = R.raceId ORDER BY L.milliseconds ASC LIMIT 1",
        "SELECT MIN(T1.milliseconds) AS best_lap_time, T2.forename, T2.surname, T3.name AS race FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId GROUP BY T1.milliseconds",
        "SELECT T1.forename, T1.surname, T2.name FROM lapTimes AS T3 INNER JOIN drivers AS T1 ON T3.driverId = T1.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId ORDER BY T3.milliseconds ASC LIMIT 1",
        "SELECT d.forename, d.surname, r.name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes)",
        "SELECT T1.forename, T1.surname, T2.name  FROM results AS T3  INNER JOIN drivers AS T1 ON T3.driverId = T1.driverId  INNER JOIN races AS T2 ON T3.raceId = T2.raceId  WHERE T3.milliseconds = (SELECT MIN(milliseconds) FROM results)"
    ],
    "998": [
        "SELECT wins FROM driverStandings WHERE driverId = (SELECT driverId FROM driverStandings ORDER BY points DESC LIMIT 1 OFFSET 90)",
        "SELECT wins FROM driverStandings WHERE position = 91",
        "SELECT T1.wins FROM driverStandings AS T1 WHERE T1.position = 91",
        "SELECT wins FROM driverStandings WHERE points = 91",
        "SELECT wins FROM driverStandings WHERE position = 91",
        "SELECT wins FROM driverStandings WHERE position = 91"
    ],
    "369": [
        "SELECT COUNT(DISTINCT cards.uuid) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1",
        "SELECT COUNT(DISTINCT cards.uuid) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
        "SELECT COUNT(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1",
        "SELECT COUNT(*) FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.isReprint = 1",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1"
    ],
    "1523": [
        "SELECT gasstations.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T1.CardID = 667467",
        "SELECT gasstations.Country FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.CardID = 667467",
        "SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467",
        "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.CardID = 667467",
        "SELECT gs.Country FROM transactions_1k AS t INNER JOIN gasstations AS gs ON t.GasStationID = gs.GasStationID WHERE t.CardID = 667467",
        "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467"
    ],
    "76": [
        "SELECT schools.City FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`NSLP Provision Status` = 'Lunch Provision 2' AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12' AND schools.County = 'Merced' AND schools.EILCode = 'HS'",
        "SELECT City FROM schools WHERE EILCode = 'HS' AND GSoffered = '9-12' AND CDSCode IN (SELECT CDSCode FROM frpm WHERE `NSLP Provision Status` = 'Lunch Provision 2' AND `County Name` = 'Merced')",
        "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Low Grade` = '9' AND T2.`High Grade` = '12' AND T2.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.EILCode = 'HS' AND T2.County = 'Merced'",
        "SELECT schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.NSLP Provision Status = 'Lunch Provision 2' AND frpm.Low Grade = '9' AND frpm.High Grade = '12' AND schools.County = 'Merced' AND frpm.EILCode = 'HS'",
        "SELECT T1.City FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EILCode = 'HS' AND T2.NSLP_Provision_Status = 'Breakfast Provision 2' AND T2.Low_Grade = '9' AND T2.High_Grade = '12' AND T1.County = 'Merced' LIMIT 1",
        "SELECT City FROM schools WHERE EILCode = 'HS' AND LowGrade = '9' AND HighGrade = '12' AND County = 'Merced' AND `NSLP Provision Status` = 'Breakfast Provision 2'"
    ],
    "93": [
        "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'north Bohemia' AND district.A11 > 8000",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'north Bohemia' AND district.A11 > 8000",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.region = 'north Bohemia' AND T2.A11 > 8000",
        "SELECT COUNT(*) FROM client T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Moravia' AND T2.A11 > 8000",
        "SELECT COUNT(DISTINCT T1.client_id)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000"
    ],
    "520": [
        "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY artist ORDER BY COUNT(cards.id) ASC LIMIT 1",
        "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY T1.artist",
        "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = (SELECT T1.artist FROM cards AS T1 GROUP BY T1.artist ORDER BY COUNT(T1.artist) ASC LIMIT 1)",
        "SELECT L.format FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.artist = (SELECT C2.artist FROM cards AS C2 GROUP BY C2.artist ORDER BY COUNT(C2.id) ASC LIMIT 1)",
        "SELECT DISTINCT L.format  FROM cards AS C  JOIN legalities AS L ON C.uuid = L.uuid  WHERE C.artist = (SELECT artist                    FROM cards                    GROUP BY artist                    ORDER BY COUNT(*)                    LIMIT 1)"
    ],
    "1224": [
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)",
        "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)",
        "SELECT P.ID, P.SEX, P.Birthday FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.`T-BIL` IS NOT NULL ORDER BY L.`T-BIL` DESC LIMIT 1",
        "SELECT P.ID, P.SEX, P.Birthday  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)"
    ],
    "63": [
        "SELECT schools.School, schools.City, schools.AdmFName1, schools.AdmLName1, schools.AdmFName2, schools.AdmLName2, schools.AdmFName3 FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 1 AND frpm.`Charter School Number` = '00D2'",
        "SELECT schools.AdmFName1 || ' ' || schools.AdmLName1 AS FullName, schools.School, schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 1 AND frpm.`Charter School Number` = '00D2'",
        "SELECT schools.AdmFName1, schools.AdmLName1, schools.AdmFName2, schools.AdmLName2, schools.School, schools.City FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 1 AND schools.CharterNum = '00D2'",
        "SELECT T1.AdmFName1, T1.AdmLName1, T1.School, T1.City FROM schools AS T1 WHERE T1.Charter = 1 AND T1.CharterNum = '00D2'",
        "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
        "SELECT T1.AdmFName1 || ' ' || T1.AdmLName1 AS AdminFullName, T1.School AS SchoolName, T1.City  FROM schools AS T1  WHERE T1.Charter = 1 AND T1.CharterNum = '00D2'"
    ],
    "501": [
        "SELECT cards.name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Journey into Nyx Hero''s Path') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT cards.name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Journey into Nyx Hero''s Path') ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "SELECT T1.id FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' AND T1.convertedManaCost = (SELECT MAX(T3.convertedManaCost) FROM cards AS T3 INNER JOIN sets AS T4 ON T3.setCode = T4.code WHERE T4.name = 'Journey into Nyx Hero''s Path')"
    ],
    "1502": [
        "SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
        "SELECT DISTINCT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
        "SELECT DISTINCT g.ChainID FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'",
        "SELECT DISTINCT g.ChainID FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'",
        "SELECT DISTINCT G.Segment FROM transactions_1k T1 JOIN customers C ON T1.CustomerID = C.CustomerID JOIN gasstations G ON T1.GasStationID = G.GasStationID WHERE C.Currency = 'EUR'",
        "SELECT DISTINCT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T3.Currency = 'EUR'"
    ],
    "649": [
        "SELECT COUNT(*) AS post_history_counts, LastEditDate FROM postHistory AS PH INNER JOIN posts AS P ON PH.PostId = P.Id WHERE P.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "SELECT COUNT(*) AS post_history_counts, LastEditDate FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?'",
        "SELECT COUNT(*) AS post_history_counts, MAX(ph.CreationDate) AS last_edit_date FROM postHistory AS ph INNER JOIN posts AS p ON ph.PostId = p.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "SELECT T1.Id, T1.CreationDate, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "SELECT CommentCount, LastEditDate FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?'",
        "SELECT COUNT(*) AS post_history_count, MAX(CreationDate) AS last_edit_date  FROM postHistory  WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook')"
    ],
    "1446": [
        "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage, COUNT(zip_code) AS zip_codes FROM zip_code",
        "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage, COUNT(zip_code) AS zip_codes FROM zip_code",
        "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage, COUNT(zip_code) AS zip_codes FROM zip_code",
        "###SQL: SELECT CAST(SUM(CASE WHEN T1.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.zip_code) AS REAL) FROM zip_code AS T1",
        "SELECT (SUM(type = 'PO Box') * 100.0 / COUNT(zip_code)) AS percentage_po_box FROM zip_code WHERE type IS NOT NULL",
        "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage_po_boxes FROM zip_code"
    ],
    "776": [
        "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
        "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
        "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "SELECT T1.superhero_name, T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'"
    ],
    "913": [
        "SELECT country, name FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)",
        "SELECT country, name FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)",
        "SELECT T1.country, T2.name FROM circuits AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.alt = (SELECT MAX(alt) FROM circuits)",
        "SELECT country, alt FROM circuits ORDER BY alt DESC LIMIT 1",
        "SELECT T1.country FROM circuits T1 ORDER BY T1.alt DESC LIMIT 1",
        "SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)"
    ],
    "610": [
        "SELECT B.Name FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT B.Name FROM badges B INNER JOIN users U ON B.UserId = U.Id WHERE U.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT T1.Name FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)"
    ],
    "963": [
        "SELECT COUNT(DISTINCT D.driverId) FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'French' AND L.milliseconds < 120000",
        "SELECT COUNT(DISTINCT D.driverId) FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'French' AND L.milliseconds < 120000",
        "SELECT COUNT(DISTINCT D.driverId) FROM drivers D JOIN lapTimes L ON D.driverId = L.driverId WHERE D.nationality = 'French' AND CAST(SUBSTR(L.time, 1, INSTR(L.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(L.time, INSTR(L.time, ':') + 1) AS REAL) < 120",
        "SELECT COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.milliseconds < 120000 AND T2.nationality = 'French'",
        "SELECT COUNT(DISTINCT T1.driverId) FROM drivers T1 JOIN lapTimes T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(substr(T2.time, 1, instr(T2.time, ':') - 1) AS INTEGER) * 60 + CAST(substr(T2.time, instr(T2.time, ':') + 1) AS INTEGER)) < 120",
        "SELECT COUNT(DISTINCT T1.driverId)  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'French'  AND (SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) * 60 + SUBSTR(T2.time, INSTR(T2.time, ':') + 1)) < 120"
    ],
    "1342": [
        "SELECT e.cost FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE e.expense_description = 'Posters' AND e.expense_date = '2019-09-04'",
        "SELECT e.cost FROM expense e WHERE e.expense_description = 'Posters' AND e.expense_date = '2019-09-04'",
        "SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04'",
        "SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.expense_description = 'Posters' AND T1.expense_date = '2019-09-04'",
        "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Posters' AND T2.event_date = '2019-09-04'"
    ],
    "891": [
        "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T1.position",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.name = 'Singapore Grand Prix' AND R2.year = 2010 ORDER BY R.position",
        "SELECT D.driverRef FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Singapore Grand Prix' AND RA.year = 2010 ORDER BY R.position",
        "SELECT T1.forename, T1.surname, T2.position FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.position",
        "SELECT T3.driverId FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position",
        "SELECT D.forename, D.surname, R.position  FROM results AS R  INNER JOIN drivers AS D ON R.driverId = D.driverId  INNER JOIN races AS RACE ON R.raceId = RACE.raceId  WHERE RACE.year = 2010 AND RACE.name = 'Singapore Grand Prix'  ORDER BY R.position"
    ],
    "837": [
        "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1",
        "SELECT HA.hero_id FROM hero_attribute AS HA WHERE HA.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)",
        "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)",
        "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)",
        "SELECT T1.hero_id FROM hero_attribute T1 ORDER BY T1.attribute_value ASC LIMIT 1",
        "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)"
    ],
    "641": [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'",
        "SELECT COUNT(UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'"
    ],
    "1254": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA > 80 AND L.IGA < 500 AND P.`First Date` >= '1990-01-01'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA > 80 AND L.IGA < 500 AND P.`First Date` >= '1990-01-01'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA > 80 AND L.IGA < 500 AND P.`First Date` >= '1990-01-01'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND strftime('%Y', T1.`First Date`) >= '1990'",
        "SELECT COUNT(*) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND T1.`First Date` >= '1990-01-01'",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.IGA > 80 AND L.IGA < 500 AND P.`First Date` >= '1990-01-01'"
    ],
    "1166": [
        "SELECT E.Symptoms, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday IS NOT NULL ORDER BY P.Birthday DESC LIMIT 1",
        "SELECT E.Symptoms, E.Diagnosis FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Birthday IS NOT NULL) AND E.Symptoms IS NOT NULL",
        "SELECT E.Symptoms, P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Birthday IS NOT NULL) AND E.Symptoms IS NOT NULL",
        "SELECT T1.Symptoms, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Symptoms IS NOT NULL ORDER BY T2.Birthday DESC LIMIT 1",
        "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "SELECT E.Symptoms, P.Diagnosis  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE P.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Symptoms IS NOT NULL))  AND E.Symptoms IS NOT NULL"
    ],
    "684": [
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentage FROM users",
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentage FROM users",
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentage FROM users",
        "SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users",
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentage FROM users",
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END) * 100.0 / COUNT(Id)) AS percentage FROM users"
    ],
    "594": [
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
        "SELECT u.DisplayName, u.Reputation FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1",
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
        "SELECT users.Id, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 1",
        "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1"
    ],
    "155": [
        "SELECT (COUNT(CASE WHEN card.issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(card.card_id) AS percent_gold_issued_before_1998 FROM card",
        "SELECT (COUNT(CASE WHEN card.type = 'gold' AND card.issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percent_gold, COUNT(CASE WHEN card.type = 'gold' THEN 1 END) AS count_gold FROM card",
        "SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percent_gold, COUNT(CASE WHEN type = 'gold' THEN 1 END) AS count_gold FROM card",
        "SELECT CAST(COUNT(CASE WHEN T1.type = 'gold' AND T1.issued < '1998-01-01' THEN 1 ELSE NULL END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM card AS T1",
        "SELECT (COUNT(CASE WHEN T1.type = 'gold' AND T1.issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(T1.card_id)) AS percentage_of_gold_cards FROM card AS T1",
        "SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(*) AS percent_gold_cards FROM card"
    ],
    "216": [
        "SELECT T1.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'",
        "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'",
        "SELECT T2.atom_id, T2.atom_id2 FROM connected AS T2 JOIN bond AS T1 ON T2.bond_id = T1.bond_id WHERE T1.bond_type = '#'",
        "SELECT T1.atom_id, T2.atom_id2  FROM bond AS T1  INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id  WHERE T1.bond_type = '#'"
    ],
    "1498": [
        "SELECT MAX(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212'",
        "SELECT MAX(Consumption) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212'",
        "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'",
        "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2)",
        "SELECT Consumption FROM yearmonth WHERE Date LIKE '2012%' ORDER BY Consumption DESC LIMIT 1",
        "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'"
    ],
    "615": [
        "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / COUNT(T2.Id) AS percentage FROM users AS T2 INNER JOIN badges AS T1 ON T2.Id = T1.UserId WHERE T1.Name = 'Organizer' AND T2.Age BETWEEN 13 AND 18",
        "SELECT CAST(COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(U.Id) AS percentage FROM badges B JOIN users U ON B.UserId = U.Id WHERE B.Name = 'Organizer'",
        "SELECT CAST(COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(U.Id) AS percentage FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE B.Name = 'Organizer'",
        "SELECT CAST(COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(B.UserId) FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Organizer'",
        "SELECT (COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(B.UserId)) AS PercentageTeenagers FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Organizer'",
        "SELECT (COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(B.UserId)) AS Percentage  FROM badges AS B  INNER JOIN users AS U ON B.UserId = U.Id  WHERE B.Name = 'Organizer'"
    ],
    "221": [
        "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T2.bond_id = 'TR001_2_6'",
        "SELECT T1.atom_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_2_6' AND T3.molecule_id = 'TR001'",
        "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR001_2_6' AND T1.bond_id IN (SELECT bond_id FROM bond WHERE molecule_id = 'TR001')",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'",
        "SELECT C.atom_id, C.atom_id2 FROM connected AS C JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.molecule_id = 'TR001' AND B.bond_id = 'TR001_2_6'",
        "SELECT T1.atom_id, T1.element  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id  WHERE T3.bond_id = 'TR001_2_6' AND T3.molecule_id = 'TR001'"
    ],
    "448": [
        "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
        "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
        "SELECT T2.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan'",
        "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
        "SELECT FD.name, C.type FROM cards AS C JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.watermark = 'abzan'",
        "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'"
    ],
    "821": [
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Ajax'",
        "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "SELECT DISTINCT T3.power_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  INNER JOIN superpower AS T3 ON T2.power_id = T3.id  WHERE T1.superhero_name = 'Ajax'"
    ],
    "1321": [
        "SELECT COUNT(DISTINCT T1.link_to_event) FROM attendance T1 JOIN member T2 ON T1.link_to_member = T2.member_id JOIN event T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019'",
        "SELECT COUNT(DISTINCT T1.link_to_event) FROM attendance T1 JOIN member T2 ON T1.link_to_member = T2.member_id JOIN event T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019'",
        "SELECT COUNT(T1.link_to_event) FROM attendance T1 INNER JOIN member T2 ON T1.link_to_member = T2.member_id INNER JOIN event T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019'",
        "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019'",
        "SELECT COUNT(*) FROM attendance AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.email = 'sacha.harrison@lpu.edu' AND strftime('%Y', T3.event_date) = '2019'",
        "SELECT COUNT(T1.link_to_event)  FROM attendance AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id  WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND STRFTIME('%Y', T3.event_date) = '2019'"
    ],
    "1192": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0",
        "SELECT T1.ID, T1.Admission, T2.Date, T2.`T-BIL` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date like '1991-10%' AND T2.`T-BIL` < 2.0",
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0",
        "SELECT DISTINCT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0"
    ],
    "1178": [
        "SELECT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'AORTITIS' LIMIT 1",
        "SELECT P.SEX FROM Patient AS P WHERE P.Diagnosis = 'AORTITIS' LIMIT 1",
        "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1",
        "SELECT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'AORTITIS' ORDER BY E.`Examination Date` LIMIT 1",
        "SELECT T1.SEX FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T1.Description LIMIT 1",
        "SELECT T2.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'AORTITIS' ORDER BY T1.`Examination Date` ASC LIMIT 1"
    ],
    "32": [
        "SELECT CAST(frpm.`FRPM Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL) AS Eligible_Free_Reduced_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = 66 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT CAST(frpm.`FRPM Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL) AS Eligible_FRPM_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = '66' ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT T1.`School Name`, (T1.`FRPM Count (K-12)` / T1.`Enrollment (K-12)`) AS `Eligible Free or Reduced Price Meal Rate` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`SOC` = '66' ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT (CAST(frpm.`FRPM Count (K-12)` AS REAL) / frpm.`Enrollment (K-12)`) AS eligible_free_reduced_rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = 66 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT (FRPM Count (K-12) / Enrollment (K-12)) AS Eligible_Rate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = '66' ORDER BY FRPM Count (K-12) DESC LIMIT 5",
        "SELECT (T1.`FRPM Count (K-12)` / T1.`Enrollment (K-12)`) AS eligible_rate  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T2.SOC = '66'  ORDER BY eligible_rate DESC  LIMIT 5"
    ],
    "959": [
        "SELECT R.fastestLap FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.year = 2009 AND R.positionOrder = 1",
        "SELECT R.fastestLap FROM results R INNER JOIN races RA ON R.raceId = RA.raceId WHERE RA.year = 2009 AND R.positionOrder = 1",
        "SELECT R.fastestLap, R.driverId FROM results R INNER JOIN races RA ON R.raceId = RA.raceId WHERE RA.year = 2009 AND R.rank = 1",
        "###SQL: SELECT T1.lap FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN seasons AS S ON T3.year = S.year WHERE T2.time IS NOT NULL AND S.year = 2009",
        "SELECT results.fastestLap FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND results.position = 1 ORDER BY results.fastestLapTime LIMIT 1",
        "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T3.year = 2009 AND T1.rank = 0"
    ],
    "1001": [
        "SELECT T1.forename || ' ' || T1.surname AS full_name FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position = 1 AND T2.number = 3 AND T3.year = 2008 AND T3.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')",
        "SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM qualifying INNER JOIN races ON qualifying.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE circuits.name = 'Marina Bay Street Circuit' AND races.year = 2008 AND qualifying.position = 1 AND qualifying.number = 3",
        "SELECT T1.forename || ' ' || T1.surname AS full_name FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.q3 IS NOT NULL AND T2.position = 1 AND T3.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit') AND T3.year = 2008",
        "SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 1 AND T4.name = 'Marina Bay Street Circuit' AND T2.year = 2008 ORDER BY T1.q3 LIMIT 1",
        "SELECT T3.forename, T3.surname FROM qualifying T1 JOIN races T2 ON T1.raceId = T2.raceId JOIN circuits T4 ON T2.circuitId = T4.circuitId JOIN drivers T3 ON T1.driverId = T3.driverId WHERE T4.name = 'Marina Bay Street Circuit' AND T2.year = 2008 AND T1.q3 = (SELECT MIN(q3) FROM qualifying T5 WHERE T5.raceId = T2.raceId)",
        "SELECT T3.forename, T3.surname  FROM qualifying AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T4.name = 'Marina Bay Street Circuit' AND T2.year = 2008 AND T1.position = 1 AND T1.number = 3"
    ],
    "212": [
        "SELECT element FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1",
        "SELECT element FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1",
        "SELECT element, COUNT(element) AS element_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY element ORDER BY element_count ASC LIMIT 1",
        "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY COUNT(atom.element) LIMIT 1",
        "SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1",
        "SELECT element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY element HAVING COUNT(element) = (SELECT MIN(element_count) FROM (SELECT COUNT(element) AS element_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY element))"
    ],
    "268": [
        "SELECT A.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR001_10_11'",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
        "SELECT A.element FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR001_10_11'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
        "SELECT T1.element FROM atom T1 JOIN bond T2 ON T1.atom_id IN (T2.atom_id1, T2.atom_id2) WHERE T2.bond_id = 'TR001_10_11'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'"
    ],
    "214": [
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn')",
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn')",
        "SELECT DISTINCT T2.label FROM molecule AS T2 INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.element != 'sn'",
        "SELECT DISTINCT T1.label FROM molecule AS T1 WHERE T1.molecule_id NOT IN (SELECT T2.molecule_id FROM atom AS T2 WHERE T2.element = 'sn')",
        "SELECT DISTINCT T2.label FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "SELECT DISTINCT T2.label FROM molecule AS T2 WHERE T2.label = '-' AND T2.molecule_id NOT IN (SELECT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'sn')"
    ],
    "606": [
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'"
    ],
    "1495": [
        "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
        "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
        "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
        "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
        "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
        "SELECT CustomerID FROM yearmonth WHERE date = '201309' ORDER BY Consumption DESC LIMIT 1"
    ],
    "968": [
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'"
    ],
    "253": [
        "SELECT DISTINCT A.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_type = '#'",
        "SELECT DISTINCT A.element FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE B.bond_type = '#'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'",
        "SELECT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'",
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'"
    ],
    "524": [
        "SELECT DISTINCT cards.artist FROM cards WHERE cards.borderColor = 'black' AND cards.availability = 'arena'",
        "SELECT DISTINCT cards.artist FROM cards WHERE cards.borderColor = 'black' AND cards.availability LIKE '%arena%'",
        "SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'",
        "SELECT DISTINCT cards.artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'",
        "SELECT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'",
        "SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'"
    ],
    "924": [
        "SELECT DISTINCT races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT DISTINCT R.date FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT T1.date FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya'",
        "SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya'"
    ],
    "799": [
        "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE publisher_id = 1",
        "SELECT COUNT(id) FROM superhero WHERE publisher_id IS NULL",
        "SELECT COUNT(id) FROM superhero WHERE publisher_id IS NULL",
        "SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id != 1"
    ],
    "48": [
        "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = '54' AND County = 'Orange' AND StatusType = 'Merged') * 1.0 / (SELECT COUNT(*) FROM schools WHERE DOC = '52' AND County = 'Orange' AND StatusType = 'Merged') AS ratio",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '54') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '52') AS Ratio",
        "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = '54' AND StatusType = 'Merged' AND County = 'Orange') * 1.0 / (SELECT COUNT(*) FROM schools WHERE DOC = '52' AND StatusType = 'Merged' AND County = 'Orange') AS ratio",
        "SELECT CAST(COUNT(CASE WHEN frpm.`District Type` = 'Unified School District' THEN schools.CDSCode END) AS REAL) / NULLIF(COUNT(CASE WHEN frpm.`District Type` = 'Elementary School District' THEN schools.CDSCode END), 0) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode",
        "SELECT CAST(SUM(CASE WHEN T1.DOC = '54' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T1.DOC = '52' THEN 1 ELSE 0 END), 0) AS ratio FROM schools T1 WHERE T1.County = 'Orange'",
        "SELECT      (SELECT COUNT(*) FROM schools WHERE DOC = '54' AND County = 'Orange') * 1.0 /      (SELECT COUNT(*) FROM schools WHERE DOC = '52' AND County = 'Orange') AS ratio"
    ],
    "1447": [
        "SELECT T1.event_name, T1.location FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
        "SELECT E.event_name, E.location FROM event AS E JOIN budget AS B ON E.event_id = B.link_to_event WHERE B.remaining > 0",
        "SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0",
        "SELECT E.event_name, E.location FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE B.remaining > 0",
        "SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
        "SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0"
    ],
    "1508": [
        "SELECT COUNT(*) FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.Country = 'CZE' AND T.Price > 1000",
        "SELECT COUNT(*) FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE G.Country = 'CZE' AND T.Price > 1000",
        "SELECT COUNT(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
        "SELECT COUNT(T1.TransactionID)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE' AND T1.Price > 1000"
    ],
    "1080": [
        "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "SELECT COUNT(DISTINCT p.player_api_id) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low'",
        "SELECT COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low'",
        "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'"
    ],
    "515": [
        "SELECT MIN(C.originalReleaseDate), L.format FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.rarity = 'mythic' AND L.status = 'legal' GROUP BY L.format",
        "SELECT originalReleaseDate, legalities.format FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.rarity = 'mythic' AND L.status = 'Legal' ORDER BY originalReleaseDate LIMIT 1",
        "SELECT MIN(T1.originalReleaseDate), GROUP_CONCAT(DISTINCT T2.format) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Legal'",
        "SELECT MIN(sets.releaseDate), legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setCode = sets.code WHERE cards.rarity = 'mythic' AND legalities.status = 'Legal'",
        "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards WHERE rarity = 'mythic') AND legalities.status = 'Legal'",
        "SELECT MIN(T1.originalReleaseDate) AS oldest_release_date, T2.format  FROM cards AS T1  INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE T1.rarity = 'mythic' AND T2.status = 'legal' GROUP BY T1.uuid"
    ],
    "245": [
        "SELECT AVG(bond_count) FROM (SELECT COUNT(T2.bond_id) AS bond_count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i' GROUP BY T1.atom_id) AS bond_counts",
        "SELECT AVG(bond_count) FROM (SELECT COUNT(T2.bond_id) AS bond_count FROM atom T1 LEFT JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T1.element = 'i' GROUP BY T1.atom_id)",
        "SELECT AVG(bond_count) AS average_number_of_bonds FROM (SELECT COUNT(T3.bond_id) AS bond_count FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'i' GROUP BY T1.atom_id)",
        "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "SELECT COUNT(T2.bond_id) * 1.0 / COUNT(T1.atom_id) AS average_bonds FROM atom AS T1 LEFT JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'i'",
        "SELECT COUNT(T2.bond_id) * 1.0 / COUNT(DISTINCT T1.atom_id) AS average_bonds  FROM atom AS T1  LEFT JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'i'"
    ],
    "565": [
        "SELECT CASE WHEN ClosedDate IS NULL THEN 'Yes' ELSE 'No' END AS WellFinished FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0')",
        "SELECT posts.ClosedDate IS NULL AS WellFinished FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 23853 AND comments.CreationDate = '2013-07-12 09:08:18.0'",
        "SELECT ClosedDate FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18.0') AND ClosedDate IS NULL",
        "SELECT T1.ClosedDate FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'",
        "SELECT p.ClosedDate FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0'",
        "SELECT CASE WHEN P.ClosedDate IS NULL THEN 'not well-finished' ELSE 'well-finished' END AS post_status FROM comments AS C  INNER JOIN posts AS P ON C.PostId = P.Id  WHERE C.UserId = 23853 AND C.CreationDate = '2013-07-12 09:08:18.0'"
    ],
    "183": [
        "SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31'",
        "SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31'",
        "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Beroun' AND A.date > '1996-12-31'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-01-01'",
        "SELECT COUNT(T1.account_id) FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'"
    ],
    "56": [
        "SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'",
        "SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'",
        "SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'",
        "SELECT COUNT(CDSCode) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'",
        "SELECT COUNT(*) FROM schools AS T1 WHERE T1.MailState = 'CA' AND T1.StatusType = 'Active' AND T1.City = 'San Joaquin'",
        "SELECT COUNT(*) FROM schools WHERE State = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'"
    ],
    "1185": [
        "SELECT (SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN Laboratory.`T-CHO` ELSE 0 END) - SUM(CASE WHEN Laboratory.Date LIKE '1981-12-%' THEN Laboratory.`T-CHO` ELSE 0 END)) AS decrease_rate, SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN Laboratory.`T-CHO` ELSE 0 END) AS total_cholesterol FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1959-02-18'",
        "SELECT (SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN `T-CHO` ELSE 0 END) - SUM(CASE WHEN Laboratory.Date LIKE '1981-12-%' THEN `T-CHO` ELSE 0 END)) / SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN `T-CHO` ELSE 0 END) AS decrease_rate FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Birthday = '1959-02-18'",
        "SELECT (SUM(CASE WHEN L.Date LIKE '1981-11-%' THEN L.`T-CHO` END) - SUM(CASE WHEN L.Date LIKE '1981-12-%' THEN L.`T-CHO` END)) AS decrease_rate, P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1959-02-18'",
        "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` END)) AS REAL) * 100 / SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
        "SELECT (SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN Laboratory.`T-CHO` END) - SUM(CASE WHEN Laboratory.Date LIKE '1981-12-%' THEN Laboratory.`T-CHO` END)) AS decrease_rate FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
        "SELECT (SUM(CASE WHEN L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) - SUM(CASE WHEN L.Date LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END)) AS Cholesterol_Decrease FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Birthday = '1959-02-18'"
    ],
    "952": [
        "SELECT DISTINCT C.name FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE CS.position = 1",
        "SELECT DISTINCT c.name FROM constructors AS c INNER JOIN constructorStandings AS cs ON c.constructorId = cs.constructorId WHERE cs.position = 1",
        "SELECT DISTINCT C.name FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE CS.position = 1",
        "SELECT constructors.name FROM constructorStandings INNER JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE position = 21",
        "SELECT T1.constructorId FROM constructorStandings T1 JOIN constructors T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1",
        "SELECT DISTINCT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1"
    ],
    "1296": [
        "SELECT E.ANA FROM Examination E INNER JOIN Laboratory L ON E.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)",
        "SELECT E.ANA FROM Examination E INNER JOIN Laboratory L ON E.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)",
        "SELECT E.`ANA` FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)",
        "SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)",
        "SELECT E.`ANA` FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID WHERE L.`T-BIL` = (SELECT MAX(L2.`T-BIL`) FROM Laboratory AS L2 WHERE L2.`T-BIL` < 2.0)",
        "SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)"
    ],
    "721": [
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'"
    ],
    "213": [
        "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE (T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20') OR (T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8')",
        "SELECT T1.bond_type, T2.atom_id, T3.atom_id2 FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id WHERE (T2.atom_id = 'TR004_8' AND T3.atom_id2 = 'TR004_20') OR (T2.atom_id = 'TR004_20' AND T3.atom_id2 = 'TR004_8')",
        "SELECT T1.bond_type, T2.atom_id, T3.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE (T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20') OR (T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8')",
        "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE (T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20') OR (T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8')",
        "SELECT T2.bond_type FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')",
        "SELECT T2.bond_type  FROM connected AS T1  INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id  WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')"
    ],
    "956": [
        "SELECT forename, surname FROM drivers WHERE dob > '1975-01-01' AND driverId IN (SELECT driverId FROM driverStandings WHERE position = 2)",
        "SELECT D.forename, D.surname FROM drivers D JOIN driverStandings DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE D.dob > '1975-01-01' AND DS.position = 2",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) > '1975' AND T2.position = 2",
        "SELECT D.forename, D.surname FROM drivers AS D JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE year(D.dob) > 1975 AND DS.position = 2",
        "SELECT DISTINCT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId  WHERE STRFTIME('%Y', T1.dob) > '1975' AND T2.position = 2"
    ],
    "1512": [
        "SELECT C.CustomerID FROM customers AS C INNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID WHERE T.Date = '2012-08-25' ORDER BY T.Amount * T.Price DESC LIMIT 1",
        "SELECT c.CustomerID FROM customers AS c INNER JOIN transactions_1k AS t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' ORDER BY t.Amount * t.Price DESC LIMIT 1",
        "SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' ORDER BY T1.Amount * T1.Price DESC LIMIT 1",
        "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Amount) DESC LIMIT 1",
        "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY Amount * Price DESC LIMIT 1"
    ],
    "1034": [
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') AND substr(date,1,4) = '2010'",
        "SELECT player_api_id FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') ORDER BY overall_rating DESC",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') AND substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') AND substr(date, 1, 4) = '2010'",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') AND substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "SELECT DISTINCT player_api_id  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating)                          FROM Player_Attributes                          WHERE substr(date, 1, 4) = '2010'                          AND overall_rating > (SELECT AVG(overall_rating)                                                FROM Player_Attributes                                                WHERE substr(date, 1, 4) = '2010'))"
    ],
    "1242": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', L.Date) = '1984' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', L.Date) = '1984' AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', L.Date) = '1984' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400",
        "SELECT P.ID, P.Birthday, L.PLT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', L.Date) = '1984' AND (CAST(strftime('%Y', CURRENT_TIMESTAMP) AS INTEGER) - CAST(strftime('%Y', P.Birthday) AS INTEGER)) < 50 AND L.PLT BETWEEN 100 AND 400",
        "SELECT P.ID FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE strftime('%Y', L.Date) = '1984' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', L.Date) = '1984' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400"
    ],
    "420": [
        "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"
    ],
    "305": [
        "SELECT T1.bond_id, T2.atom_id, T3.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '-'",
        "SELECT B.bond_id, A1.atom_id AS atom_id1, A2.atom_id AS atom_id2 FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A1 ON C.atom_id = A1.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id WHERE B.bond_type = '-'",
        "SELECT T1.bond_id, T2.atom_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "SELECT T1.bond_id, T2.atom_id, T3.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '-'",
        "SELECT T1.bond_id, T2.atom_id FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "SELECT DISTINCT T1.bond_id, T2.connected.atom_id, T2.connected.atom_id2  FROM bond AS T1  INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id  WHERE T1.bond_type = '-'"
    ],
    "349": [
        "SELECT C.name, C.artist, C.isPromo FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid GROUP BY C.uuid ORDER BY COUNT(R.uuid) DESC LIMIT 1",
        "SELECT C.name, C.artist, C.isPromo FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid GROUP BY C.uuid ORDER BY COUNT(R.uuid) DESC LIMIT 1",
        "SELECT T1.name AS card, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.id ORDER BY COUNT(T2.uuid) DESC LIMIT 1",
        "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.uuid ORDER BY COUNT(T2.uuid) DESC LIMIT 1",
        "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.id, T1.artist HAVING T1.isPromo = 1 ORDER BY COUNT(T2.uuid) DESC LIMIT 1",
        "SELECT T1.name, T1.artist, T1.isPromo  FROM (SELECT T3.id, T3.name, T3.artist, T3.isPromo, COUNT(T4.uuid) AS ruling_count        FROM cards AS T3        INNER JOIN rulings AS T4 ON T3.uuid = T4.uuid        WHERE T3.isPromo = 1        GROUP BY T3.id) AS T1  WHERE T1.ruling_count = (SELECT MAX(ruling_count)                           FROM (SELECT COUNT(T4.uuid) AS ruling_count                                 FROM cards AS T3                                 INNER JOIN rulings AS T4 ON T3.uuid = T4.uuid                                 WHERE T3.isPromo = 1                                 GROUP BY T3.id))"
    ],
    "178": [
        "SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T3.client_id = 9",
        "SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T3.client_id = 9",
        "SELECT T2.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9",
        "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9; -- Note: client_id = 9 does not exist in the provided value examples.",
        "SELECT T3.type FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T4 ON T2.account_id = T4.account_id JOIN card AS T3 ON T4.account_id = T3.disp_id WHERE T1.client_id = 9",
        "SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 9"
    ],
    "355": [
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'"
    ],
    "1429": [
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'",
        "SELECT T2.event_name FROM event AS T2 INNER JOIN attendance AS T1 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.type = 'Social' AND T2.location = '900 E. Washington St.'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T1.location = '900 E. Washington St.' AND T3.position = 'Vice President'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'",
        "SELECT T3.event_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Vice President' AND T3.type = 'Social' AND T3.location = '900 E. Washington St.'",
        "SELECT T3.event_name  FROM event AS T3  INNER JOIN attendance AS T1 ON T3.event_id = T1.link_to_event  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T3.type = 'Social' AND T2.position = 'Vice President' AND T3.location = '900 E. Washington St.'"
    ],
    "1204": [
        "SELECT JULIANDAY(E.`Examination Date`) - JULIANDAY(P.`First Date`) AS days_difference FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.ID = 821298",
        "SELECT JULIANDAY(`Examination Date`) - JULIANDAY(`First Date`) AS time_taken FROM Examination WHERE ID = 821298",
        "SELECT DATEDIFF(T2.`Examination Date`, T1.`First Date`) AS time FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298 AND T2.`Examination Date` IS NOT NULL",
        "SELECT JULIANDAY(T1.`Examination Date`) - JULIANDAY(T2.`First Date`) AS days_difference FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 821298",
        "SELECT DATE('Examination Date') - DATE('First Date') AS duration FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298",
        "SELECT DATEDIFF(T1.`Examination Date`, T2.`First Date`)  FROM Examination AS T1  INNER JOIN Patient AS T2 ON T1.ID = T2.ID  WHERE T2.ID = 821298"
    ],
    "731": [
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"
    ],
    "840": [
        "SELECT HA.attribute_value FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id WHERE S.superhero_name = 'Aquababy'",
        "SELECT HA.attribute_value FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id WHERE S.superhero_name = 'Aquababy'",
        "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy'",
        "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "SELECT T2.attribute_value FROM superhero T1 JOIN hero_attribute T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "SELECT T2.attribute_value  FROM superhero AS T1  INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id  WHERE T1.superhero_name = 'Aquababy'"
    ],
    "1217": [
        "SELECT CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Status FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982'",
        "SELECT P.ID, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Out of Normal Range' END AS Albumin_Status FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982'",
        "SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Status FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) = '1982'",
        "SELECT P.Birthday, L.ALB FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982' AND L.ALB BETWEEN 3.5 AND 5.5",
        "SELECT P.ID, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Yes' ELSE 'No' END AS Albumin_Normal FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982'",
        "SELECT P.ID,         CASE            WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'           ELSE 'Out of Normal Range'         END AS Albumin_Status FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Birthday) = '1982'"
    ],
    "974": [
        "SELECT R.year FROM results AS R WHERE R.fastestLapTime IS NOT NULL ORDER BY R.fastestLapTime ASC LIMIT 1",
        "SELECT DISTINCT R.year FROM results R JOIN races RA ON R.raceId = RA.raceId WHERE R.fastestLapTime IS NOT NULL ORDER BY R.fastestLapTime LIMIT 1",
        "SELECT R.year FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId WHERE Res.fastestLapTime IS NOT NULL ORDER BY Res.fastestLapTime ASC LIMIT 1",
        "SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "SELECT r.year FROM results AS r JOIN races AS r2 ON r.raceId = r2.raceId WHERE r.fastestLapTime IS NOT NULL ORDER BY r.fastestLapTime LIMIT 1",
        "SELECT DISTINCT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime LIMIT 1"
    ],
    "1424": [
        "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "SELECT COUNT(*) FROM member WHERE t_shirt_size = 'X-Large' AND position = 'Member'",
        "SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'"
    ],
    "170": [
        "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'",
        "SELECT COUNT(*) FROM trans WHERE trans.operation = 'VYBER KARTOU' AND trans.date > '1995-01-01'",
        "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'",
        "SELECT COUNT(trans_id) FROM trans WHERE date > '1995-12-31' AND type = 'VYBER KARTOU'",
        "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'",
        "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'"
    ],
    "85": [
        "SELECT schools.`District Code`, (CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL)) * 100 AS `Percent (%) Eligible Free (K-12)` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Alusine'",
        "SELECT schools.`District Code`, (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.AdmFName1 = 'Alusine'",
        "SELECT frpm.`District Code`, (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Alusine'",
        "SELECT (CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL) * 100) AS `Percent (%) Eligible Free (K-12)`, frpm.`District Code` FROM frpm WHERE frpm.`AdmFName1` = 'Alusine'",
        "SELECT (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)` * 100) AS `Percent (%) Eligible Free (K-12)`, schools.District AS `District Code` FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Alusine'",
        "SELECT (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)` * 100) AS `Percent Eligible Free (K-12)`, schools.`District`  FROM schools  INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE schools.AdmFName1 = 'Alusine'"
    ],
    "463": [
        "SELECT COUNT(set_translations.id) FROM set_translations INNER JOIN cards ON cards.setCode = set_translations.setCode WHERE cards.name = 'Angel of Mercy'",
        "SELECT COUNT(T2.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy'",
        "SELECT COUNT(DISTINCT set_translations.language) FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Angel of Mercy'",
        "SELECT COUNT(T3.id) FROM set_translations AS T3 INNER JOIN sets AS T2 ON T3.setCode = T2.code INNER JOIN cards AS T1 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "SELECT COUNT(ST.id) FROM cards AS C JOIN sets AS S ON C.setCode = S.code JOIN set_translations AS ST ON S.code = ST.setCode WHERE C.name = 'Angel of Mercy'",
        "SELECT COUNT(set_translations.translation)  FROM cards  INNER JOIN sets ON cards.setCode = sets.code  INNER JOIN set_translations ON sets.code = set_translations.setCode  WHERE cards.name = 'Angel of Mercy'"
    ],
    "1528": [
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK')) AS percentage FROM gasstations WHERE Country = 'SVK' AND Segment = 'Premium'",
        "###SQL: SELECT CAST(SUM(CASE WHEN g.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(c.CustomerID) AS REAL) FROM customers c JOIN gasstations g ON c.CustomerID = g.CustomerID WHERE g.Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'",
        "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'"
    ],
    "912": [
        "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit'",
        "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'"
    ],
    "75": [
        "SELECT schools.EILName, schools.School FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND frpm.`County Code` = '37'",
        "SELECT schools.EILName FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND frpm.`County Code` = '37'",
        "SELECT frpm.`Educational Option Type`, frpm.`School Name` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND frpm.`County Code` = '37'",
        "SELECT T1.`Educational Option Type`, T2.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '17'",
        "SELECT T1.EILName, T2.School FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '37'",
        "SELECT T2.School, T1.EILName FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '37'"
    ],
    "1433": [
        "SELECT DISTINCT ZC.state FROM zip_code ZC WHERE ZC.type = 'PO Box'",
        "SELECT zip_code.city, zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box'",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.type = 'PO Box'",
        "SELECT city FROM zip_code WHERE type = 'PO Box'",
        "SELECT state FROM zip_code WHERE type = 'PO Box'",
        "SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box'"
    ],
    "31": [
        "SELECT CAST(T1.`Free Meal Count (K-12)` AS REAL) / CAST(T1.`Enrollment (K-12)` AS REAL) AS Eligible_Free_Rate FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.enroll12 DESC LIMIT 2 OFFSET 9",
        "SELECT CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL) AS Eligible_Free_Rate FROM frpm ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) AS eligible_free_rate FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds ORDER BY satscores.enroll12 DESC LIMIT 2 OFFSET 9",
        "SELECT CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL) AS eligible_free_rate FROM frpm WHERE frpm.`Enrollment (K-12)` > 0 ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)`) AS Eligible_Free_Rate FROM frpm AS T1 WHERE T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Free Meal Count (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)`) AS eligible_free_rate  FROM frpm AS T1  ORDER BY T1.`Enrollment (K-12)` DESC  LIMIT 2 OFFSET 9"
    ],
    "918": [
        "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "SELECT driverRef FROM drivers WHERE forename || ' ' || surname = 'Lewis Hamilton'",
        "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'"
    ],
    "484": [
        "SELECT foreign_data.name FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' AND cards.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = sets.code) ",
        "SELECT T3.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = T2.code)",
        "SELECT T3.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = T2.code)",
        "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap')",
        "SELECT FD.name FROM cards AS C JOIN sets AS S ON C.setCode = S.code JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE S.name = 'Coldsnap' AND FD.language = 'Italian' AND C.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = S.code)",
        "SELECT T3.name FROM cards AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid  WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap') AND T3.language = 'Italian'"
    ],
    "1116": [
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "SELECT Player.player_name FROM Player WHERE Player.height IS NOT NULL ORDER BY Player.height DESC LIMIT 1",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)"
    ],
    "1315": [
        "SELECT COUNT(T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'",
        "SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women's Soccer'",
        "SELECT COUNT(DISTINCT T1.link_to_member)  FROM attendance AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T2.event_name = 'Women's Soccer'"
    ],
    "1216": [
        "SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC",
        "SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC",
        "SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC",
        "SELECT P.ID, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC",
        "SELECT P.* FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC"
    ],
    "1340": [
        "SELECT (SUM(T1.spent) WHERE STRFTIME('%Y', T2.event_date) = '2019') - (SUM(T1.spent) WHERE STRFTIME('%Y', T2.event_date) = '2020') AS difference FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id",
        "SELECT (SUM(CASE WHEN STRFTIME('%Y', e.event_date) = '2019' THEN b.spent ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', e.event_date) = '2020' THEN b.spent ELSE 0 END)) AS difference, SUM(b.spent) AS total_amount_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id",
        "SELECT (SUM(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END)) AS difference, SUM(budget.spent) AS total_amount_spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id",
        "SELECT SUM(CASE WHEN substr(T2.event_date, 1, 4) = '2019' THEN T1.spent ELSE 0 END) - SUM(CASE WHEN substr(T2.event_date, 1, 4) = '2020' THEN T1.spent ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE substr(T2.event_date, 1, 4) IN ('2019', '2020')",
        "SELECT SUM(CASE WHEN strftime('%Y', T3.event_date) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T3.event_date) = '2020' THEN T2.spent ELSE 0 END) AS difference FROM expense AS T2 JOIN budget AS T1 ON T2.link_to_budget = T1.budget_id JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_date IS NOT NULL",
        "SELECT      (SELECT SUM(expense.cost)       FROM event       INNER JOIN budget ON event.event_id = budget.link_to_event       INNER JOIN expense ON budget.budget_id = expense.link_to_budget       WHERE STRFTIME('%Y', event.event_date) = '2019') -      (SELECT SUM(expense.cost)       FROM event       INNER JOIN budget ON event.event_id = budget.link_to_event       INNER JOIN expense ON budget.budget_id = expense.link_to_budget       WHERE STRFTIME('%Y', event.event_date) = '2020') AS difference"
    ],
    "1378": [
        "SELECT MAX(B.spent) FROM budget AS B",
        "SELECT MAX(b.spent) FROM budget AS b",
        "SELECT MAX(budget.spent) FROM budget",
        "SELECT MAX(spent) FROM budget",
        "SELECT spent FROM budget ORDER BY spent DESC LIMIT 1",
        "SELECT MAX(spent) FROM budget"
    ],
    "1281": [
        "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60",
        "SELECT MIN(P.Birthday) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60",
        "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60",
        "SELECT MIN(T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60",
        "SELECT MAX(P.Birthday) FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60",
        "SELECT MAX(P.Birthday) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60"
    ],
    "192": [
        "SELECT AVG(loan.amount) AS average_amount FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT AVG(loan.amount) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT AVG(L.amount) AS average_amount_of_loan FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.status IN ('C', 'D') AND A.frequency = 'POPLATEK PO OBRATU'",
        "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.frequency = 'POPLATEK PO OBRATU'",
        "SELECT AVG(L.amount) AS average_loan_amount FROM loan AS L JOIN account AS A ON L.account_id = A.account_id JOIN trans AS T ON A.account_id = T.account_id WHERE L.status IN ('C', 'D') AND A.frequency = 'POPLATEK PO OBRATU'",
        "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.k_symbol = 'POPLATEK PO OBRATU'"
    ],
    "451": [
        "SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
        "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
        "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
        "SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
        "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
        "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'"
    ],
    "805": [
        "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
        "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
        "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0",
        "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
        "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
        "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL"
    ],
    "222": [
        "SELECT (SELECT COUNT(*) FROM molecule WHERE label = '+') - (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference",
        "SELECT (SUM(label = '+') - SUM(label = '-')) AS difference FROM molecule",
        "SELECT COUNT(CASE WHEN label = '+' THEN 1 END) - COUNT(CASE WHEN label = '-' THEN 1 END) AS difference FROM molecule",
        "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS FLOAT) - CAST(SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS FLOAT) AS DIFFERENCE FROM molecule",
        "SELECT (SUM(label = '+') - SUM(label = '-')) AS difference FROM molecule",
        "SELECT (SUM(label = '+') - SUM(label = '-')) AS difference FROM molecule"
    ],
    "379": [
        "SELECT id FROM cards WHERE duelDeck = 'a'",
        "SELECT id FROM cards WHERE duelDeck = 'a'",
        "SELECT id FROM cards WHERE duelDeck = 'a'",
        "###SQL: SELECT id FROM cards WHERE duelDeck = 'a'",
        "SELECT id FROM cards WHERE duelDeck = 'a'",
        "SELECT id FROM cards WHERE duelDeck = 'a'"
    ],
    "137": [
        "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.district_id = 1",
        "SELECT COUNT(DISTINCT account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = 1",
        "SELECT COUNT(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = 1",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.district_id = 1",
        "SELECT COUNT(DISTINCT T1.account_id) FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.district_id = 1",
        "SELECT COUNT(DISTINCT T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.district_id = 1"
    ],
    "388": [
        "SELECT cards.name, foreign_data.language FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.convertedManaCost = 5 AND cards.setCode = '10E' AND foreign_data.uuid = cards.uuid",
        "SELECT cards.name, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5",
        "SELECT cards.name, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5",
        "SELECT T1.id, T2.language FROM cards AS T1 INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T3.code = '10E' AND T1.convertedManaCost = 5",
        "SELECT cards.id, set_translations.language FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.code = '10E' AND cards.convertedManaCost = 5",
        "SELECT T1.name, T3.translation, T3.language  FROM cards AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode  WHERE T2.setCode = '10E' AND T1.convertedManaCost = 5"
    ],
    "728": [
        "SELECT T2.colour, COUNT(T1.id) AS ColorCount FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T2.colour ORDER BY ColorCount DESC",
        "SELECT T2.colour, COUNT(T1.id) AS superhero_count FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T2.colour ORDER BY superhero_count DESC",
        "SELECT superhero.eye_colour_id, COUNT(superhero.id) AS color_count FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.eye_colour_id ORDER BY color_count DESC",
        "SELECT superhero.eye_colour_id, COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.eye_colour_id ORDER BY COUNT(superhero.id) DESC",
        "SELECT T2.colour, COUNT(T1.id) AS superhero_count FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T1.eye_colour_id ORDER BY superhero_count DESC",
        "SELECT T3.eye_colour_id, COUNT(T1.id) AS superhero_count  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  GROUP BY T3.eye_colour_id  ORDER BY COUNT(T1.id) DESC"
    ],
    "901": [
        "SELECT R.name AS races, C.name AS circuit_name, C.location FROM races R INNER JOIN circuits C ON R.circuitId = C.circuitId WHERE strftime('%Y', R.date) = '2005' AND strftime('%m', R.date) = '09'",
        "SELECT R.name, C.name, C.location FROM races R INNER JOIN circuits C ON R.circuitId = C.circuitId WHERE strftime('%m', R.date) = '09' AND strftime('%Y', R.date) = '2005'",
        "SELECT races.name AS 'the races', circuits.name AS 'circuit name', circuits.location AS 'location' FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND strftime('%Y', races.date) = '2005'",
        "SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%m', T1.date) = '09' AND strftime('%Y', T1.date) = '2005'",
        "SELECT T1.name, T2.circuitRef, T2.location FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%m', T1.date) = '09' AND strftime('%Y', T1.date) = '2005'",
        "SELECT T1.name AS race_name, T2.name AS circuit_name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%m', T1.date) = '09' AND STRFTIME('%Y', T1.date) = '2005'"
    ],
    "609": [
        "SELECT COUNT(*) FROM posts WHERE Score = 10",
        "SELECT COUNT(*) FROM posts WHERE Score = 10",
        "SELECT COUNT(*) FROM posts WHERE Score = 10",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10",
        "SELECT COUNT(*) FROM posts WHERE Score = 10"
    ],
    "497": [
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Huitième édition'",
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Huitième édition'",
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Huitième édition'",
        "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huitième édition'",
        "SELECT type FROM sets WHERE name = 'Huitième édition'",
        "SELECT S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Huitième édition'"
    ],
    "1264": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'thrombosis' AND L.C4 > 10",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'thrombosis' AND L.C4 > 10",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'thrombosis' AND L.C4 > 10",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'APS' AND T2.C4 > 10",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis LIKE '%APS%' AND L.C4 > 10",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE E.Diagnosis LIKE '%APS%' AND L.C4 > 10"
    ],
    "2": [
        "SELECT schools.Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`District Name` = 'Fresno County Office of Education'",
        "SELECT schools.MailZip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`District Name` = 'Fresno County Office of Education'",
        "SELECT schools.MailZip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`District Name` = 'Fresno County Office of Education'",
        "SELECT schools.Zip FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`County Name` = 'Fresno' AND frpm.`Charter School (Y/N)` = 1",
        "SELECT T2.MailZip FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.County = 'Fresno'",
        "SELECT DISTINCT schools.MailZip FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Charter School (Y/N)` = 1 AND frpm.`DOCType` = 'County Office of Education (COE)'"
    ],
    "869": [
        "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 AND T1.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9)",
        "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 AND T1.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9)",
        "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9) AND T1.raceId = 9",
        "SELECT T2.url FROM results T1 JOIN constructors T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9) AND T1.raceId = 9"
    ],
    "845": [
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero) JOIN superpower AS T3 ON T2.power_id = T3.id",
        "SELECT T3.power_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero AS T4)",
        "SELECT sp.power_name FROM superhero AS sh INNER JOIN hero_power AS hp ON sh.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)",
        "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > (SELECT CAST(AVG(height_cm) AS FLOAT) * 0.8 FROM superhero)",
        "SELECT SP.power_name FROM superhero AS SH JOIN hero_power AS HP ON SH.id = HP.hero_id WHERE SH.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)",
        "SELECT DISTINCT T3.power_name  FROM superhero AS T1  INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id  WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)"
    ],
    "1345": [
        "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT COUNT(DISTINCT major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'"
    ],
    "651": [
        "SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "SELECT posts.Title FROM posts INNER JOIN postLinks ON posts.Id = postLinks.RelatedPostId WHERE postLinks.PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time')",
        "SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "SELECT T1.Title FROM posts AS T1 WHERE T1.Id IN (SELECT T2.RelatedPostId FROM postLinks AS T2 WHERE T2.PostId = (SELECT T3.Id FROM posts AS T3 WHERE T3.Title = 'How to tell if something happened in a data set which monitors a value over time'))",
        "SELECT P.Title FROM posts P JOIN postLinks PL ON P.Id = PL.RelatedPostId JOIN posts P2 ON PL.PostId = P2.Id WHERE P2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "SELECT Title FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time'"
    ],
    "632": [
        "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')",
        "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')",
        "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')",
        "SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan'",
        "SELECT COUNT(T2.Id) FROM users AS T1 JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Harlan'",
        "SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')"
    ],
    "1422": [
        "SELECT DISTINCT b.category FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215'",
        "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'",
        "SELECT category FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE location = 'MU 215')",
        "SELECT type FROM event WHERE location = 'MU 215'",
        "SELECT T2.category FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'"
    ],
    "98": [
        "SELECT loan.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date LIKE '1997%' AND account.frequency = 'POPLATEK TYDNE' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT loan.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date LIKE '1997%' AND loan.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%') AND account.frequency = 'POPLATEK TYDNE'",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date LIKE '1997%' AND account.frequency = 'POPLATEK TYDNE' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT T1.account_id, T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date BETWEEN '1997-01-01' AND '1997-12-31' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount ASC LIMIT 1",
        "SELECT T1.account_id FROM account T1 JOIN loan T2 ON T1.account_id = T2.account_id WHERE T2.date LIKE '1997%' AND T1.frequency = 'POPLATEK TYDNE' AND T2.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%')",
        "SELECT T1.account_id  FROM account AS T1  INNER JOIN loan AS T2 ON T1.account_id = T2.account_id  WHERE T2.date LIKE '1997%'  AND T2.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%')  AND T1.frequency = 'POPLATEK TYDNE'"
    ],
    "1275": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L1 ON P.ID = L1.ID INNER JOIN Laboratory AS L2 ON P.ID = L2.ID WHERE L1.CENTROMEA IN ('-', '+-') AND L2.SSB IN ('-', '+-') AND P.SEX = 'M'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('negative', '0') AND L.SSB IN ('negative', '0') AND P.SEX = 'M'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.CENTROMEA IN ('0', 'negative') AND T3.SSB IN ('-', '+-') AND T1.SEX = 'M'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-')"
    ],
    "987": [
        "SELECT AVG(T1.fastestLapTime) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'United States Grand Prix' AND T2.year = 2006 AND T1.positionOrder < 11",
        "SELECT AVG((SUBSTR(R.fastestLapTime, 1, INSTR(R.fastestLapTime, ':') - 1) * 60) + SUBSTR(R.fastestLapTime, INSTR(R.fastestLapTime, ':') + 1)) AS average_fastest_lap_time FROM results R JOIN races RA ON R.raceId = RA.raceId WHERE RA.name = 'United States Grand Prix' AND RA.year = 2006 AND R.positionOrder < 11",
        "SELECT AVG(CAST(SUBSTR(R.fastestLapTime, INSTR(R.fastestLapTime, ':')-2, 5) AS REAL) * 60 + CAST(SUBSTR(R.fastestLapTime, INSTR(R.fastestLapTime, ':')+1) AS REAL)) AS average_fastest_lap_time FROM results AS R JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.name = 'United States Grand Prix' AND R2.year = 2006 AND R.rank < 11",
        "SELECT AVG(CAST(SUBSTR(lapTimes.fastestLapTime, INSTR(lapTimes.fastestLapTime, ':') - 1, 2) AS REAL) * 60 + CAST(SUBSTR(lapTimes.fastestLapTime, INSTR(lapTimes.fastestLapTime, ':') + 1) AS REAL)) FROM lapTimes INNER JOIN results ON lapTimes.raceId = results.raceId INNER JOIN races ON results.raceId = races.raceId WHERE lapTimes.position < 11 AND races.year = 2006 AND races.name = 'United States Grand Prix'",
        "SELECT AVG(results.fastestLapTime) FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2006 AND results.position < 11 AND results.fastestLapTime IS NOT NULL",
        "SELECT AVG(fastestLapTime) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'United States Grand Prix' AND year = 2006) AND rank < 11"
    ],
    "40": [
        "SELECT schools.Phone, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1",
        "SELECT schools.Phone, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1",
        "SELECT schools.Phone, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1",
        "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "SELECT T1.Phone  FROM schools AS T1  INNER JOIN satscores AS T2  ON T1.CDSCode = T2.cds  WHERE T1.District = 'Fresno Unified'  ORDER BY T2.AvgScrRead ASC  LIMIT 1"
    ],
    "194": [
        "SELECT T3.client_id, strftime('%Y', 'now') - strftime('%Y', T1.birth_date) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT T1.client_id, strftime('%Y', 'now') - strftime('%Y', T1.birth_date) AS age FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T2.account_id = T3.account_id JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T4.type = 'gold' AND T2.type = 'OWNER'",
        "SELECT C.client_id, (strftime('%Y', 'now') - strftime('%Y', C.birth_date)) AS age FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN card AS CA ON D.account_id = CA.disp_id WHERE CA.type = 'gold' AND D.type = 'OWNER'",
        "SELECT T1.client_id, CAST(strftime('%Y', 'now') - strftime('%Y', T2.birth_date) AS REAL) AS age FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN card AS T2 ON T3.account_id = T2.disp_id WHERE T2.type = 'gold' AND T3.type = 'OWNER'",
        "SELECT C.client_id, (strftime('%Y', 'now') - strftime('%Y', C.birth_date)) AS age FROM client C JOIN disp D ON C.client_id = D.client_id JOIN card CA ON D.disp_id = CA.disp_id WHERE CA.type = 'gold' AND D.type = 'OWNER'",
        "SELECT T1.client_id, STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) AS age  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE T3.type = 'gold' AND T2.type = 'OWNER'"
    ],
    "707": [
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1",
        "SELECT c.Text FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1",
        "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount BETWEEN 100 AND 150 ORDER BY comments.Score DESC LIMIT 1",
        "SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1"
    ],
    "224": [
        "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "SELECT bond.bond_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_2'",
        "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'",
        "SELECT T1.bond_id FROM connected T1 WHERE T1.atom_id2 = 'TR000_2'",
        "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'"
    ],
    "1531": [
        "SELECT C.CustomerID, C.Currency, SUM(T.Price) / SUM(T.Amount) AS AveragePricePerItem FROM customers AS C INNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID GROUP BY C.CustomerID ORDER BY SUM(T.Price) DESC LIMIT 1",
        "SELECT C.CustomerID, AVG(T.Price) AS average_price, C.Currency FROM customers AS C INNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID GROUP BY C.CustomerID ORDER BY SUM(T.Price) DESC LIMIT 1",
        "SELECT c.CustomerID, c.Currency, SUM(t.Price) / SUM(t.Amount) AS AveragePrice FROM customers AS c INNER JOIN transactions_1k AS t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID ORDER BY SUM(t.Price) DESC LIMIT 1",
        "SELECT customers.CustomerID, customers.Currency, CAST(SUM(transactions_1k.Price) AS REAL) / CAST(SUM(transactions_1k.Amount) AS REAL) FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID, customers.Currency ORDER BY SUM(transactions_1k.Price) DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T1.Price) / SUM(T1.Amount) AS AveragePricePerItem, T2.Currency FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1",
        "SELECT T2.CustomerID, (SUM(T1.Price) / SUM(T1.Amount)) AS AveragePricePerItem, T2.Currency  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  GROUP BY T2.CustomerID  ORDER BY SUM(T1.Price) DESC  LIMIT 1"
    ],
    "309": [
        "SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS bond_types_count FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id",
        "SELECT atom_id, COUNT(DISTINCT bond_type) FROM bond WHERE molecule_id = 'TR346' GROUP BY atom_id",
        "SELECT T.atom_id, COUNT(DISTINCT B.bond_type) AS bond_type_count FROM atom AS T LEFT JOIN bond AS B ON T.molecule_id = B.molecule_id WHERE T.molecule_id = 'TR346' GROUP BY T.atom_id",
        "SELECT atom.atom_id, COUNT(bond.bond_type) FROM atom LEFT JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id",
        "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id",
        "SELECT T1.atom_id, (SELECT COUNT(DISTINCT T2.bond_type) FROM bond AS T2 WHERE T2.molecule_id = 'TR346') AS bond_type_count FROM atom AS T1 WHERE T1.molecule_id = 'TR346'"
    ],
    "871": [
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 347 AND qualifying.q2 LIKE '1:15.%'",
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 347 AND qualifying.q2 LIKE '0:01:15'",
        "SELECT drivers.nationality FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 347 AND Q.q2 = '0:01:15'",
        "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN results AS T3 ON T3.driverId = T1.driverId WHERE T2.q2 = '0:01:15' AND T3.raceId = 347",
        "SELECT T2.nationality FROM qualifying AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '0:01:15' AND T1.raceId = 347",
        "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.q2 = '0:01:15'"
    ],
    "867": [
        "SELECT constructors.nationality FROM results INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933) AND results.raceId = 933",
        "SELECT constructors.nationality FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933) AND results.raceId = 933",
        "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 AND T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)",
        "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
        "SELECT D.nationality FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.raceId = 933 ORDER BY R.fastestLapSpeed DESC LIMIT 1",
        "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 AND T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)"
    ],
    "1150": [
        "SELECT CAST(COUNT(ID) AS REAL) * 100 / COUNT(ID) AS percentage FROM Patient WHERE SEX = 'F' AND year(Birthday) > 1930",
        "SELECT (COUNT(CASE WHEN year(Birthday) > 1930 THEN ID END) * 100.0 / COUNT(ID)) AS percentage_female FROM Patient WHERE SEX = 'F'",
        "SELECT (COUNT(ID) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F')) AS percentage, COUNT(ID) AS female_patient FROM Patient WHERE year(Birthday) > 1930 AND SEX = 'F'",
        "SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND strftime('%Y', Birthday) > '1930' THEN 1 END) AS REAL) * 100.0 / CAST(COUNT(ID) AS REAL) FROM Patient WHERE SEX = 'F'",
        "WITH FemaleCounts AS (SELECT COUNT(ID) AS BornAfter1930 FROM Patient WHERE SEX = 'F' AND Birthday > '1930-01-01'), TotalFemale AS (SELECT COUNT(ID) AS Total FROM Patient WHERE SEX = 'F') SELECT (CAST(BornAfter1930 AS REAL) / Total) * 100 AS Percentage FROM FemaleCounts, TotalFemale",
        "SELECT (COUNT(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_born_after_1930 FROM Patient WHERE SEX = 'F'"
    ],
    "180": [
        "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'east Bohemia'",
        "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'east Bohemia'",
        "SELECT client.client_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND account.district_id IN (SELECT district_id FROM district WHERE A3 = 'east Bohemia')",
        "SELECT T1.client_id, T1.birth_date FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T3.region = 'north Moravia'",
        "SELECT client.client_id FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'east Bohemia'",
        "SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A3 = 'East Bohemia'"
    ],
    "64": [
        "SELECT COUNT(schools.CDSCode) FROM schools WHERE schools.MailCity = 'Hickman' AND schools.CharterNum = '00D4'",
        "SELECT COUNT(schools.CDSCode) FROM schools WHERE schools.MailCity = 'Hickman' AND schools.CharterNum = '00D4'",
        "SELECT COUNT(*) AS total_number_of_schools FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'",
        "SELECT COUNT(School) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'",
        "SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'",
        "SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'"
    ],
    "363": [
        "SELECT COUNT(DISTINCT C.id) FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'Restricted' AND C.isStarter = 1",
        "SELECT COUNT(cards.id) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isStarter = 1",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
        "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isStarter = 1",
        "SELECT COUNT(*) FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
        "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1"
    ],
    "492": [
        "SELECT type FROM sets WHERE name = 'From the Vault: Lore'",
        "SELECT sets.type FROM sets WHERE sets.name = 'From the Vault: Lore'",
        "SELECT type FROM sets WHERE name = 'From the Vault: Lore'",
        "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'",
        "SELECT type FROM sets WHERE name = 'From the Vault: Lore'",
        "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'"
    ],
    "1037": [
        "SELECT (SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(P.player_fifa_api_id)) AS percentage FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id WHERE strftime('%Y', P.birthday) BETWEEN '1987' AND '1992'",
        "SELECT (CAST(SUM(CASE WHEN P.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) / COUNT(P.player_fifa_api_id)) * 100 AS percentage, COUNT(P.player_fifa_api_id) AS players FROM Player P WHERE P.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 23:59:59'",
        "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(player_fifa_api_id)) AS percentage, COUNT(player_fifa_api_id) AS players FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE birthday BETWEEN '1987-01-01' AND '1992-12-31'",
        "SELECT CAST(SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(p.player_fifa_api_id) FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE strftime('%Y', p.birthday) BETWEEN '1987' AND '1992'",
        "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0) / COUNT(player_fifa_api_id) AS percentage_left_foot FROM Player WHERE strftime('%Y', birthday) BETWEEN '1987' AND '1992'",
        "SELECT (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0) / COUNT(player_fifa_api_id) AS percentage_left_footed FROM Player WHERE STRFTIME('%Y', birthday) BETWEEN '1987' AND '1992'"
    ],
    "777": [
        "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13'",
        "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "SELECT g.gender FROM superhero AS s JOIN gender AS g ON s.gender_id = g.id WHERE s.superhero_name = 'Agent 13'",
        "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'"
    ],
    "219": [
        "SELECT CAST(COUNT(DISTINCT T2.molecule_id) AS REAL) * 100 / COUNT(DISTINCT T3.bond_id) AS percentage FROM molecule AS T2 INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = '+' AND T3.bond_type = '#'",
        "SELECT (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT m2.molecule_id) FROM molecule AS m2 WHERE m2.label = '+')) AS percentage FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#'",
        "SELECT CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100 / COUNT(DISTINCT T2.bond_id) AS percentage FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.label = '+' AND T2.bond_type = '#'",
        "SELECT CAST(SUM(CASE WHEN T1.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "SELECT (SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.bond_id)) AS percent FROM bond AS T2 JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.label = '+'",
        "SELECT (SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(B.bond_id)) AS percent FROM bond AS B  JOIN molecule AS M ON B.molecule_id = M.molecule_id  WHERE B.bond_type = '#'"
    ],
    "1198": [
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis LIKE '%APS%'",
        "SELECT COUNT(*) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS'",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'"
    ],
    "1517": [
        "SELECT customers.Segment FROM customers ORDER BY customers.CustomerID LIMIT 1",
        "SELECT customers.Segment FROM customers ORDER BY customers.CustomerID LIMIT 1",
        "SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1",
        "SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers)",
        "SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers)",
        "SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1"
    ],
    "1427": [
        "SELECT DISTINCT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0",
        "SELECT DISTINCT b.category FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0",
        "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0",
        "SELECT T3.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0",
        "SELECT T2.category FROM budget AS T2 JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0",
        "SELECT DISTINCT T2.category  FROM event AS T1  INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event  WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0"
    ],
    "793": [
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.gender = 'Male'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.gender = 'Male'",
        "SELECT COUNT(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.gender = 'Male'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.race_id = 21 AND T1.gender_id = 1",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.id = 1",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.gender = 'Male'"
    ],
    "1084": [
        "SELECT COUNT(DISTINCT id) FROM Player WHERE strftime('%Y', birthday) < '1986' AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE defensive_work_rate = 'high')",
        "SELECT COUNT(DISTINCT p.player_api_id) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high'",
        "SELECT COUNT(DISTINCT p.id) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high'",
        "SELECT COUNT(DISTINCT T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986' AND T2.defensive_work_rate = 'high'",
        "SELECT COUNT(DISTINCT P.id) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high'",
        "SELECT COUNT(DISTINCT T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE STRFTIME('%Y', T1.birthday) < '1986' AND T2.defensive_work_rate = 'high'"
    ],
    "1313": [
        "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
        "SELECT COUNT(member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
        "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
        "SELECT COUNT(T1.link_to_major) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "SELECT COUNT(T1.member_id) FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"
    ],
    "885": [
        "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999)",
        "SELECT T1.name, T1.date FROM races AS T1 WHERE T1.year = 1999 ORDER BY T1.round DESC LIMIT 1",
        "SELECT T1.name, T1.date FROM races T1 JOIN seasons T2 ON T1.year = T2.year WHERE T2.year = 1999 AND T1.round = (SELECT MAX(round) FROM races WHERE year = 1999)",
        "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999)"
    ],
    "857": [
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix'",
        "SELECT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix'",
        "SELECT C.lat, C.lng FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.name = 'Abu Dhabi Grand Prix'",
        "SELECT circuits.lat, circuits.lng  FROM races  INNER JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.name = 'Abu Dhabi Grand Prix'"
    ],
    "390": [
        "SELECT colors, type FROM cards WHERE id BETWEEN 1 AND 20",
        "SELECT colors, type FROM cards WHERE id BETWEEN 1 AND 20",
        "SELECT colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20",
        "SELECT colors, type FROM cards WHERE id BETWEEN 1 AND 20",
        "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "SELECT T1.colors, T2.format  FROM cards AS T1  INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE T1.id BETWEEN 1 AND 20"
    ],
    "989": [
        "SELECT T1.forename, T1.surname, T1.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T2.positionOrder = 1",
        "SELECT T2.forename || ' ' || T2.surname AS Champion, T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.positionOrder = 1 AND T3.year = 2008 AND T3.name = 'Canadian Grand Prix'",
        "SELECT T1.forename || ' ' || T1.surname AS \"Who\", T2.time AS \"his finish time\" FROM results AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T2.positionOrder = 1",
        "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.name = 'Canadian Grand Prix' AND T2.year = 2008",
        "SELECT R1.time FROM races R1 JOIN results R2 ON R1.raceId = R2.raceId WHERE R1.name = 'Canadian Grand Prix' AND R1.year = 2008 AND R2.position = 1",
        "SELECT D.forename || ' ' || D.surname AS champion_name, R.time AS finish_time  FROM results AS R  INNER JOIN races AS RA ON R.raceId = RA.raceId  INNER JOIN drivers AS D ON R.driverId = D.driverId  WHERE RA.name = 'Canadian Grand Prix' AND RA.year = 2008 AND R.position = 1"
    ],
    "511": [
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1"
    ],
    "247": [
        "SELECT DISTINCT A.element FROM atom AS A WHERE A.atom_id NOT IN (SELECT C.atom_id FROM connected AS C)",
        "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected)",
        "SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.atom_id NOT IN (SELECT T2.atom_id FROM connected AS T2)",
        "SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected)",
        "SELECT T1.element FROM atom AS T1 WHERE T1.atom_id NOT IN (SELECT T2.atom_id FROM connected AS T2 UNION SELECT T3.atom_id2 FROM connected AS T3)",
        "SELECT element FROM atom WHERE atom_id NOT IN (SELECT DISTINCT atom_id FROM connected)"
    ],
    "13": [
        "SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) DESC LIMIT 3",
        "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) DESC LIMIT 3",
        "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) DESC LIMIT 3",
        "SELECT T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / CAST(T2.NumTstTakr AS REAL) DESC LIMIT 3",
        "SELECT sch.Phone FROM satscores sat JOIN schools sch ON sat.cds = sch.CDSCode WHERE sat.NumTstTakr IS NOT NULL ORDER BY (sat.NumGE1500 * 1.0 / sat.NumTstTakr) DESC LIMIT 3",
        "SELECT T2.Phone  FROM satscores AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  ORDER BY (T1.NumGE1500 * 1.0 / T1.NumTstTakr) DESC  LIMIT 3"
    ],
    "863": [
        "SELECT seasons.url, races.year FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901",
        "SELECT seasons.url, races.year FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901",
        "SELECT seasons.url, races.year FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901",
        "SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901",
        "SELECT S.url FROM races AS R JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901",
        "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901"
    ],
    "50": [
        "SELECT T2.School, T2.Street FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT schools.School, schools.Street FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT schools.School, schools.Street FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT T1.School, T1.MailStreet FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 6, 1",
        "SELECT T2.MailStreet, T1.sname FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT T2.MailStreet, T2.School  FROM satscores AS T1  INNER JOIN schools AS T2  ON T1.cds = T2.CDSCode  ORDER BY T1.AvgScrMath DESC  LIMIT 1 OFFSET 6"
    ],
    "10": [
        "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds ORDER BY satscores.AvgScrRead DESC LIMIT 1",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cds = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)",
        "SELECT T1.\"FRPM Count (Ages 5-17)\" FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)",
        "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "SELECT T1.`FRPM Count (Ages 5-17)`  FROM frpm AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE T2.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)"
    ],
    "1088": [
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70",
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70",
        "SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70",
        "SELECT DISTINCT P.player_name  FROM Player AS P  INNER JOIN Player_Attributes AS PA  ON P.player_api_id = PA.player_api_id  WHERE PA.volleys > 70 AND PA.dribbling > 70"
    ],
    "779": [
        "SELECT COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo')",
        "SELECT COUNT(T2.power_id) FROM hero_power AS T1 JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "SELECT COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo')",
        "SELECT COUNT(DISTINCT hp.power_id) FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id WHERE s.superhero_name = 'Amazo'",
        "SELECT COUNT(T2.power_id) FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'",
        "SELECT COUNT(T2.power_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'"
    ],
    "1509": [
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
        "SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Date > '2012-01-01'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
        "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'"
    ],
    "90": [
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' AND account.account_id IN (SELECT loan.account_id FROM loan)",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' AND account.account_id IN (SELECT loan.account_id FROM loan)",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN client ON account.account_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague'",
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague'",
        "SELECT COUNT(DISTINCT T1.account_id)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN loan AS T3 ON T1.account_id = T3.account_id  WHERE T2.A3 = 'Prague'"
    ],
    "43": [
        "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) ASC LIMIT 1",
        "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) ASC LIMIT 1",
        "SELECT CAST(satscores.AvgScrMath AS REAL) AS average_math_score, schools.County FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) ASC LIMIT 1",
        "SELECT CAST(T1.AvgScrMath AS REAL) + CAST(T1.AvgScrRead AS REAL) + CAST(T1.AvgScrWrite AS REAL) AS TotalAvgScore, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (CAST(T1.AvgScrMath AS REAL) + CAST(T1.AvgScrRead AS REAL) + CAST(T1.AvgScrWrite AS REAL)) = (SELECT MIN(CAST(T3.AvgScrMath AS REAL) + CAST(T3.AvgScrRead AS REAL) + CAST(T3.AvgScrWrite AS REAL)) FROM satscores AS T3)",
        "SELECT T2.AvgScrMath, T1.County FROM satscores AS T2 JOIN schools AS T1 ON T2.cds = T1.CDSCode WHERE T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite = (SELECT MIN(T3.AvgScrMath + T3.AvgScrRead + T3.AvgScrWrite) FROM satscores AS T3)",
        "SELECT T2.AvgScrMath, T1.CountyName  FROM satscores AS T2  INNER JOIN schools AS T1 ON T2.cds = T1.CDSCode  WHERE (T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite) =        (SELECT MIN(T3.AvgScrMath + T3.AvgScrRead + T3.AvgScrWrite)         FROM satscores AS T3)"
    ],
    "299": [
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "SELECT label FROM molecule WHERE molecule_id = 'TR124'"
    ],
    "487": [
        "SELECT (SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')",
        "SELECT (SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')",
        "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.name) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'",
        "SELECT CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE name = 'Coldsnap'",
        "SELECT (SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE setCode = 'COLD'",
        "SELECT (COUNT(T1.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE cards.setCode = (SELECT sets.code FROM sets WHERE sets.name = 'Coldsnap'))) AS powerful_percentage  FROM cards AS T1  WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL AND T1.setCode = (SELECT sets.code FROM sets WHERE sets.name = 'Coldsnap')"
    ],
    "1297": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` >= 250 AND E.KCT = '-'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` >= 250 AND E.KCT = '-'",
        "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.`T-CHO` >= 250 AND E.KCT = '-'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` >= 250 AND E.KCT = '-'",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Laboratory AS T1  INNER JOIN Examination AS T2 ON T1.ID = T2.ID  WHERE T1.`T-CHO` >= 250 AND T2.KCT = '-'"
    ],
    "634": [
        "SELECT T1.Title FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Title FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.Title ORDER BY SUM(T1.ViewCount) DESC LIMIT 1",
        "SELECT T1.DisplayName, SUM(T2.ViewCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.DisplayName ORDER BY SUM(T2.ViewCount) DESC LIMIT 1",
        "SELECT SUM(T1.ViewCount) AS TotalViewCount FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T2.DisplayName ORDER BY TotalViewCount DESC LIMIT 1",
        "SELECT T1.DisplayName, SUM(T2.ViewCount) AS TotalViewCount  FROM users AS T1  INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId  WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')  GROUP BY T1.DisplayName  ORDER BY TotalViewCount DESC  LIMIT 1"
    ],
    "44": [
        "SELECT T2.AvgScrWrite, T1.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 > 0 ORDER BY T1.NumTstTakr DESC LIMIT 1",
        "SELECT AVG(T1.AvgScrWrite) AS average_writing_score, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) GROUP BY T2.City",
        "SELECT AVG(T1.AvgScrWrite), T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(T3.NumTstTakr) FROM satscores AS T3 WHERE T3.NumGE1500 >= 0) GROUP BY T2.City",
        "WITH MaxTakers AS (SELECT sname, NumTstTakr FROM satscores WHERE NumGE1500 IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1) SELECT AVG(s.AvgScrWrite), sch.City FROM MaxTakers mt JOIN satscores s ON mt.sname = s.sname JOIN schools sch ON s.cds = sch.CDSCode",
        "SELECT AVG(T1.AvgScrWrite) AS AverageWritingScore, T2.City  FROM satscores AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)"
    ],
    "671": [
        "SELECT U.DisplayName FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Autobiographer' ORDER BY B.Date LIMIT 1",
        "SELECT U.DisplayName FROM users AS U JOIN badges AS B ON U.Id = B.UserId WHERE B.Name = 'Autobiographer' ORDER BY B.Date LIMIT 1",
        "SELECT U.DisplayName FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Autobiographer' ORDER BY B.Date LIMIT 1",
        "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Autobiographer' ORDER BY badges.Date ASC LIMIT 1",
        "SELECT U.DisplayName FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Autobiographer' ORDER BY B.Date ASC LIMIT 1",
        "SELECT U.DisplayName FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Autobiographer' AND B.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')"
    ],
    "758": [
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id INNER JOIN race AS R ON S.race_id = R.id WHERE S.height_cm = 185 AND R.race = 'Human'",
        "SELECT C.colour FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id INNER JOIN colour AS C ON S.hair_colour_id = C.id WHERE S.height_cm = 185 AND R.race = 'Human'",
        "SELECT c.colour FROM superhero AS s INNER JOIN race AS r ON s.race_id = r.id INNER JOIN colour AS c ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND r.race = 'Human'",
        "SELECT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "SELECT c.colour FROM superhero AS s JOIN race AS r ON s.race_id = r.id JOIN colour AS c ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND r.race = 'Human'",
        "SELECT T3.colour FROM superhero AS T1  INNER JOIN race AS T2 ON T1.race_id = T2.id  INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id  WHERE T1.height_cm = 185 AND T2.race = 'human'"
    ],
    "430": [
        "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2",
        "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2",
        "SELECT sets.name, sets.id FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2",
        "SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN foreign_data AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.name LIMIT 2",
        "SELECT S.id, ST.setCode FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Italian' AND S.block = 'Shadowmoor' ORDER BY S.name LIMIT 2",
        "SELECT T1.id, T1.name  FROM sets AS T1  INNER JOIN set_translations AS T2 ON T1.code = T2.setCode  WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian'  ORDER BY T1.name  LIMIT 2"
    ],
    "1527": [
        "SELECT T1.GasStationID FROM transactions_1k AS T1 GROUP BY T1.GasStationID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1",
        "SELECT T1.GasStationID, SUM(T2.Price) AS Revenue FROM transactions_1k AS T2 INNER JOIN gasstations AS T1 ON T2.GasStationID = T1.GasStationID GROUP BY T1.GasStationID ORDER BY Revenue DESC LIMIT 1",
        "SELECT transactions_1k.GasStationID, SUM(transactions_1k.Amount * transactions_1k.Price) AS total_revenue FROM transactions_1k GROUP BY transactions_1k.GasStationID ORDER BY total_revenue DESC LIMIT 1",
        "SELECT g.GasStationID, SUM(t.Price) FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID GROUP BY g.GasStationID ORDER BY SUM(t.Price) DESC LIMIT 1",
        "SELECT T2.GasStationID FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID GROUP BY T2.GasStationID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1",
        "SELECT T2.GasStationID, SUM(T1.Amount * T1.Price) AS TotalRevenue  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  GROUP BY T2.GasStationID  ORDER BY TotalRevenue DESC  LIMIT 1"
    ],
    "1129": [
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow'",
        "SELECT T.team_long_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow'",
        "SELECT T.team_long_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow'",
        "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow'",
        "SELECT T1.team_long_name FROM Team_Attributes T1 WHERE T1.buildUpPlaySpeedClass = 'Slow'",
        "SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow'"
    ],
    "416": [
        "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(*) AS REAL) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*')",
        "SELECT CAST(COUNT(CASE WHEN T2.language = 'French' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "SELECT CAST(COUNT(CASE WHEN foreign_data.language = 'French' THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage, cards.name FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE (cards.power IS NULL OR cards.power = '*') GROUP BY cards.name",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'French' AND (T1.power IS NULL OR T1.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T1.power IS NULL OR T1.power = '*' THEN 1 END) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "SELECT (COUNT(CASE WHEN F.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C LEFT JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.power IS NULL OR C.power = '*'",
        "SELECT (COUNT(CASE WHEN language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM cards  WHERE power IS NULL OR power = '*'"
    ],
    "549": [
        "SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'bayesian'",
        "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian'",
        "SELECT posts.Body FROM tags INNER JOIN posts ON tags.ExcerptPostId = posts.Id WHERE tags.TagName = 'bayesian'",
        "SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T2.ExcerptPostId = T1.Id WHERE T2.TagName = 'bayesian'",
        "SELECT T2.Body FROM tags AS T1 JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'",
        "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'"
    ],
    "726": [
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC",
        "SELECT T1.superhero_name, T1.height_cm FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC",
        "SELECT T1.id, T1.height_cm FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm IS NOT NULL AND T1.height_cm > 0 ORDER BY T1.height_cm DESC",
        "SELECT T1.superhero_name, T1.height_cm FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC"
    ],
    "1156": [
        "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'",
        "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'",
        "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'",
        "SELECT Patient.ID, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'",
        "SELECT T1.ID, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
        "SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE E.RVVT = '+'"
    ],
    "1526": [
        "SELECT (T1.Consumption - T2.Consumption) / T1.Consumption AS ConsumptionDecreaseRate FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25' AND T2.Price = 634.8 AND T1.Date IN ('201201', '201301', '201302', '201303', '201304', '201305', '201306', '201307', '201308', '201309', '201310', '201311', '201312') GROUP BY T1.CustomerID",
        "SELECT (T1.Consumption - T2.Consumption) / T1.Consumption AS consumption_decrease_rate FROM yearmonth AS T1 INNER JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '2012-08-25' AND T3.Price = 634.8 AND T1.Date = '201207' AND EXISTS (SELECT 1 FROM yearmonth AS T4 WHERE T4.CustomerID = T1.CustomerID AND T4.Date = '201307') AS T2",
        "SELECT (T1.Consumption - T2.Consumption) / T1.Consumption AS consumption_decrease_rate FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Price = 634.8) WHERE T1.Date = '2012' AND T2.Date = '2013'",
        "SELECT (CAST((CAST(SUM(CASE WHEN T2.Date = '201207' THEN T2.Consumption ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN T2.Date = '201307' THEN T2.Consumption ELSE 0 END) AS REAL)) AS REAL) / CAST(SUM(CASE WHEN T2.Date = '201207' THEN T2.Consumption ELSE 0 END) AS REAL)) * 100 AS consumption_decrease_rate FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price = 634.8 AND T1.Date = '2012-08-25'",
        "SELECT (y2012.Consumption - y2013.Consumption) / y2012.Consumption AS consumption_decrease_rate FROM yearmonth AS y2012 JOIN yearmonth AS y2013 ON y2012.CustomerID = y2013.CustomerID WHERE y2012.Date = '201207' AND y2013.Date = '201307' AND y2012.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Price = 634.8)",
        "SELECT (SUM(CASE WHEN STRFTIME('%Y', Y.Date) = '2012' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', Y.Date) = '2013' THEN Y.Consumption ELSE 0 END)) / SUM(CASE WHEN STRFTIME('%Y', Y.Date) = '2012' THEN Y.Consumption ELSE 0 END) AS consumption_decrease_rate FROM transactions_1k AS T INNER JOIN yearmonth AS Y ON T.CustomerID = Y.CustomerID WHERE T.Price = 634.8 AND T.Date = '2012-08-25'"
    ],
    "277": [
        "SELECT DISTINCT a.element FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR000_1_2'",
        "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_1_2') ORDER BY element",
        "SELECT A.element FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR000_1_2'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_1_2'",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_1_2'",
        "SELECT DISTINCT T1.element  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id  WHERE T3.bond_id = 'TR000_1_2'"
    ],
    "250": [
        "SELECT T2.molecule_id FROM (SELECT T1.molecule_id, COUNT(*) AS double_bond_count FROM bond T1 WHERE T1.bond_type = '=' GROUP BY T1.molecule_id) AS T3 JOIN molecule T2 ON T3.molecule_id = T2.molecule_id WHERE T2.label = '+' ORDER BY double_bond_count DESC LIMIT 1",
        "SELECT T2.molecule_id FROM (SELECT T1.molecule_id, COUNT(*) AS double_bond_count FROM bond T1 WHERE T1.bond_type = '=' GROUP BY T1.molecule_id) AS T3 JOIN molecule T2 ON T3.molecule_id = T2.molecule_id WHERE T2.label = '+' ORDER BY double_bond_count DESC LIMIT 1",
        "SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '=' GROUP BY T2.molecule_id ORDER BY COUNT(T1.bond_id) DESC LIMIT 1",
        "SELECT T1.molecule_id, COUNT(T2.bond_type) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_type) DESC LIMIT 1",
        "SELECT T1.molecule_id FROM molecule T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1",
        "SELECT T1.molecule_id, COUNT(T2.bond_id) AS double_bond_count  FROM molecule AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '+' AND T2.bond_type = '='  GROUP BY T1.molecule_id  ORDER BY double_bond_count DESC  LIMIT 1"
    ],
    "70": [
        "SELECT StatusType, COUNT(*) FROM schools WHERE SOCType = 'District Community Day Schools' AND County = 'Alpine' GROUP BY StatusType",
        "SELECT COUNT(*) AS ActiveCount FROM schools WHERE SOCType = 'District Community Day Schools' AND StatusType = 'Active' AND County = 'Alpine'; SELECT COUNT(*) AS ClosedCount FROM schools WHERE SOCType = 'District Community Day Schools' AND StatusType = 'Closed' AND County = 'Alpine'",
        "SELECT COUNT(*) AS Active_Count FROM schools WHERE SOCType = 'District Community Day Schools' AND StatusType = 'Active' AND County = 'Alpine'; SELECT COUNT(*) AS Closed_Count FROM schools WHERE SOCType = 'District Community Day Schools' AND StatusType = 'Closed' AND County = 'Alpine'",
        "SELECT StatusType, COUNT(*) FROM schools WHERE District = 'District Community Day Schools' AND County = 'Alpine' GROUP BY StatusType",
        "SELECT StatusType, COUNT(*) as count FROM schools WHERE County = 'Alpine' GROUP BY StatusType",
        "SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND School LIKE '%District Community Day School%'"
    ],
    "367": [
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
        "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
        "SELECT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
        "SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'"
    ],
    "1448": [
        "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100",
        "SELECT event.event_name, event.event_date FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100",
        "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100",
        "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100",
        "SELECT T1.event_name, T1.event_date FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100",
        "SELECT T1.event_name, T1.event_date  FROM event AS T1  INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget  WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100"
    ],
    "187": [
        "SELECT COUNT(DISTINCT T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
        "SELECT COUNT(T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
        "SELECT COUNT(DISTINCT disp.client_id) FROM disp JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
        "SELECT COUNT(DISTINCT T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
        "SELECT COUNT(DISTINCT C.client_id) FROM account AS A JOIN disp AS D ON A.account_id = D.account_id JOIN client AS C ON D.client_id = C.client_id WHERE A.frequency = 'POPLATEK TYDNE' AND D.type = 'OWNER'",
        "SELECT COUNT(DISTINCT T1.client_id)  FROM disp AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'"
    ],
    "1226": [
        "SELECT T1.ID, MAX(T2.`T-CHO`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = (SELECT MIN(Birthday) FROM Patient) GROUP BY T1.ID",
        "SELECT P.ID, L.`T-CHO` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) ORDER BY P.Birthday LIMIT 1",
        "SELECT P.ID, MAX(L.`T-CHO`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient) GROUP BY P.ID ORDER BY MAX(L.`T-CHO`) DESC LIMIT 1",
        "SELECT P.ID, L.`T-CHO` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient) AND L.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory)",
        "SELECT T1.ID, T2.`T-CHO` FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) AND T1.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE EXISTS (SELECT 1 FROM Laboratory T3 WHERE T3.ID = T1.ID AND T3.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory)))",
        "SELECT T1.ID, T2.T_CHO  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.T_CHO = (SELECT MAX(T_CHO) FROM Laboratory)  AND T1.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE T_CHO = (SELECT MAX(T_CHO) FROM Laboratory)))"
    ],
    "744": [
        "SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') AS difference_in_superheroes",
        "SELECT ABS(COUNT(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 END) - COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END)) AS difference FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference, (SELECT publisher_name FROM publisher WHERE publisher_name IN ('Marvel Comics', 'DC Comics') ORDER BY (SELECT COUNT(*) FROM superhero WHERE publisher_id = publisher.id) DESC LIMIT 1) AS which_publisher",
        "SELECT (CAST(SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AS FLOAT)) - (CAST(SELECT COUNT(T3.id) FROM superhero AS T3 INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'DC Comics' AS FLOAT)) AS difference",
        "SELECT (SELECT COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') - (SELECT COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') AS difference",
        "SELECT (SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name IN ('DC Comics', 'Marvel Comics')"
    ],
    "177": [
        "SELECT SUM(trans.amount) AS total_sum, client.gender FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE trans.trans_id = 851 AND client.client_id = 4",
        "SELECT SUM(t.amount), c.gender FROM trans AS t JOIN account AS a ON t.account_id = a.account_id JOIN disp AS d ON a.account_id = d.account_id JOIN client AS c ON d.client_id = c.client_id WHERE t.trans_id = 851 AND c.client_id = 4",
        "SELECT SUM(trans.amount) AS total_amount, client.gender FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE trans.trans_id = 851 AND client.client_id = 4",
        "SELECT SUM(T1.balance), T3.gender FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.trans_id = 851 AND T3.client_id = 4",
        "SELECT SUM(T3.amount), T2.gender FROM trans AS T3 JOIN account AS T2 ON T3.account_id = T2.account_id JOIN disp AS T4 ON T2.account_id = T4.account_id JOIN client AS T1 ON T4.client_id = T1.client_id WHERE T3.trans_id > 851 AND T1.client_id = 4",
        "SELECT SUM(trans.amount) AS total_amount, client.gender  FROM trans  INNER JOIN account ON trans.account_id = account.account_id  INNER JOIN disp ON account.account_id = disp.account_id  INNER JOIN client ON disp.client_id = client.client_id  WHERE disp.client_id = 4 AND trans.trans_id = 851"
    ],
    "689": [
        "SELECT U.DisplayName, U.Location FROM users AS U INNER JOIN posts AS P ON U.Id = P.LastEditorUserId WHERE P.Id = 183 ORDER BY P.LastEditDate DESC LIMIT 1",
        "SELECT U.DisplayName, U.Location FROM users AS U INNER JOIN posts AS P ON U.Id = P.LastEditorUserId WHERE P.Id = 183 ORDER BY P.LastEditDate DESC LIMIT 1",
        "SELECT u.DisplayName, u.Location FROM users u INNER JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1",
        "SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Id = 183 AND T2.LastEditDate = (SELECT MAX(LastEditDate) FROM posts WHERE Id = 183)",
        "SELECT U.DisplayName, U.Location FROM posts AS P JOIN users AS U ON P.LastEditorUserId = U.Id WHERE P.Id = 183 AND P.LastEditDate = (SELECT MAX(LastEditDate) FROM posts WHERE Id = 183)",
        "SELECT U.DisplayName, U.Location  FROM posts AS P  INNER JOIN users AS U  ON P.LastEditorUserId = U.Id  WHERE P.Id = 183"
    ],
    "577": [
        "SELECT Text FROM comments WHERE UserDisplayName = 'A Lion'",
        "SELECT Text FROM comments WHERE UserDisplayName = 'A Lion'",
        "SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion')",
        "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion'",
        "SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'"
    ],
    "665": [
        "SELECT COUNT(Id) / 12.0 AS average_monthly_links FROM postLinks WHERE strftime('%Y', CreationDate) = '2010' AND PostId IN (SELECT Id FROM posts WHERE AnswerCount <= 2)",
        "SELECT COUNT(Id) / 12 AS average_monthly_links_created FROM postLinks WHERE strftime('%Y', CreationDate) = '2010' AND PostId IN (SELECT Id FROM posts WHERE AnswerCount <= 2)",
        "SELECT COUNT(Id) / 12.0 AS average_monthly_links FROM postLinks WHERE YEAR(CreationDate) = 2010 AND PostId IN (SELECT Id FROM posts WHERE AnswerCount <= 2)",
        "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2",
        "SELECT COUNT(T1.Id) / 12 AS AverageMonthlyLinks FROM postLinks AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2",
        "SELECT COUNT(T1.Id) / 12.0 AS AverageMonthlyLinks FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2"
    ],
    "227": [
        "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) AS percentage FROM molecule",
        "SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(molecule_id)), 3) AS percentage FROM molecule",
        "SELECT CAST(COUNT(molecule_id) AS REAL) * 100 / (SELECT COUNT(molecule_id) FROM molecule) AS percentage FROM molecule WHERE label = '+'",
        "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule",
        "SELECT ROUND((SUM(label = '+') * 100.0) / COUNT(molecule_id), 3) AS percent FROM molecule",
        "SELECT ROUND(SUM(label = '+') * 100.0 / COUNT(molecule_id), 3) AS percentage FROM molecule"
    ],
    "555": [
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT AVG(T2.Score) FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'",
        "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'"
    ],
    "675": [
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000"
    ],
    "772": [
        "SELECT C1.colour AS Eyes, C2.colour AS Hair, C3.colour AS SkinColour FROM superhero AS S INNER JOIN colour AS C1 ON S.eye_colour_id = C1.id INNER JOIN colour AS C2 ON S.hair_colour_id = C2.id INNER JOIN colour AS C3 ON S.skin_colour_id = C3.id INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE G.gender = 'Female' AND P.publisher_name = 'Dark Horse Comics'",
        "SELECT C1.colour AS eyes, C2.colour AS hair, C3.colour AS skin_colour FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id INNER JOIN colour AS C1 ON T1.eye_colour_id = C1.id INNER JOIN colour AS C2 ON T1.hair_colour_id = C2.id INNER JOIN colour AS C3 ON T1.skin_colour_id = C3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'",
        "SELECT colour1.colour AS Eyes, colour2.colour AS Hair, colour3.colour AS SkinColour FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour AS colour1 ON superhero.eye_colour_id = colour1.id INNER JOIN colour AS colour2 ON superhero.hair_colour_id = colour2.id INNER JOIN colour AS colour3 ON superhero.skin_colour_id = colour3.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics'",
        "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female' AND T2.publisher_name = 'Dark Horse Comics'",
        "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'",
        "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id  FROM superhero AS T1  INNER JOIN gender AS T2 ON T1.gender_id = T2.id  INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id  WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'"
    ],
    "474": [
        "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100",
        "SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100",
        "SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100",
        "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100",
        "SELECT COUNT(*) FROM set_translations T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Italian' AND T2.baseSetSize < 100",
        "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T2.translation IS NOT NULL AND T1.baseSetSize < 100"
    ],
    "831": [
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.superhero_name = 'Abomination'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'"
    ],
    "915": [
        "SELECT D.nationality, D.forename || ' ' || D.surname AS driver FROM drivers D ORDER BY D.dob ASC LIMIT 1",
        "SELECT D.nationality, D.surname FROM drivers D WHERE D.dob = (SELECT MIN(dob) FROM drivers)",
        "SELECT drivers.nationality FROM drivers ORDER BY drivers.dob ASC LIMIT 1",
        "SELECT C.country FROM drivers AS D JOIN results AS R ON D.driverId = R.driverId JOIN races AS R1 ON R.raceId = R1.raceId JOIN circuits AS C ON R1.circuitId = C.circuitId WHERE D.dob = (SELECT MIN(dob) FROM drivers)",
        "SELECT drivers.nationality FROM drivers ORDER BY drivers.dob ASC LIMIT 1",
        "SELECT T1.nationality  FROM drivers AS T1  WHERE T1.dob = (SELECT MIN(dob) FROM drivers)"
    ],
    "1280": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60",
        "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60",
        "SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60"
    ],
    "850": [
        "SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany'",
        "SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany'",
        "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'",
        "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'",
        "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'",
        "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'"
    ],
    "1368": [
        "SELECT J.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.phone = '809-555-3360'",
        "SELECT J.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.phone = '809-555-3360'",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
        "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.phone = '809-555-3360'",
        "SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"
    ],
    "1477": [
        "SELECT SUBSTR(Y.Date, 1, 4) AS Year, SUM(Y.Consumption) AS Total_Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1",
        "SELECT SUBSTR(Y.Date, 1, 4) AS Year, SUM(Y.Consumption) AS Total_Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY Year ORDER BY Total_Consumption DESC LIMIT 1",
        "SELECT SUBSTR(T1.Date, 1, 4) AS year, SUM(T1.Consumption) AS total_consumption FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY year ORDER BY total_consumption DESC LIMIT 1",
        "SELECT strftime('%Y', T1.Date), CAST(SUM(T2.Consumption) AS REAL) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY strftime('%Y', T1.Date) ORDER BY CAST(SUM(T2.Consumption) AS REAL) DESC LIMIT 1",
        "SELECT strftime('%Y', T1.Date) AS Year, SUM(T1.Amount) AS TotalGasUse FROM transactions_1k T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY Year ORDER BY TotalGasUse DESC LIMIT 1",
        "SELECT STRFTIME('%Y', T1.Date) AS year, SUM(T2.Amount) AS total_gas_use  FROM yearmonth AS T1  INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID  WHERE T3.Currency = 'EUR'  GROUP BY year  ORDER BY total_gas_use DESC  LIMIT 1"
    ],
    "628": [
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)"
    ],
    "1493": [
        "SELECT (COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage, COUNT(*) AS customers FROM yearmonth WHERE Date = '201202'",
        "SELECT (COUNT(CASE WHEN Y.Consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM customers AS C JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date = '201202'",
        "SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date = '201202')) AS percentage, COUNT(DISTINCT T1.CustomerID) AS customers FROM yearmonth AS T1 WHERE T1.Date = '201202' AND T1.Consumption > 528.3",
        "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
        "WITH TotalCustomers AS (SELECT COUNT(DISTINCT CustomerID) AS total FROM yearmonth WHERE Date = '201202'), CustomersAboveThreshold AS (SELECT COUNT(DISTINCT CustomerID) AS above_threshold FROM yearmonth WHERE Date = '201202' AND Consumption > 528.3) SELECT (CAST(above_threshold AS REAL) / total) * 100 AS percentage FROM TotalCustomers, CustomersAboveThreshold",
        "SELECT (COUNT(DISTINCT CASE WHEN Consumption > 528.3 THEN CustomerID END) * 100.0 / COUNT(DISTINCT CustomerID)) AS percentage  FROM yearmonth  WHERE Date = '201202'"
    ],
    "1454": [
        "SELECT (SUM(T3.cost) * 100.0) / COUNT(DISTINCT T1.event_id) AS percentage FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "SELECT (SUM(e.cost) * 100.0) / COUNT(ev.event_id) AS percentage FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.type = 'Meeting'",
        "SELECT (SUM(T2.cost) * 1.0 / COUNT(T1.event_id)) * 100 AS percentage, SUM(T2.cost) AS cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting'",
        "SELECT CAST(SUM(expense.cost) AS REAL) * 100 / COUNT(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting'",
        "SELECT (SUM(T3.cost) / COUNT(T1.event_id)) * 100 as percentage FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "SELECT (SUM(expense.cost) * 100.0 / COUNT(event.event_id)) AS percentage FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Meeting'"
    ],
    "1093": [
        "SELECT CAST(SUM(PA.overall_rating) AS REAL) / COUNT(P.id) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986'",
        "SELECT CAST(SUM(PA.overall_rating) AS REAL) / COUNT(P.id) AS average_overall_rating FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986'",
        "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE strftime('%Y', t1.birthday) < '1986'",
        "SELECT CAST(SUM(overall_rating) AS REAL) / COUNT(id) FROM Player WHERE strftime('%Y', Player.birthday) < '1986'",
        "SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE STRFTIME('%Y', T1.birthday) < '1986'"
    ],
    "919": [
        "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
        "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
        "SELECT C.name FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix'",
        "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009",
        "SELECT T2.circuitId, T2.circuitRef FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'",
        "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009"
    ],
    "179": [
        "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 617 AND strftime('%Y', T1.date) = '1998'",
        "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 617 AND strftime('%Y', T1.date) = '1998'",
        "SELECT SUM(trans.amount) FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE disp.client_id = 617 AND strftime('%Y', trans.date) = '1998'",
        "SELECT SUM(t.amount) FROM trans AS t WHERE t.account_id = (SELECT d.account_id FROM disp AS d WHERE d.client_id = 617) AND strftime('%Y', t.date) = '1998'",
        "SELECT SUM(T3.amount) FROM trans AS T3 JOIN disp AS T2 ON T3.account_id = T2.account_id WHERE T2.client_id = 617 AND T3.date BETWEEN '1998-01-01' AND '1998-12-31'",
        "SELECT SUM(T.amount) FROM trans AS T INNER JOIN account AS A ON T.account_id = A.account_id WHERE A.client_id = 617 AND STRFTIME('%Y', T.date) = '1998'"
    ],
    "873": [
        "SELECT R.time FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Bruce' AND D.surname = 'McLaren' AND R.raceId = 743",
        "SELECT results.time FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 743 AND drivers.forename = 'Bruce' AND drivers.surname = 'McLaren'",
        "SELECT R.time FROM results R INNER JOIN drivers D ON R.driverId = D.driverId WHERE R.raceId = 743 AND D.forename = 'Bruce' AND D.surname = 'McLaren'",
        "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'McLaren' AND T2.forename = 'Bruce' AND T1.raceId = 743",
        "SELECT T1.time FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.forename = 'Bruce' AND T2.surname = 'McLaren'",
        "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruce' AND T2.surname = 'McLaren' AND T1.raceId = 743"
    ],
    "28": [
        "SELECT schools.School, schools.DOCType FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (SELECT AVG(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.`Charter Funding Type` = 'Locally funded')",
        "SELECT schools.School, schools.DOCType FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (SELECT AVG(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.`FundingType` = 'Locally funded') AND frpm.`FundingType` = 'Locally funded'",
        "SELECT schools.School, schools.DOCType FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (SELECT AVG(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.`Charter Funding Type` = 'Locally funded') AND frpm.`Charter Funding Type` = 'Locally funded'",
        "SELECT s.\"School Name\", s.DOCType FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE f.FundingType = 'Locally funded' AND (CAST(f.\"Enrollment (K-12)\" AS REAL) - CAST(f.\"Enrollment (Ages 5-17)\" AS REAL)) > (SELECT AVG(CAST(f2.\"Enrollment (K-12)\" AS REAL) - CAST(f2.\"Enrollment (Ages 5-17)\" AS REAL)) FROM frpm AS f2 WHERE f2.FundingType = 'Locally funded')",
        "SELECT T2.School, T2.DOCType FROM (SELECT (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) AS Difference FROM frpm WHERE frpm.`Charter Funding Type` = 'Locally funded') AS T1, schools AS T2 WHERE T1.Difference > (SELECT AVG(Difference) FROM (SELECT (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) AS Difference FROM frpm WHERE frpm.`Charter Funding Type` = 'Locally funded')) AND T2.CDSCode = frpm.CDSCode",
        "SELECT T1.School, T1.DOCType  FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE (T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (     SELECT AVG(T2_inner.`Enrollment (K-12)` - T2_inner.`Enrollment (Ages 5-17)`)      FROM schools AS T1_inner     INNER JOIN frpm AS T2_inner ON T1_inner.CDSCode = T2_inner.CDSCode      WHERE T1_inner.FundingType = 'Locally funded' )"
    ],
    "410": [
        "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND uuid IN (SELECT uuid FROM legalities WHERE format = 'pauper')",
        "SELECT T1.id FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T1.availability = 'paper' AND T2.format = 'pauper'",
        "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND cards.availability LIKE '%paper%' AND legalities.format = 'pauper'",
        "SELECT T1.id FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T1.availability LIKE '%paper%' AND T2.format = 'pauper'",
        "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T1.availability LIKE '%paper%' AND T2.status = 'Legal'"
    ],
    "327": [
        "SELECT m.molecule_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5",
        "SELECT a.molecule_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY a.molecule_id HAVING COUNT(a.atom_id) > 5",
        "SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T1.atom_id) > 5",
        "SELECT m.molecule_id, COUNT(a.atom_id) FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5",
        "SELECT T1.molecule_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T1.molecule_id) > 5",
        "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5"
    ],
    "1497": [
        "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date = '201206' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date = '201206' ORDER BY T2.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID, T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1",
        "SELECT T1.CustomerID FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1",
        "SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date = '201206' AND T1.Consumption = (SELECT MIN(Consumption) FROM yearmonth AS T3 INNER JOIN customers AS T4 ON T3.CustomerID = T4.CustomerID WHERE T4.Segment = 'SME' AND T3.Date = '201206')"
    ],
    "1425": [
        "SELECT COUNT(DISTINCT major.major_name) FROM major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT COUNT(major.major_name) FROM major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT COUNT(major.major_name) FROM major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT COUNT(major_name) FROM major WHERE department = 'School of Applied Sciences, Technology and Education'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture & Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'",
        "SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'"
    ],
    "895": [
        "SELECT AVG(LT.milliseconds) AS average_lap_time FROM lapTimes AS LT INNER JOIN drivers AS D ON LT.driverId = D.driverId INNER JOIN races AS R ON LT.raceId = R.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.name = 'Malaysian Grand Prix'",
        "SELECT AVG(LT.milliseconds) FROM lapTimes AS LT INNER JOIN drivers AS D ON LT.driverId = D.driverId INNER JOIN races AS R ON LT.raceId = R.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.name = 'Malaysian Grand Prix'",
        "SELECT AVG(T1.milliseconds) AS average_lap_time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Malaysian Grand Prix'",
        "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Malaysian Grand Prix' AND T2.year = 2009",
        "SELECT AVG(T1.milliseconds) FROM lapTimes T1 JOIN drivers T2 ON T1.driverId = T2.driverId JOIN races T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Malaysian Grand Prix' AND T3.year = 2009",
        "SELECT AVG(T1.milliseconds)  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Malaysian Grand Prix'"
    ],
    "890": [
        "SELECT COUNT(DISTINCT races.year) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix'",
        "SELECT COUNT(DISTINCT R.year) FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE C.name = 'Silverstone Circuit' AND R.name = 'British Grand Prix'",
        "SELECT COUNT(DISTINCT races.year) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix'",
        "SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'British Grand Prix' AND T2.name = 'Silverstone Circuit'",
        "SELECT COUNT(DISTINCT S.year) FROM circuits C JOIN races R ON C.circuitId = R.circuitId JOIN seasons S ON R.year = S.year WHERE C.circuitRef = 'silverstone' AND R.name = 'British Grand Prix'",
        "SELECT COUNT(DISTINCT T3.year)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Silverstone Circuit' AND T1.name = 'British Grand Prix'"
    ],
    "992": [
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.url AS wiki_page, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1971' AND '1985' ORDER BY T1.dob DESC",
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.url AS wiki_page, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1971' AND '1985' ORDER BY T1.dob DESC",
        "SELECT (D.forename || ' ' || D.surname) AS full_name, D.url AS wiki_link, D.dob FROM drivers AS D WHERE D.nationality = 'German' AND STRFTIME('%Y', D.dob) BETWEEN '1971' AND '1985' ORDER BY D.dob DESC",
        "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "SELECT (T1.forename || ' ' || T1.surname) AS full_name, T1.url, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1971' AND '1985' ORDER BY T1.dob DESC",
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.url, T1.dob  FROM drivers AS T1  WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1971' AND '1985'  ORDER BY T1.dob DESC"
    ],
    "633": [
        "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick') ORDER BY AnswerCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1",
        "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1"
    ],
    "1122": [
        "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1",
        "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1",
        "SELECT P.player_name FROM Player_Attributes AS PA JOIN Player AS P ON PA.player_api_id = P.player_api_id ORDER BY PA.overall_rating DESC LIMIT 1",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"
    ],
    "561": [
        "SELECT posts.Title FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.Score = (SELECT MAX(Score) FROM comments)",
        "SELECT posts.Title FROM posts INNER JOIN comments ON comments.PostId = posts.Id WHERE comments.Score = (SELECT MAX(Score) FROM comments)",
        "SELECT p.Title FROM posts p INNER JOIN comments c ON p.Id = c.PostId ORDER BY c.Score DESC LIMIT 1",
        "SELECT T2.Title FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = (SELECT MAX(Score) FROM comments)",
        "SELECT p.Title FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = (SELECT MAX(Score) FROM comments) LIMIT 1",
        "SELECT T2.Title  FROM comments AS T1  INNER JOIN posts AS T2 ON T1.PostId = T2.Id  WHERE T1.Score = (SELECT MAX(Score) FROM comments)"
    ],
    "350": [
        "SELECT language FROM foreign_data WHERE name = 'Annul' AND uuid IN (SELECT uuid FROM cards WHERE number = '29b')",
        "SELECT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Annul' AND cards.number = '29b'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
        "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Annul' AND T2.number = '29b'",
        "SELECT FD.language FROM cards AS C JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.name = 'Annul' AND C.number = '29'",
        "SELECT DISTINCT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'annul' AND T1.number = '29'"
    ],
    "435": [
        "SELECT COUNT(*) AS black_border_count, GROUP_CONCAT(id) AS black_border_ids FROM cards WHERE borderColor = 'black'",
        "SELECT COUNT(*) AS card_count, id FROM cards WHERE borderColor = 'black'",
        "SELECT COUNT(*) AS card_count, id FROM cards WHERE borderColor = 'black'",
        "SELECT id FROM cards WHERE borderColor = 'black'",
        "SELECT id FROM cards WHERE borderColor = 'black'",
        "SELECT COUNT(id), GROUP_CONCAT(id) FROM cards WHERE borderColor = 'black'"
    ],
    "552": [
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT T1.Name FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    ],
    "1307": [
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'",
        "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC <= 3.5 OR L.RBC >= 6.0 AND P.Admission = '-'",
        "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'",
        "SELECT DISTINCT P.ID  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'"
    ],
    "1157": [
        "SELECT P.ID, P.SEX, E.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2",
        "SELECT T1.ID, T2.SEX, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2",
        "SELECT T1.ID, T2.SEX, T2.Diagnosis FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2",
        "SELECT P.ID, P.SEX, E.Diagnosis  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE E.Thrombosis = 2"
    ],
    "312": [
        "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'",
        "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_2_4'",
        "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'",
        "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'",
        "SELECT T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'",
        "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'"
    ],
    "1386": [
        "SELECT SUM(e.cost) FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff'",
        "SELECT SUM(e.cost) FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff'",
        "SELECT SUM(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'",
        "SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff'",
        "SELECT SUM(T2.cost) FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
        "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'"
    ],
    "172": [
        "SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND (type = 'OWNER' OR type = 'DISPONENT')",
        "SELECT disp.type, COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY disp.type",
        "SELECT disp.type, COUNT(*) FROM disp WHERE disp.account_id BETWEEN 1 AND 10 GROUP BY disp.type",
        "SELECT COUNT(type) FROM disp WHERE type IN ('OWNER', 'DISPONENT') AND account_id BETWEEN (SELECT MIN(account_id) FROM account) AND (SELECT MAX(account_id) FROM account)",
        "SELECT disp.type, COUNT(*) as count FROM disp WHERE disp.account_id BETWEEN 1 AND 10 AND disp.type IN ('OWNER', 'DISPONENT') GROUP BY disp.type",
        "SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT')"
    ],
    "241": [
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'",
        "SELECT COUNT(*) FROM molecule WHERE label = '-'",
        "SELECT COUNT(*) FROM molecule WHERE label = '-'"
    ],
    "568": [
        "SELECT users.DisplayName FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347",
        "SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347",
        "SELECT users.DisplayName FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347",
        "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
        "SELECT T2.DisplayName FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347",
        "SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347"
    ],
    "1070": [
        "SELECT C.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'",
        "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'",
        "SELECT C.name FROM Country AS C JOIN League AS L ON C.id = L.country_id WHERE L.name = 'Italy Serie A'",
        "SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A'",
        "SELECT C.name FROM League L JOIN Country C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'",
        "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'"
    ],
    "687": [
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
        "SELECT COUNT(c.Id) FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts)",
        "SELECT COUNT(comments.Id) FROM comments WHERE comments.PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)"
    ],
    "809": [
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38"
    ],
    "1273": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.SSB IN ('-', '0') AND P.Diagnosis = 'SLE'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.SSB IN ('-', '0')",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.SSB IN ('negative', '0')",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 WHERE T1.Diagnosis = 'SLE' AND T1.SSB IN ('-')",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Diagnosis = 'SLE' AND P.SSB IN ('-', '0')",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  INNER JOIN Examination AS E ON P.ID = E.ID  WHERE E.SSB IN ('-', '0') AND P.Diagnosis = 'SLE'"
    ],
    "521": [
        "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy'",
        "SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy'",
        "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameVersion = '1997' AND cards.artist = 'D. Alexander Gregory' AND cards.hasContentWarning = 1 AND legalities.format = 'legacy'",
        "SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'D. Alexander Gregory' AND T2.hasContentWarning = 1 AND T1.format = 'legacy'",
        "SELECT T2.status FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'",
        "SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'"
    ],
    "1038": [
        "SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) ASC LIMIT 5",
        "SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.id ORDER BY total_goals ASC LIMIT 5",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY SUM(CAST(M.home_team_goal AS REAL) + CAST(M.away_team_goal AS REAL)) ASC LIMIT 5",
        "SELECT T2.id, SUM(T1.home_team_goal + T1.away_team_goal) AS total_goals FROM Match AS T1 JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.id ORDER BY total_goals ASC LIMIT 5",
        "SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals  FROM Match AS M  INNER JOIN League AS L ON M.league_id = L.id  GROUP BY L.id  ORDER BY total_goals ASC  LIMIT 5"
    ],
    "1395": [
        "SELECT COUNT(DISTINCT T2.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND strftime('%Y', T2.event_date) = '2019'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND STRFTIME('%Y', T2.event_date) = '2019'",
        "SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND STRFTIME('%Y', event.event_date) = '2019'",
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND strftime('%Y', T2.event_date) = '2019'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND strftime('%Y', T2.event_date) = '2019'",
        "SELECT COUNT(DISTINCT T1.link_to_member)  FROM attendance AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T2.event_name = 'Community Theater' AND STRFTIME('%Y', T2.event_date) = '2019'"
    ],
    "583": [
        "SELECT SUM(T1.Score) AS total_score, T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'",
        "SELECT SUM(p.Score), u.WebsiteUrl FROM posts AS p INNER JOIN users AS u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny'",
        "SELECT SUM(posts.Score), users.WebsiteUrl FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Yevgeny'",
        "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'",
        "SELECT SUM(T1.Score) AS TotalScore, T2.WebsiteUrl FROM posts AS T1 JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'",
        "SELECT SUM(p.Score) AS total_score, u.WebsiteUrl FROM posts AS p INNER JOIN users AS u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny'"
    ],
    "737": [
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "SELECT T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.superhero_name = 'Copycat'",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'"
    ],
    "208": [
        "SELECT label, COUNT(*) as label_count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' GROUP BY label ORDER BY label_count DESC LIMIT 1",
        "SELECT label FROM molecule WHERE molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'h') GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1",
        "SELECT T3.label FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'h' GROUP BY T3.label ORDER BY COUNT(*) DESC LIMIT 1",
        "###SQL: SELECT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY COUNT(m.label) DESC LIMIT 1",
        "SELECT T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
        "SELECT label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1"
    ],
    "78": [
        "SELECT GSserved, COUNT(*) AS count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1",
        "SELECT GSserved, COUNT(*) AS count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1",
        "SELECT GSserved, COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1",
        "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1"
    ],
    "104": [
        "SELECT account.date FROM account WHERE account.account_id = (SELECT trans.account_id FROM trans WHERE trans.amount = 840 AND trans.date = '1998-10-14')",
        "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount = 840 AND trans.date = '1998-10-14'",
        "SELECT a.date FROM account AS a INNER JOIN trans AS t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14'",
        "SELECT account.date FROM account WHERE account.account_id IN (SELECT DISTINCT trans.account_id FROM trans WHERE trans.amount = 37475)",
        "SELECT T1.date FROM account T1 JOIN trans T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'"
    ],
    "678": [
        "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT posts.Id, posts.Title FROM posts WHERE posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') ORDER BY posts.ViewCount DESC LIMIT 1",
        "SELECT T3.Id, T3.Title FROM users AS T1 INNER JOIN posts AS T3 ON T1.Id = T3.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T3.ViewCount DESC LIMIT 1",
        "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Id, T1.Title FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1",
        "SELECT T1.Id, T1.Title  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T2.DisplayName = 'Harvey Motulsky'  AND T1.ViewCount = (SELECT MAX(T3.ViewCount) FROM posts AS T3 WHERE T3.OwnerUserId = T2.Id)"
    ],
    "291": [
        "SELECT COUNT(molecule.molecule_id) FROM molecule WHERE molecule.label = '+'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+'"
    ],
    "1152": [
        "SELECT (COUNT(CASE WHEN Admission = '-' THEN ID END) * 1.0 / NULLIF(COUNT(CASE WHEN Admission = '+' THEN ID END), 0)) AS ratio, COUNT(CASE WHEN Admission = '-' THEN ID END) AS outpatient, COUNT(CASE WHEN Admission = '+' THEN ID END) AS inpatient FROM Patient WHERE Diagnosis = 'SLE'",
        "SELECT (COUNT(CASE WHEN Admission = '-' THEN ID END) * 1.0 / NULLIF(COUNT(CASE WHEN Admission = '+' THEN ID END), 0)) AS ratio, COUNT(CASE WHEN Admission = '-' THEN ID END) AS outpatient, COUNT(CASE WHEN Admission = '+' THEN ID END) AS inpatient FROM Patient WHERE Diagnosis = 'SLE'",
        "SELECT CAST(COUNT(ID) FILTER (WHERE Admission = '+') AS REAL) / NULLIF(COUNT(ID) FILTER (WHERE Admission = '-'), 0) AS ratio, COUNT(ID) FILTER (WHERE Admission = '-') AS outpatient, COUNT(ID) FILTER (WHERE Admission = '+') AS inpatient FROM Patient WHERE Diagnosis = 'SLE'",
        "SELECT CAST(SUM(CASE WHEN T1.Admission = '+' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN T1.Admission = '-' THEN 1 ELSE 0 END) AS REAL) FROM Patient AS T1 WHERE T1.Diagnosis = 'SLE'",
        "SELECT (CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0)) AS ratio FROM Patient AS T1 WHERE Diagnosis = 'SLE'",
        "SELECT      (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 /      NULLIF((SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+'), 0) AS ratio"
    ],
    "223": [
        "SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR000_2_5'",
        "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'",
        "SELECT C.atom_id, C.atom_id2 FROM connected AS C WHERE C.bond_id = 'TR000_2_5'",
        "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected T1 WHERE T1.bond_id = 'TR000_2_5'",
        "SELECT connected.atom_id, connected.atom_id2  FROM bond  INNER JOIN connected ON bond.bond_id = connected.bond_id  WHERE bond.bond_id = 'TR000_2_5'"
    ],
    "971": [
        "SELECT drivers.driverRef FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1",
        "SELECT drivers.driverRef FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1",
        "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1",
        "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1",
        "SELECT driverRef FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'German')",
        "SELECT driverRef FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'German')"
    ],
    "156": [
        "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN loan ON disp.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1",
        "SELECT T1.client_id FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = (SELECT MAX(amount) FROM loan) AND T2.type = 'OWNER'",
        "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1",
        "SELECT T1.client_id, T2.type FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' ORDER BY T1.amount DESC LIMIT 1",
        "SELECT T2.client_id FROM loan AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = (SELECT MAX(amount) FROM loan) LIMIT 1",
        "SELECT T3.client_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id WHERE T1.amount = (SELECT MAX(amount) FROM loan) LIMIT 1"
    ],
    "1486": [
        "SELECT (SELECT COUNT(*) FROM customers WHERE Segment = 'SME' AND Currency = 'CZK') - (SELECT COUNT(*) FROM customers WHERE Segment = 'SME' AND Currency = 'EUR') AS More_SMEs_CZK_EUR",
        "SELECT (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK' AND Segment = 'SME') - (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR' AND Segment = 'SME') AS More_SMEs",
        "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS MoreSMEs FROM customers WHERE Segment = 'SME'",
        "SELECT (COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN Currency = 'EUR' THEN 1 END)) AS Difference FROM customers WHERE Segment = 'SME'",
        "SELECT COUNT(*) FILTER (WHERE C.Currency = 'CZK') - COUNT(*) FILTER (WHERE C.Currency = 'EUR') AS difference FROM customers AS C JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID WHERE C.Segment = 'SME'",
        "SELECT (SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Amount ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Amount ELSE 0 END)) AS AmountMore  FROM customers AS T1  INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Segment = 'SME'"
    ],
    "1183": [
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27' AND P.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE ID = P.ID)",
        "SELECT P.Diagnosis FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27'",
        "SELECT T2.Diagnosis FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.`Examination Date` = '1997-01-27' AND T1.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE ID = T1.ID)",
        "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.`Examination Date` = '1997-01-27'",
        "SELECT P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Diagnosis LIKE '%SLE%' AND E.`Examination Date` = '1997-01-27'",
        "SELECT P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27'"
    ],
    "980": [
        "SELECT D.driverRef, D.nationality, D.dob FROM qualifying Q INNER JOIN drivers D ON Q.driverId = D.driverId WHERE Q.raceId = 23 AND Q.q2 IS NOT NULL",
        "SELECT D.driverRef, D.nationality, D.dob FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 23 AND Q.q2 IS NOT NULL",
        "SELECT D.driverRef, D.nationality, D.dob FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 23 AND Q.q2 IS NOT NULL",
        "SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 IS NOT NULL AND T2.raceId = 23",
        "SELECT d.driverRef, d.nationality, d.dob FROM qualifying AS q JOIN drivers AS d ON q.driverId = d.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23",
        "SELECT T1.driverRef, T2.nationality, T2.dob  FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL"
    ],
    "298": [
        "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' AND T1.element = 'h' THEN T1.molecule_id END) AS REAL) * 100.0 / COUNT(T1.molecule_id), 3) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN 1 END) AS REAL) * 100 / COUNT(T2.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT ROUND(CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100 / (SELECT COUNT(DISTINCT T2.molecule_id) FROM molecule AS T2 WHERE T2.label = '+'), 3) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'",
        "SELECT CAST(SUM(CASE WHEN T2.label = '+' AND T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT (SUM(CASE WHEN T2.label = '+' AND T1.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(T2.molecule_id) AS percentage FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT (SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.molecule_id)) AS percentage  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'h'"
    ],
    "144": [
        "SELECT AVG(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE trans.date BETWEEN '2021-01-01' AND '2021-12-31' AND trans.operation = 'VYBER KARTOU'",
        "SELECT AVG(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE trans.operation = 'VYBER KARTOU' AND strftime('%Y', trans.date) = '2021'",
        "SELECT AVG(T1.amount) FROM trans AS T1 WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y', T1.date) = '2021'",
        "SELECT AVG(trans.amount) FROM trans WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'",
        "SELECT AVG(trans.amount) FROM trans WHERE trans.operation = 'VYBER KARTOU' AND strftime('%Y', trans.date) = '2021'",
        "SELECT STRFTIME('%Y-%m', date) AS month, AVG(amount) AS average_amount FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) = '2021' GROUP BY month"
    ],
    "204": [
        "SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
        "SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
        "SELECT COUNT(molecule.molecule_id) FROM molecule WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule.label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'"
    ],
    "200": [
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
        "SELECT T1.bond_id, T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "SELECT T2.molecule_id FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'"
    ],
    "351": [
        "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "SELECT DISTINCT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'",
        "SELECT T1.id, T2.name FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "SELECT DISTINCT name FROM foreign_data WHERE language = 'Japanese'"
    ],
    "1066": [
        "SELECT TA.buildUpPlayPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_short_name = 'CLB'",
        "SELECT TA.buildUpPlayPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_short_name = 'CLB'",
        "SELECT Team_Attributes.buildUpPlayPassingClass FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_short_name = 'CLB'",
        "SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'CLB'",
        "SELECT TA.buildUpPlayPassingClass FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_short_name = 'CLB'",
        "SELECT T2.buildUpPlayPassingClass  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T1.team_short_name = 'CLB'"
    ],
    "1155": [
        "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH > 500",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH > 500",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
        "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
        "SELECT P.ID, P.SEX, P.Birthday  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.LDH > 500"
    ],
    "1349": [
        "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker'",
        "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker'",
        "SELECT SUM(amount) AS total_budget_amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
        "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker'",
        "SELECT SUM(T2.amount) FROM budget AS T2 JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'September Speaker'",
        "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'"
    ],
    "1251": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.IGG >= 2000",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG >= 2000",
        "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG >= 2000",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 WHERE T1.IGG >= 2000",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 WHERE T1.IGG >= 2000"
    ],
    "46": [
        "SELECT schools.School, SUM(frpm.`Enrollment (K-12)`) AS TotalEnrollment FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.DOC = '31' GROUP BY schools.School ORDER BY TotalEnrollment DESC LIMIT 1",
        "SELECT schools.School, frpm.`Enrollment (K-12)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.DOC = '31' ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 1",
        "SELECT schools.School, SUM(frpm.`Enrollment (K-12)`) AS TotalEnrollment FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.DOC = '31' GROUP BY schools.School ORDER BY TotalEnrollment DESC LIMIT 1",
        "SELECT T1.School, COUNT(T2.\"Enrollment (K-12)\") FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOCType = 'State Special Schools' GROUP BY T1.School ORDER BY COUNT(T2.\"Enrollment (K-12)\") DESC",
        "SELECT T1.`School Name`, T1.`Enrollment (K-12)` FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = '31' ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "SELECT name FROM schools WHERE DOC = 31 AND GSserved LIKE '%1-12%' ORDER BY enroll12 DESC LIMIT 1"
    ],
    "1473": [
        "SELECT AVG(T1.Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'",
        "SELECT AVG(Consumption) / 12 AS average_monthly_consumption FROM yearmonth AS Y JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312'",
        "SELECT AVG(T2.Consumption) / 12 AS average_monthly_consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312'",
        "SELECT CAST(AVG(T1.Consumption) AS REAL) / 12.0 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'",
        "SELECT AVG(T2.Consumption) / 12 AS AverageMonthlyConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date BETWEEN '201301' AND '201312'",
        "SELECT AVG(T1.Consumption) / 12 AS average_monthly_consumption  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date BETWEEN '201301' AND '201312' AND T2.Segment = 'SME'"
    ],
    "1483": [
        "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 WHERE T1.CustomerID = 6 AND T1.Date BETWEEN '201308' AND '201311'",
        "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 14713 AND Date BETWEEN '201308' AND '201311'",
        "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 WHERE T1.CustomerID = 6 AND T1.Date BETWEEN '201308' AND '201311'",
        "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"
    ],
    "763": [
        "SELECT HA.attribute_value FROM hero_attribute AS HA JOIN superhero AS S ON S.id = HA.hero_id WHERE S.superhero_name = 'Abomination'",
        "SELECT HA.attribute_value FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE S.superhero_name = 'Abomination'",
        "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'",
        "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Abomination'",
        "SELECT T2.attribute_value FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "SELECT HA.attribute_value  FROM superhero AS S  INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id  WHERE S.superhero_name = 'Abomination'"
    ],
    "1246": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.APTT > 45 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.APTT > 45 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.APTT > 45 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.APTT > 45 AND T2.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID WHERE L.APTT > 45 AND E.Thrombosis = 0",
        "SELECT COUNT(DISTINCT P.ID)  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.APTT > 45 AND E.Thrombosis = 0"
    ],
    "510": [
        "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "SELECT artist FROM cards WHERE side IS NULL AND convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE side IS NULL)"
    ],
    "909": [
        "SELECT (COUNT(CASE WHEN circuits.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix'",
        "SELECT (COUNT(CASE WHEN circuits.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix'",
        "SELECT (COUNT(CASE WHEN circuits.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix'",
        "SELECT CAST(SUM(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(races.name) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix'",
        "SELECT (COUNT(CASE WHEN r.circuitId IN (SELECT c.circuitId FROM circuits c WHERE c.country = 'Germany') THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races r WHERE r.name = 'European Grand Prix'",
        "SELECT (COUNT(CASE WHEN country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM races  WHERE name = 'European Grand Prix'"
    ],
    "308": [
        "SELECT COUNT(DISTINCT T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
        "SELECT COUNT(DISTINCT T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
        "SELECT COUNT(DISTINCT C.bond_id) FROM connected AS C INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 'cl'",
        "SELECT COUNT(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl'",
        "SELECT COUNT(DISTINCT C.bond_id) FROM connected AS C JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 'cl' UNION SELECT COUNT(DISTINCT C.bond_id) FROM connected AS C JOIN atom AS A ON C.atom_id2 = A.atom_id WHERE A.element = 'cl'",
        "SELECT COUNT(*) FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl'))"
    ],
    "1042": [
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.id HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
        "SELECT L.name FROM League L INNER JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
        "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY M.league_id HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
        "SELECT L.name  FROM Match AS M  INNER JOIN League AS L ON M.league_id = L.id  WHERE M.season = '2009/2010'  GROUP BY M.league_id  HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)"
    ],
    "1287": [
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300",
        "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300",
        "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300",
        "SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300",
        "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300"
    ],
    "1072": [
        "SELECT AVG(PA.overall_rating) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran'",
        "SELECT AVG(PA.overall_rating) FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran'",
        "SELECT AVG(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'",
        "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'"
    ],
    "1324": [
        "SELECT AVG(attendance_count) AS average_attendance FROM (SELECT COUNT(T2.link_to_member) AS attendance_count FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND strftime('%Y', T1.event_date) = '2020' GROUP BY T1.event_id)",
        "SELECT AVG(attendance_count) FROM (SELECT COUNT(DISTINCT attendance.link_to_member) AS attendance_count FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' AND strftime('%Y', event.event_date) = '2020' GROUP BY event.event_id)",
        "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T1.event_name) AS average_attendance FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND T1.event_date LIKE '2020-%'",
        "SELECT CAST(COUNT(event_id) AS REAL) / CAST(COUNT(DISTINCT event_name) AS REAL) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020'",
        "SELECT CAST(COUNT(T1.event_id) AS REAL) / COUNT(DISTINCT T1.event_name) AS average_attendance FROM event AS T1 WHERE T1.type = 'Meeting' AND strftime('%Y', T1.event_date) = '2020'",
        "SELECT COUNT(event_id) * 1.0 / COUNT(DISTINCT event_name) AS average_attendance  FROM event  WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'"
    ],
    "1020": [
        "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "SELECT T1.player_api_id FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating IS NOT NULL ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)"
    ],
    "509": [
        "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
        "SELECT id, name FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)",
        "SELECT id, name FROM sets ORDER BY baseSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)",
        "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
        "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)"
    ],
    "1397": [
        "SELECT AVG(T1.spent) FROM budget T1 WHERE T1.category = 'Food' AND T1.link_to_event IN (SELECT T2.event_id FROM event T2 WHERE T2.event_status = 'Closed')",
        "SELECT AVG(T1.spent) FROM budget T1 WHERE T1.category = 'Food' AND T1.event_status = 'Closed'",
        "SELECT AVG(budget.spent) AS average_spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.status = 'Closed'",
        "###SQL: SELECT CAST(SUM(spent) AS REAL) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
        "SELECT AVG(b.spent) AS average_spent FROM budget AS b WHERE b.category = 'Food' AND b.event_status = 'Closed'",
        "SELECT AVG(T1.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T2.category = 'Food' AND T3.event_status = 'Closed'"
    ],
    "362": [
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Condemn'",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Condemn'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Condemn'",
        "SELECT R.text FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.name = 'Condemn'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'"
    ],
    "877": [
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId = 872 AND R.time IS NOT NULL ORDER BY D.dob DESC LIMIT 1",
        "SELECT D.driverId FROM results R JOIN drivers D ON R.driverId = D.driverId WHERE R.raceId = 872 AND R.time IS NOT NULL AND D.dob IS NOT NULL ORDER BY D.dob DESC LIMIT 1",
        "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.time IS NOT NULL AND T2.raceId = 872 ORDER BY T1.dob DESC LIMIT 1",
        "SELECT T1.driverId, T2.dob FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1",
        "SELECT T2.driverId, T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1"
    ],
    "1171": [
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE STRFTIME('%Y', Patient.Birthday) > STRFTIME('%Y', 'now') - 18 AND Examination.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE strftime('%Y', Birthday) > strftime('%Y', '1993-01-01') AND strftime('%Y', Birthday) < strftime('%Y', '1990-01-01')",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE STRFTIME('%Y', P.Birthday) > '1975' AND STRFTIME('%Y', E.`Examination Date`) BETWEEN '1990' AND '1993'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE CAST(strftime('%Y', T1.Birthday) AS INTEGER) > (CAST(strftime('%Y', T2.`Examination Date`) AS INTEGER) - 18) AND CAST(strftime('%Y', T2.`Examination Date`) AS INTEGER) BETWEEN 1990 AND 1993",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE strftime('%Y', E.`Examination Date`) BETWEEN '1990' AND '1993' AND strftime('%Y', P.Birthday) > '1975'",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE strftime('%Y', E.`Examination Date`) BETWEEN '1990' AND '1993' AND (strftime('%Y', P.Birthday) > (strftime('%Y', E.`Examination Date`) - 18))"
    ],
    "1320": [
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
        "SELECT T2.event_name FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id JOIN member T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "SELECT T3.event_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "SELECT DISTINCT T3.event_name  FROM attendance AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id  WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean'"
    ],
    "697": [
        "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "SELECT reputation, views FROM users WHERE DisplayName = 'Jarrod Dixon'"
    ],
    "1207": [
        "SELECT P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND STRFTIME('%Y', L.Date) = '1994'",
        "SELECT P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND strftime('%Y', L.Date) = '1994'",
        "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND STRFTIME('%Y', L.Date) = '1994'",
        "SELECT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND strftime('%Y', T2.Date) = '1994'",
        "SELECT T1.SEX, T1.Birthday FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND strftime('%Y', T2.Date) = '1994'",
        "SELECT P.SEX, P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT < 60 AND STRFTIME('%Y', L.Date) = '1994'"
    ],
    "184": [
        "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
        "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
        "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
        "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
        "SELECT COUNT(DISTINCT c.client_id) FROM client AS c JOIN disp AS d ON c.client_id = d.client_id JOIN account AS a ON d.account_id = a.account_id JOIN card AS ca ON a.account_id = ca.account_id WHERE c.gender = 'F' AND ca.type = 'junior'",
        "SELECT COUNT(DISTINCT T1.client_id) FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.account_id = T3.disp_id WHERE T2.gender = 'F' AND T3.type = 'junior'"
    ],
    "1431": [
        "SELECT T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer' AND T2.position = 'Member'",
        "SELECT member.last_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
        "SELECT T2.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Member' AND T3.event_name = 'Women''s Soccer'",
        "SELECT M.last_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women's Soccer' AND M.position = 'Member'",
        "SELECT T3.last_name FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women's Soccer' AND T3.position = 'Member'",
        "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women's Soccer' AND T3.position = 'Member'"
    ],
    "994": [
        "SELECT CS.points, C.name, C.nationality FROM constructorResults AS CS INNER JOIN races AS R ON CS.raceId = R.raceId INNER JOIN constructors AS C ON CS.constructorId = C.constructorId WHERE R.name = 'Monaco Grand Prix' AND R.year BETWEEN 1980 AND 2010 ORDER BY CS.points DESC LIMIT 1",
        "SELECT CS.points, C.name, C.nationality FROM constructorStandings AS CS JOIN races AS R ON CS.raceId = R.raceId JOIN constructors AS C ON CS.constructorId = C.constructorId WHERE R.name = 'Monaco Grand Prix' AND R.year BETWEEN 1980 AND 2010 ORDER BY CS.points DESC LIMIT 1",
        "SELECT SUM(CR.points) AS score, C.name, C.nationality FROM constructorResults AS CR INNER JOIN races AS R ON CR.raceId = R.raceId INNER JOIN constructors AS C ON CR.constructorId = C.constructorId WHERE R.name = 'Monaco Grand Prix' AND R.year BETWEEN 1980 AND 2010 GROUP BY C.constructorId ORDER BY score DESC LIMIT 1",
        "SELECT T2.name, T3.nationality, SUM(T1.points) FROM constructorResults AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = 'Monaco Grand Prix' AND T2.year BETWEEN 1980 AND 2010 GROUP BY T3.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "SELECT SUM(r.points) AS score, c.name, c.nationality FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN constructors c ON r.constructorId = c.constructorId WHERE ra.name = 'Monaco Grand Prix' AND ra.year BETWEEN 1980 AND 2010 GROUP BY r.constructorId ORDER BY score DESC LIMIT 1",
        "SELECT T2.name, T2.nationality, SUM(T1.points) AS total_points  FROM constructorResults AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId  INNER JOIN seasons AS T4 ON T2.year = T4.year  WHERE T2.name = 'Monaco Grand Prix' AND T4.year BETWEEN 1980 AND 2010  GROUP BY T3.constructorId  ORDER BY total_points DESC  LIMIT 1"
    ],
    "143": [
        "SELECT DISTINCT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'",
        "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'",
        "SELECT T1.account_id FROM account AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'gold'",
        "SELECT T1.account_id FROM account T1 INNER JOIN card T2 ON T1.account_id = T2.disp_id WHERE T2.type = 'gold'",
        "SELECT T1.account_id FROM account AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id WHERE T2.type = 'gold'"
    ],
    "147": [
        "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' AND T3.A3 = 'south Bohemia'",
        "SELECT COUNT(DISTINCT account.account_id) FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia'",
        "SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia'",
        "###SQL: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "SELECT COUNT(DISTINCT T1.account_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id JOIN district T4 ON T3.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A3 = 'south Bohemia'",
        "SELECT COUNT(DISTINCT A.account_id)  FROM client AS C  INNER JOIN account AS A ON C.client_id = A.client_id  INNER JOIN district AS D ON C.district_id = D.district_id  WHERE C.gender = 'F' AND D.A3 = 'south Bohemia'"
    ],
    "295": [
        "SELECT COUNT(T1.atom_id) FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'",
        "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'",
        "SELECT COUNT(T1.atom_id) FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'",
        "SELECT COUNT(T1.atom_id)  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.label = '+' AND T1.element = 'h'"
    ],
    "1366": [
        "SELECT DISTINCT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T3.event_name = 'October Meeting'",
        "SELECT DISTINCT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T3.event_name = 'October Meeting'",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'",
        "SELECT T1.link_to_member FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Meeting'",
        "SELECT DISTINCT T3.first_name, T3.last_name, T3.email FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'October Meeting'"
    ],
    "462": [
        "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode INNER JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
        "SELECT sets.name FROM sets INNER JOIN cards ON sets.code = cards.setCode INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
        "SELECT ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode INNER JOIN cards AS C ON C.setCode = S.code WHERE C.name = 'Ancestor''s Chosen' AND ST.language = 'Italian'",
        "SELECT T2.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'",
        "SELECT ST.translation FROM cards C JOIN sets S ON C.setCode = S.code JOIN set_translations ST ON S.code = ST.setCode WHERE C.name = 'Ancestor''s Chosen' AND ST.language = 'Italian'",
        "SELECT ST.translation  FROM cards AS C  INNER JOIN sets AS S ON C.setCode = S.code  INNER JOIN set_translations AS ST ON S.code = ST.setCode  WHERE C.name = 'Ancestor''s Chosen' AND ST.language = 'Italian'"
    ],
    "220": [
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3",
        "SELECT element FROM atom WHERE molecule_id = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3",
        "SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.molecule_id = 'TR000' ORDER BY T1.element LIMIT 3",
        "SELECT T1.element FROM atom T1 JOIN molecule T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000' ORDER BY T1.element ASC LIMIT 3",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3"
    ],
    "986": [
        "SELECT R.name AS race, L.lap AS \"1st lap\", MIN(L.milliseconds) AS time FROM lapTimes L JOIN races R ON L.raceId = R.raceId WHERE L.lap = 1 GROUP BY R.name ORDER BY time ASC LIMIT 1",
        "SELECT R.raceId, MIN(LT.milliseconds) AS fastestLapTime FROM lapTimes LT JOIN results R ON LT.raceId = R.raceId GROUP BY LT.raceId ORDER BY fastestLapTime LIMIT 1",
        "SELECT T2.name AS race, MIN(T1.milliseconds) AS '1st lap time' FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 GROUP BY T2.name ORDER BY MIN(T1.milliseconds) ASC LIMIT 1",
        "SELECT T1.raceId, T2.milliseconds FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.lap = 1 ORDER BY T2.milliseconds ASC LIMIT 1",
        "SELECT T1.raceId, MIN(T1.milliseconds) AS fastest_lap_time FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId GROUP BY T1.raceId ORDER BY fastest_lap_time LIMIT 1",
        "SELECT raceId, MIN(milliseconds) AS fastest_lap_time FROM lapTimes WHERE lap = 1 GROUP BY raceId ORDER BY fastest_lap_time ASC LIMIT 1"
    ],
    "1370": [
        "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT T2.expense_description FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "SELECT T1.expense_description  FROM expense AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T2.position = 'Vice President'"
    ],
    "579": [
        "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?'",
        "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?')",
        "SELECT c.Text FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
        "SELECT T2.Text FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How does gentle boosting differ from AdaBoost?'",
        "SELECT T2.Text FROM comments AS T2 INNER JOIN posts AS T1 ON T1.Id = T2.PostId WHERE T1.Title = 'How does gentle boosting differ from AdaBoost?'"
    ],
    "1312": [
        "SELECT T4.major_name FROM member AS T1 INNER JOIN major AS T4 ON T1.link_to_major = T4.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "SELECT M.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.first_name = 'Angela' AND M.last_name = 'Sanders'",
        "SELECT T3.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "SELECT M.link_to_major FROM member AS M WHERE M.first_name = 'Angela' AND M.last_name = 'Sanders'",
        "SELECT T3.major_name  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'"
    ],
    "591": [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011'"
    ],
    "719": [
        "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.power_name = 'Super Strength' AND T3.height_cm > 200",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200"
    ],
    "1423": [
        "SELECT COUNT(*) FROM income WHERE amount = 50",
        "SELECT COUNT(*) FROM income WHERE amount = 50",
        "SELECT COUNT(*) FROM income WHERE amount = 50",
        "SELECT COUNT(income_id) FROM income WHERE amount = 50",
        "SELECT COUNT(*) FROM income WHERE amount = 50",
        "SELECT COUNT(*) FROM income WHERE amount = 50"
    ],
    "735": [
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'"
    ],
    "134": [
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A16 = (SELECT MAX(A16) FROM district)",
        "SELECT COUNT(account.account_id) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)",
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A16 = (SELECT MAX(A16) FROM district)",
        "SELECT COUNT(account.account_id) FROM account WHERE account.district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)",
        "SELECT COUNT(T1.account_id) FROM account AS T1 WHERE T1.district_id = (SELECT T2.district_id FROM district AS T2 ORDER BY T2.A16 DESC LIMIT 1)",
        "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)"
    ],
    "411": [
        "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'",
        "SELECT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'",
        "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
        "SELECT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
        "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
        "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'"
    ],
    "1499": [
        "SELECT MAX(monthly_consumption) AS biggest_monthly_consumption FROM (SELECT SUM(Consumption) / 12 AS monthly_consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY strftime('%Y-%m', T1.Date)) AS monthly_data",
        "SELECT MAX(CAST(SUM(Consumption) AS REAL) / 12) AS biggest_monthly_consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
        "SELECT MAX(SUM(Consumption) / 12) AS biggest_monthly_consumption, CustomerID FROM yearmonth AS Y JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY C.CustomerID",
        "SELECT CAST(MAX(SUM(T2.Consumption)) AS REAL) / 12 FROM yearmonth AS T2 INNER JOIN customers AS T1 ON T2.CustomerID = T1.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID",
        "SELECT MAX(SUM(T2.Consumption) / 12) AS MonthlyConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID",
        "SELECT MAX(SUM(T2.Consumption) / 12)  FROM yearmonth AS T2  INNER JOIN customers AS T1 ON T2.CustomerID = T1.CustomerID  WHERE T1.Currency = 'EUR'  GROUP BY T1.CustomerID"
    ],
    "849": [
        "SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT r.url FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT R.url FROM circuits AS C JOIN races AS R ON C.circuitId = R.circuitId WHERE C.name = 'Circuit de Barcelona-Catalunya'",
        "SELECT T2.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'"
    ],
    "1142": [
        "SELECT COUNT(*) FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE L.name = 'Italy Serie A' AND M.season = '2015/2016'",
        "SELECT COUNT(*) FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND L.name = 'Italy Serie A'",
        "SELECT COUNT(*) AS games_played FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italy Serie A')",
        "SELECT COUNT(M.id) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' AND L.name = 'Italy Serie A'",
        "SELECT COUNT(M.id) FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Italy Serie A' AND M.season = '2015/2016'",
        "SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Italian Serie A' AND T1.season = '2015/2016'"
    ],
    "303": [
        "SELECT COUNT(*) AS double_bond_count, T1.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' AND T1.bond_type = '='",
        "SELECT COUNT(*) AS double_bond_count, M.label FROM bond AS B JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.molecule_id = 'TR006' AND B.bond_type = '='",
        "SELECT COUNT(bond_id) AS double_bond_count, IIF(label = '+', 'YES', 'NO') AS is_carcinogenic FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.molecule_id = 'TR006' AND B.bond_type = '='",
        "SELECT COUNT(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR117' AND molecule.label = '+'",
        "SELECT (SELECT COUNT(*) FROM bond T1 WHERE T1.molecule_id = 'TR006' AND T1.bond_type = '=') AS double_bond_count, (SELECT T2.label FROM molecule T2 WHERE T2.molecule_id = 'TR006') AS carcinogenic_label",
        "SELECT COUNT(TB.bond_id)  FROM bond AS TB  INNER JOIN molecule AS TM ON TB.molecule_id = TM.molecule_id  WHERE TM.molecule_id = 'TR006' AND TM.label = '+' AND TB.bond_type = '='"
    ],
    "210": [
        "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "SELECT T1.atom_id FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'",
        "SELECT T2.atom_id, T3.atom_id2 FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "SELECT DISTINCT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'"
    ],
    "1445": [
        "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'",
        "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'",
        "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'",
        "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
        "SELECT member.first_name, member.last_name FROM member WHERE member.t_shirt_size = 'X-Large'",
        "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'"
    ],
    "944": [
        "SELECT ((CAST(SUBSTR(champion.time, INSTR(champion.time, ':') - 2, 8) AS INTEGER) - cumul_time) * 100.0 / cumul_time) AS percentage_faster FROM (SELECT SUM(CAST(SUBSTR(last_driver.time, INSTR(last_driver.time, ':') - 2, 8) AS INTEGER)) AS cumul_time, results.time FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL) AS last_driver , (SELECT results.time FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL ORDER BY results.time LIMIT 1) AS champion",
        "SELECT ((CAST((SUBSTR(last_driver_time, instr(last_driver_time, ':') + 1) - (CASE WHEN instr(champion_time, ':') = 0 THEN CAST(champion_time AS REAL) ELSE CAST(SUBSTR(champion_time, 1, instr(champion_time, ':') - 1), 'INTEGER') * 60 + CAST(SUBSTR(champion_time, instr(champion_time, ':') + 1), 'INTEGER') AS REAL) END)) AS REAL) / CAST(SUBSTR(last_driver_time, instr(last_driver_time, ':') + 1) AS REAL)) * 100) AS percent_faster FROM (SELECT time AS champion_time, (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL ORDER BY milliseconds DESC LIMIT 1) AS last_driver_time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = 1)",
        "SELECT ((CAST((last_driver_time.milliseconds + champion_time.milliseconds) AS REAL) - CAST(champion_time.milliseconds AS REAL)) / CAST((last_driver_time.milliseconds + champion_time.milliseconds) AS REAL)) * 100 AS percentage_faster FROM (SELECT T1.milliseconds AS last_driver_time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL ORDER BY T1.position DESC LIMIT 1) AS last_driver_time, (SELECT T1.milliseconds AS champion_time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL ORDER BY T1.position LIMIT 1) AS champion_time",
        "SELECT CAST((SELECT (CAST(MAX(results.time AS REAL) + CAST(MIN(results.time AS REAL) AS REAL)) - CAST(MIN(results.time AS REAL)) AS REAL) / (CAST(MAX(results.time AS REAL) + CAST(MIN(results.time AS REAL) AS REAL)) AS REAL)) * 100 FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND results.time IS NOT NULL) AS REAL)",
        "SELECT ((strftime('%s', r1.time) + r1.time) - strftime('%s', r2.time)) * 100.0 / (strftime('%s', r1.time) + r2.time) AS percent_faster FROM results r1 JOIN (SELECT * FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY position ASC LIMIT 1) r2 ON r1.position = 1 WHERE r1.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND r1.time IS NOT NULL AND r2.time IS NOT NULL",
        "SELECT (CAST((lastDriverTime + CAST(SUBSTR(championTime, 1, 2) AS INTEGER) * 3600000 +                CAST(SUBSTR(championTime, 4, 2) AS INTEGER) * 60000 +                CAST(SUBSTR(championTime, 7, 3) AS INTEGER) AS INTEGER) - (CAST(lastDriverTime AS INTEGER) +                CAST(SUBSTR(championTime, 1, 2) AS INTEGER) * 3600000 +                CAST(SUBSTR(championTime, 4, 2) AS INTEGER) * 60000 +                CAST(SUBSTR(championTime, 7, 3) AS INTEGER)) AS INTEGER) * 100.0 /                (CAST(lastDriverTime AS INTEGER) +                 CAST(SUBSTR(championTime, 1, 2) AS INTEGER) * 3600000 +                CAST(SUBSTR(championTime, 4, 2) AS INTEGER) * 60000 +                CAST(SUBSTR(championTime, 7, 3) AS INTEGER)) AS percentageDiff FROM (      SELECT R1.time AS championTime,             (SELECT R2.time              FROM results R2              JOIN races R3 ON R2.raceId = R3.raceId              WHERE R3.name = 'Australian Grand Prix'              AND R3.year = 2008              ORDER BY R2.position DESC              LIMIT 1) AS lastDriverTime      FROM results R1      JOIN races R4 ON R1.raceId = R4.raceId      WHERE R4.name = 'Australian Grand Prix'      AND R4.year = 2008      AND R1.position = 1 ) AS T1"
    ],
    "590": [
        "SELECT Id FROM users ORDER BY Views ASC LIMIT 1",
        "SELECT Id FROM users ORDER BY Views ASC LIMIT 1",
        "SELECT Id FROM users ORDER BY Views LIMIT 1",
        "SELECT Id FROM users ORDER BY Views ASC LIMIT 1",
        "SELECT Id FROM users ORDER BY Views ASC LIMIT 1",
        "SELECT id FROM users WHERE Views = (SELECT MIN(Views) FROM users)"
    ],
    "433": [
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
        "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' AND cards.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.isOnlineOnly) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND S.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.id) AS percentage FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.isOnlineOnly = 1",
        "SELECT CAST(COUNT(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN T1.isOnlineOnly = 1 THEN 1 END) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "SELECT (COUNT(CASE WHEN T1.isOnlineOnly = 1 AND T2.language = 'Chinese Simplified' THEN 1 END) * 100.0 / COUNT(T1.isOnlineOnly)) AS percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "SELECT (COUNT(CASE WHEN T1.isOnlineOnly = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM cards AS T1  INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid  WHERE T2.language = 'Chinese Simplified'"
    ],
    "330": [
        "SELECT (SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT T3.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element = 'h' AND T3.bond_type = '#'",
        "SELECT (SUM(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT molecule.molecule_id) AS percentage FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
        "SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT T2.molecule_id) AS percentage FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' AND T1.bond_type = '#'",
        "SELECT CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.molecule_id) AS REAL) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T2.molecule_id = T4.molecule_id WHERE T1.element = 'h' AND T2.bond_type = '#'",
        "SELECT (SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT M.molecule_id)) AS percentage FROM atom AS A JOIN bond AS B ON A.molecule_id = B.molecule_id JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.element = 'h' AND B.bond_type = '#'",
        "SELECT (SUM(CASE WHEN T3.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT T1.molecule_id)) AS percentage FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'h' AND T2.bond_type = '#'"
    ],
    "431": [
        "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.isForeignOnly = 0 AND sets.isFoilOnly = 1 AND set_translations.language = 'Japanese'",
        "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.isForeignOnly = 1 AND sets.isFoilOnly = 1 AND set_translations.language = 'Japanese'",
        "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.isForeignOnly = 0 AND sets.isFoilOnly = 1 AND set_translations.language = 'Japanese'",
        "SELECT S.id FROM sets AS S INNER JOIN foreign_data AS F ON S.code = F.setCode WHERE S.isForeignOnly = 1 AND S.isFoilOnly = 1 AND F.language = 'Japanese'",
        "SELECT T1.id FROM sets T1 INNER JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 0 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'",
        "SELECT S.id FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.isForeignOnly = 1 AND S.isFoilOnly = 1 AND ST.language = 'Japanese'"
    ],
    "45": [
        "SELECT schools.School, AVG(satscores.AvgScrWrite) AS AverageWritingScore FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School",
        "SELECT schools.School, AVG(satscores.AvgScrWrite) AS AverageWritingScore FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School",
        "SELECT schools.School, AVG(satscores.AvgScrWrite) AS AverageWritingScore FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School",
        "SELECT schools.School, AVG(satscores.AvgScrWrite) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School",
        "SELECT T1.sname, AVG(T2.AvgScrWrite) AS AvgWritingScore FROM satscores AS T2 JOIN schools AS T1 ON T2.cds = T1.CDSCode WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.sname",
        "SELECT T1.School, AVG(T2.AvgScrWrite) AS AverageWritingScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.School"
    ],
    "830": [
        "SELECT attribute.attribute_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1",
        "SELECT A.attribute_name FROM hero_attribute AS HA JOIN attribute AS A ON HA.attribute_id = A.id JOIN superhero AS S ON HA.hero_id = S.id WHERE S.superhero_name = 'Black Panther' ORDER BY HA.attribute_value ASC LIMIT 1",
        "SELECT attribute.attribute_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
        "SELECT T1.attribute_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Black Panther' ORDER BY T1.attribute_value LIMIT 1",
        "SELECT T2.attribute_name FROM superhero AS T1 JOIN hero_attribute AS T3 ON T1.id = T3.hero_id JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T3.attribute_value ASC LIMIT 1",
        "SELECT T2.attribute_name  FROM hero_attribute AS T1  INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id  INNER JOIN superhero AS T3 ON T1.hero_id = T3.id  WHERE T3.superhero_name = 'Black Panther'  GROUP BY T2.attribute_name  ORDER BY MIN(T1.attribute_value)  LIMIT 1"
    ],
    "257": [
        "SELECT T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T2.element = 's'",
        "SELECT T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 's'",
        "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
        "SELECT T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 's'",
        "SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
        "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'"
    ],
    "1409": [
        "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
        "SELECT SUM(T1.cost) FROM expense AS T1 WHERE T1.expense_date = '2019-08-20'",
        "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'",
        "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
        "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'",
        "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'"
    ],
    "972": [
        "SELECT D.driverId, D.code FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE strftime('%Y', D.dob) = '1971' AND R.fastestLapTime IS NOT NULL",
        "SELECT D.driverId, D.code FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE strftime('%Y', D.dob) = '1971' AND R.fastestLapTime IS NOT NULL",
        "SELECT D.driverId, D.code FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE year(D.dob) = 1971 AND R.fastestLapTime IS NOT NULL",
        "SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE strftime('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL",
        "SELECT D.driverId, D.code FROM drivers AS D JOIN results AS R ON D.driverId = R.driverId WHERE strftime('%Y', D.dob) = '1971' AND R.fastestLapTime IS NOT NULL ORDER BY R.fastestLapTime LIMIT 1",
        "SELECT T1.driverId, T1.code  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL"
    ],
    "361": [
        "SELECT COUNT(*) FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'Restricted' AND C.isTextless = 0",
        "SELECT COUNT(*) FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'Restricted' AND C.isTextless = 0",
        "SELECT COUNT(*) FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status = 'Restricted') AND isTextless = 0",
        "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isTextless = 0",
        "SELECT COUNT(*) FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
        "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isTextless = 0"
    ],
    "479": [
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)",
        "SELECT COUNT(*) FROM cards AS T1 WHERE convertedManaCost > 5 AND setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND (T1.power = '*' OR T1.power IS NULL)",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)",
        "SELECT COUNT(T1.id) FROM cards AS T1 JOIN sets AS S1 ON T1.setCode = S1.code WHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL) AND S1.name = 'Coldsnap'",
        "SELECT COUNT(*) FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)"
    ],
    "866": [
        "SELECT drivers.url FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = 161 AND lapTimes.time LIKE '1:27%'",
        "SELECT drivers.url FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.raceId = 161 AND lapTimes.time LIKE '1:27.%'",
        "SELECT D.url FROM lapTimes L INNER JOIN drivers D ON L.driverId = D.driverId WHERE L.raceId = 161 AND L.time LIKE '0:01:27%'",
        "SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time LIKE '1:27%' AND T2.raceId = 161",
        "SELECT D.url FROM lapTimes LT JOIN drivers D ON LT.driverId = D.driverId WHERE LT.time LIKE '0:01:27%' AND LT.raceId = 161",
        "SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.time LIKE '0:01:27' AND T1.raceId = 161"
    ],
    "320": [
        "SELECT B.bond_type FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE (C.atom_id = 'TR000_1' AND C.atom_id2 = 'TR000_2') OR (C.atom_id = 'TR000_2' AND C.atom_id2 = 'TR000_1')",
        "SELECT T1.bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE (T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2') OR (T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_1')",
        "SELECT B.bond_type FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id WHERE C.atom_id = 'TR000_1' AND C.atom_id2 = 'TR000_2'",
        "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
        "SELECT T2.bond_type FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2') OR (T1.atom_id = 'TR000_2' AND T1.atom_id2 = 'TR000_1')",
        "SELECT T2.bond_type  FROM connected AS T1  INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id  WHERE (T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2') OR (T1.atom_id = 'TR000_2' AND T1.atom_id2 = 'TR000_1')"
    ],
    "936": [
        "SELECT MIN(results.fastestLapTime) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2008",
        "SELECT MIN(R.fastestLapTime) FROM results AS R JOIN races AS RA ON R.raceId = RA.raceId JOIN drivers AS D ON R.driverId = D.driverId WHERE RA.name = 'Australian Grand Prix' AND RA.year = 2008 AND D.forename = 'Lewis' AND D.surname = 'Hamilton'",
        "SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008",
        "SELECT T1.time, T1.lap FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2008 ORDER BY T1.time ASC LIMIT 1",
        "SELECT T1.fastestLapTime FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.year = 2008 AND T2.name = 'Australian Grand Prix' ORDER BY T1.fastestLapTime LIMIT 1",
        "SELECT results.fastestLapTime  FROM results  INNER JOIN drivers ON results.driverId = drivers.driverId  INNER JOIN races ON results.raceId = races.raceId  WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2008"
    ],
    "364": [
        "SELECT status FROM cards WHERE name = 'Cloudchaser Eagle'",
        "SELECT L.status FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Cloudchaser Eagle'",
        "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
        "SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
        "SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Cloudchaser Eagle'",
        "SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'"
    ],
    "1329": [
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
        "SELECT zip_code.county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
        "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "SELECT T2.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'"
    ],
    "197": [
        "SELECT AVG(o.oxygen_count) FROM (SELECT COUNT(a.atom_id) AS oxygen_count FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE a.element = 'o' AND b.bond_type = '-' GROUP BY a.molecule_id) AS o",
        "SELECT AVG(o.oxygen_count) FROM (SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count FROM atom AS a INNER JOIN bond AS b ON a.molecule_id = b.molecule_id INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE a.element = 'o' AND b.bond_type = '-' GROUP BY m.molecule_id) AS o",
        "SELECT AVG(o_count) FROM (SELECT COUNT(*) AS o_count FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE B.bond_type = '-' AND A.element = 'o' GROUP BY B.molecule_id)",
        "SELECT CAST(SUM(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) AS REAL) / CAST(COUNT(DISTINCT T2.bond_id) AS REAL) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "SELECT AVG(o_count) FROM (SELECT COUNT(*) AS o_count FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id)",
        "SELECT AVG(oxygen_count) FROM (SELECT COUNT(*) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id)"
    ],
    "1364": [
        "SELECT z.city, z.county, z.state FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'",
        "SELECT z.city, z.county, z.state FROM member AS m JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'",
        "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
        "SELECT z.city, z.county, z.state FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'",
        "SELECT T2.city, T2.county, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
        "SELECT T2.city, T2.county, T2.state  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'"
    ],
    "209": [
        "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl'",
        "SELECT DISTINCT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl'",
        "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl'",
        "###SQL: SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
        "SELECT T2.bond_type FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl'",
        "SELECT DISTINCT T2.bond_type  FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'cl'"
    ],
    "494": [
        "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'",
        "SELECT rulings.text, CASE WHEN cards.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS hasMissingOrDegradedProperties FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'",
        "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'",
        "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec' AND T1.hasContentWarning = 1",
        "SELECT R.text, C.hasContentWarning FROM cards AS C JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Jim Pavelec'",
        "SELECT R.text, CASE WHEN C.hasContentWarning = 1 THEN 'Has Missing or Degraded Properties' ELSE 'Does Not Have Missing or Degraded Properties' END AS PropertyStatus FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Jim Pavelec'"
    ],
    "16": [
        "SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T2.NumTstTakr < 100",
        "SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100",
        "SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr < 100 AND schools.County = 'Alameda'",
        "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Alameda' AND T1.NumTstTakr < 100",
        "SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Alameda' AND T1.NumTstTakr < 100",
        "SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T2.NumTstTakr < 100"
    ],
    "1181": [
        "SELECT SUBSTR('1991-10-21', 1, 4) - STRFTIME('%Y', Birthday) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UA = 8.4 AND Laboratory.Date = '1991-10-21'",
        "SELECT (strftime('%Y', '1991-10-21') - strftime('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UA = 8.4 AND L.Date = '1991-10-21'",
        "SELECT (STRFTIME('%Y', '1991-10-21') - STRFTIME('%Y', P.Birthday)) AS age FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.UA = 8.4 AND L.Date = '1991-10-21'",
        "SELECT STRFTIME('%Y', T2.Birthday) - STRFTIME('%Y', T1.Date) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.UA = 13 AND T1.Date = '1995-07-11'",
        "SELECT strftime('%Y', '1991-10-21') - strftime('%Y', T1.Birthday) AS age FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
        "SELECT STRFTIME('%Y', '1991-10-21') - STRFTIME('%Y', P.Birthday) AS age  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.UA = 8.4 AND L.Date = '1991-10-21'"
    ],
    "746": [
        "SELECT AVG(HA.attribute_value) FROM hero_attribute AS HA",
        "SELECT AVG(HA.attribute_value) AS average_attribute_value FROM hero_attribute AS HA",
        "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute",
        "SELECT AVG(attribute_value) FROM hero_attribute",
        "SELECT AVG(attribute_value) FROM hero_attribute",
        "SELECT AVG(attribute_value) FROM hero_attribute"
    ],
    "800": [
        "SELECT (COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 END) * 100.0) / COUNT(T1.superhero_name) AS percentage_of_blue_eyed_superheroes FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
        "SELECT (SUM(CASE WHEN C.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id",
        "SELECT (CAST(COUNT(CASE WHEN C.colour = 'Blue' THEN 1 END) AS REAL) * 100 / COUNT(*)) AS percentage_of_blue_eyed_superheroes FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id",
        "SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / CAST(COUNT(T1.superhero_name) AS REAL) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
        "SELECT (SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.id) AS percentage FROM superhero AS T1",
        "SELECT (COUNT(CASE WHEN C.colour = 'Blue' THEN 1 END) * 100.0) / COUNT(*) AS percentage  FROM superhero AS S  INNER JOIN colour AS C ON S.eye_colour_id = C.id"
    ],
    "829": [
        "SELECT (SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name IN ('DC Comics', 'Marvel Comics')",
        "SELECT (SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name IN ('DC Comics', 'Marvel Comics')",
        "SELECT 'DC Comics' AS publisher, COUNT(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 END) AS number_of_superheroes, (COUNT(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 END) - COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END)) AS difference FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name",
        "SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') - (SELECT COUNT(*) FROM superhero AS T3 INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics') AS difference",
        "SELECT (SUM(publisher.publisher_name = 'DC Comics') - SUM(publisher.publisher_name = 'Marvel Comics')) AS difference FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
        "SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') AS difference"
    ],
    "1478": [
        "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "SELECT T1.Segment, SUM(T2.Consumption) AS total_consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY total_consumption ASC LIMIT 1",
        "SELECT customers.Segment FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY customers.Segment ORDER BY SUM(yearmonth.Consumption) ASC LIMIT 1",
        "SELECT C.Segment FROM yearmonth AS Y JOIN customers AS C ON Y.CustomerID = C.CustomerID GROUP BY C.Segment ORDER BY SUM(Y.Consumption) ASC LIMIT 1",
        "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1"
    ],
    "1484": [
        "SELECT (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS DiscountDifference",
        "SELECT (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS Discount_GasStations_Difference",
        "SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS Difference",
        "SELECT (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS DiscountDifference",
        "SELECT (SELECT COUNT(*) FROM gasstations AS T1 WHERE T1.Country = 'CZE' AND T1.Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations AS T2 WHERE T2.Country = 'SVK' AND T2.Segment = 'Discount') AS difference",
        "SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS More_Discount_Stations"
    ],
    "166": [
        "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'",
        "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'",
        "SELECT COUNT(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik'",
        "SELECT COUNT(account_id) FROM account WHERE district_id = 8",
        "SELECT COUNT(*) FROM account AS A JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Jesenik'",
        "SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')"
    ],
    "249": [
        "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR144_8_19'",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR144_8_19'",
        "SELECT A.element, A.atom_id FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR144_8_19'",
        "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR144_8_19'",
        "SELECT T1.element FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR144_8_19'",
        "SELECT DISTINCT T1.element  FROM connected AS T2  INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id  WHERE T2.bond_id = 'TR144_8_19' UNION  SELECT DISTINCT T1.element  FROM connected AS T2  INNER JOIN atom AS T1 ON T2.atom_id2 = T1.atom_id  WHERE T2.bond_id = 'TR144_8_19'"
    ],
    "1360": [
        "SELECT (SUM(b.amount) * 1.0 / (SELECT SUM(amount) FROM budget AS b_total INNER JOIN event AS e_total ON b_total.link_to_event = e_total.event_id WHERE e_total.event_name = 'November Speaker') * 100) AS percentage FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Parking' AND e.event_name = 'November Speaker'",
        "SELECT (SUM(CASE WHEN T1.category = 'Parking' AND T2.event_name = 'November Speaker' THEN T1.amount ELSE 0 END) * 100.0 / NULLIF(SUM(T1.amount), 0)) AS percentage FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "SELECT (SUM(b.amount) * 1.0 / (SELECT SUM(b2.amount) FROM budget AS b2 INNER JOIN event AS e2 ON b2.link_to_event = e2.event_id WHERE e2.event_name = 'November Speaker') * 100) AS percentage FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Parking' AND e.event_name = 'November Speaker'",
        "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T2.amount ELSE 0 END) AS REAL) * 100 / CAST(SUM(T2.amount) AS REAL) FROM budget AS T2 INNER JOIN event AS T1 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'November Speaker'",
        "SELECT (SUM(T1.amount) * 100.0 / (SELECT SUM(T2.amount) FROM budget T2 JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'November Speaker')) AS percentage FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' AND T2.event_name = 'November Speaker'",
        "SELECT (SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) * 100.0) / SUM(T1.amount) AS percentage_budget  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T2.event_name = 'November Speaker'"
    ],
    "893": [
        "SELECT D.forename, D.surname, DS.points FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN driverStandings AS DS ON DS.driverId = D.driverId WHERE RA.name = 'Chinese Grand Prix' AND RA.year = 2017 ORDER BY DS.points DESC LIMIT 3",
        "SELECT D.forename, D.surname, R.points FROM results R INNER JOIN drivers D ON R.driverId = D.driverId INNER JOIN races RC ON R.raceId = RC.raceId WHERE RC.name = 'Chinese Grand Prix' AND RC.year = 2017 ORDER BY R.points DESC LIMIT 3",
        "SELECT D.forename, D.surname, DS.points FROM driverStandings AS DS INNER JOIN drivers AS D ON DS.driverId = D.driverId INNER JOIN races AS R ON DS.raceId = R.raceId WHERE R.name = 'Chinese Grand Prix' AND R.year = 2017 ORDER BY DS.points DESC LIMIT 3",
        "SELECT D.forename, D.surname, R.points FROM Results AS R INNER JOIN Races AS RS ON R.raceId = RS.raceId INNER JOIN Drivers AS D ON R.driverId = D.driverId WHERE RS.year = 2017 AND RS.name = 'Chinese Grand Prix' ORDER BY R.points DESC LIMIT 3",
        "SELECT T2.driverId, T2.points FROM driverStandings AS T2 JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.year = 2017 AND T1.name = 'Chinese Grand Prix' ORDER BY T2.points DESC LIMIT 3",
        "SELECT D.forename, D.surname, R.points FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RACE ON R.raceId = RACE.raceId WHERE RACE.year = 2017 AND RACE.name = 'Chinese Grand Prix' ORDER BY R.points DESC LIMIT 3"
    ],
    "311": [
        "SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE molecule_id NOT IN (SELECT DISTINCT bond.molecule_id FROM bond WHERE bond.bond_type = '=') AND molecule_id NOT IN (SELECT DISTINCT atom.molecule_id FROM atom WHERE atom.element = 's')",
        "SELECT COUNT(DISTINCT a.molecule_id) FROM atom a LEFT JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element != 's' AND (b.bond_type IS NULL OR b.bond_type != '=')",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 's' AND T2.bond_type != '='",
        "SELECT COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id INNER JOIN bond AS B ON M.molecule_id = B.molecule_id WHERE A.element <> 's' AND B.bond_type <> '='",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 LEFT JOIN atom T2 ON T1.molecule_id = T2.molecule_id LEFT JOIN bond T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element != 's' AND T3.bond_type != ' = '",
        "SELECT COUNT(DISTINCT T3.molecule_id) FROM atom AS T1  INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element != 's' AND T2.bond_type != ' = '"
    ],
    "961": [
        "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1",
        "SELECT races.name, races.year FROM results JOIN races ON results.raceId = races.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1",
        "SELECT R.name, R.year FROM results AS Res INNER JOIN races AS R ON Res.raceId = R.raceId WHERE Res.milliseconds IS NOT NULL ORDER BY Res.milliseconds ASC LIMIT 1",
        "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1",
        "SELECT T2.name, T2.year FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1",
        "SELECT T2.name, T2.year  FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T1.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL)"
    ],
    "551": [
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT COUNT(badges.Id) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT COUNT(T1.Id) FROM badges T1 INNER JOIN users T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')"
    ],
    "835": [
        "SELECT (CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN 1 END) AS REAL) * 100 / COUNT(T1.id)) AS percentage_good_superheroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT (SUM(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS good_percentage FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT (CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN 1 END) AS REAL) * 100 / COUNT(T1.id)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT CAST(SUM(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100.0 / CAST(COUNT(T3.publisher_name) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T3.publisher_name = 'Marvel Comics'",
        "SELECT (SUM(CASE WHEN A.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_good_superheroes FROM superhero AS S JOIN alignment AS A ON S.alignment_id = A.id JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics'",
        "SELECT (COUNT(CASE WHEN T1.alignment = 'Good' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_good_superheroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"
    ],
    "1173": [
        "SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1",
        "SELECT Examination.Diagnosis, COUNT(Examination.Diagnosis) AS DiagnosisCount FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Examination.Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1",
        "SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1",
        "SELECT Examination.Diagnosis FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Examination.Diagnosis ORDER BY COUNT(Examination.Diagnosis) DESC LIMIT 1",
        "SELECT T1.Diagnosis FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1"
    ],
    "584": [
        "SELECT c.Text FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SELECT c.Text FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SELECT c.Text FROM comments AS c JOIN posts AS p ON c.PostId = p.Id JOIN postHistory AS ph ON p.Id = ph.PostId WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SELECT C.Text, C.UserDisplayName FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SELECT T3.Text FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.PostId JOIN comments AS T3 ON T2.UserId = T3.UserId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'"
    ],
    "102": [
        "SELECT account.account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000)",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000",
        "SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date < '1997-01-01' AND l.amount > 3000",
        "SELECT DISTINCT T1.account_id FROM account T1 JOIN trans T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000",
        "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.balance > 3000"
    ],
    "581": [
        "SELECT T1.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "SELECT users.DisplayName FROM posts INNER JOIN postHistory ON posts.Id = postHistory.PostId INNER JOIN users ON postHistory.UserId = users.Id WHERE posts.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "SELECT OwnerDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?'",
        "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data'",
        "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'"
    ],
    "425": [
        "SELECT number FROM cards WHERE side IS NULL AND subtypes IN ('Angel', 'Wizard')",
        "SELECT number FROM cards WHERE side IS NULL AND subtypes IN ('Angel', 'Wizard')",
        "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'",
        "SELECT cards.number FROM cards WHERE cards.side IS NULL AND cards.subtypes LIKE '%Angel%' AND cards.subtypes LIKE '%Wizard%'",
        "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'",
        "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'"
    ],
    "1314": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.department = 'Art and Design'"
    ],
    "8": [
        "SELECT satscores.NumTstTakr FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 1",
        "SELECT satscores.NumTstTakr FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 1",
        "SELECT MAX(satscores.NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM schools)",
        "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)",
        "SELECT T2.NumTstTakr FROM frpm AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)",
        "SELECT SUM(s.NumTstTakr) FROM satscores AS s INNER JOIN frpm AS f ON s.cds = f.School_Code WHERE f.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)"
    ],
    "284": [
        "SELECT DISTINCT T3.bond_type, T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'c'",
        "SELECT DISTINCT B.bond_type, M.molecule_id FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE A.element = 'c'",
        "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'c'",
        "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c'",
        "SELECT T2.bond_type FROM atom T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
        "SELECT DISTINCT T2.bond_type  FROM atom AS T1  INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id  INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id  WHERE T1.element = 'c'"
    ],
    "1149": [
        "SELECT CAST(COUNT(CASE WHEN Admission = '+' THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN Admission = '-' THEN 1 END) AS deviation_percentage FROM Patient WHERE SEX = 'M'",
        "SELECT (COUNT(CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(CASE WHEN Admission = '-' THEN ID END)) AS percentage_deviation FROM Patient WHERE SEX = 'M'",
        "SELECT (100.0 * COUNT(ID) WHERE SEX = 'M' AND Admission = '+') / NULLIF(COUNT(ID) WHERE SEX = 'M' AND Admission = '-', 0) AS percentage_deviation FROM Patient",
        "SELECT (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS Percentage",
        "SELECT COUNT(CASE WHEN Admission = '+' THEN ID END) AS inpatient_count, COUNT(CASE WHEN Admission = '-' THEN ID END) AS outpatient_count, (100.0 * COUNT(CASE WHEN Admission = '+' THEN ID END) / NULLIF(COUNT(CASE WHEN Admission = '-' THEN ID END), 0)) AS percentage_deviation FROM Patient WHERE SEX = 'M'",
        "SELECT      (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') AS Male_Inpatients,     (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS Male_Outpatients,     (CASE          WHEN (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') = 0 THEN NULL          ELSE (CAST((SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') AS FLOAT) /                    (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') * 100)          END) AS Percentage_Deviation"
    ],
    "563": [
        "SELECT p.FavoriteCount FROM posts AS p INNER JOIN comments AS c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0'",
        "SELECT posts.FavoriteCount FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0'",
        "SELECT posts.FavoriteCount FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.UserId = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0'",
        "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39.0'",
        "SELECT P.FavoriteCount FROM comments C JOIN posts P ON C.PostId = P.Id WHERE C.UserId = 3025 AND C.CreationDate = '2014-04-23 20:29:39.0'",
        "SELECT T1.FavoriteCount  FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id  WHERE T1.UserId = 3025 AND T1.CreationDate = '2014-04-23 20:29:39.0'"
    ],
    "1109": [
        "SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'",
        "SELECT TAC.buildUpPlayDribblingClass FROM Team AS T JOIN Team_Attributes AS TAC ON T.team_api_id = TAC.team_api_id WHERE T.team_short_name = 'LEI' AND TAC.date = '2015-09-10 00:00:00'",
        "SELECT ta.buildUpPlayDribblingClass FROM Team_Attributes AS ta INNER JOIN Team AS t ON ta.team_api_id = t.team_api_id WHERE t.team_short_name = 'LEI' AND ta.date = '2015-09-10 00:00:00'",
        "SELECT T1.buildUpPlayDribblingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'LEI' AND T1.date = '2015-09-10 00:00:00'",
        "SELECT T2.buildUpPlayDribblingClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'",
        "SELECT T2.buildUpPlayDribblingClass  FROM Team_Attributes AS T1  INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T2.team_short_name = 'LEI' AND T1.date = '2015-09-10 00:00:00'"
    ],
    "1053": [
        "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'",
        "SELECT T.team_short_name FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'",
        "SELECT Team.team_short_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Risky'",
        "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky'",
        "SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'",
        "SELECT T1.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Risky'"
    ],
    "243": [
        "SELECT DISTINCT B.bond_id FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A1 ON C.atom_id = A1.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id WHERE (A1.element = 'p' AND A2.element = 'n') OR (A1.element = 'n' AND A2.element = 'p')",
        "SELECT DISTINCT B.bond_id FROM bond B JOIN connected C ON B.bond_id = C.bond_id JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE (A1.element = 'p' AND A2.element = 'n') OR (A1.element = 'n' AND A2.element = 'p')",
        "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'p' AND T2.atom_id2 IN (SELECT T4.atom_id FROM atom AS T4 WHERE T4.element = 'n')",
        "###SQL: SELECT B.bond_id, B.molecule_id, B.bond_type FROM bond AS B WHERE EXISTS (SELECT 1 FROM atom AS A1 WHERE A1.element = 'p' AND A1.molecule_id = B.molecule_id) AND EXISTS (SELECT 1 FROM atom AS A2 WHERE A2.element = 'n' AND A2.molecule_id = B.molecule_id)",
        "SELECT DISTINCT T2.bond_id FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id OR T1.atom_id = T3.atom_id2 JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'p' AND T1.atom_id IN (SELECT atom_id FROM atom WHERE element = 'n')",
        "SELECT DISTINCT T3.bond_id, T3.bond_type  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id  INNER JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id  WHERE T1.element = 'p' AND T4.element = 'n'"
    ],
    "1332": [
        "SELECT SUM(expense.spent) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting'",
        "SELECT SUM(expense.cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting'",
        "SELECT SUM(T1.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T2.category = 'Food' AND T3.event_name = 'September Meeting'",
        "SELECT SUM(T1.spent) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T2.category = 'Food' AND T3.event_name = 'September Meeting'",
        "SELECT T1.spent FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'",
        "SELECT SUM(T3.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN expense AS T3 ON T1.budget_id = T3.link_to_budget WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'"
    ],
    "449": [
        "SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'",
        "SELECT FD.language, C.types FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.watermark = 'azorius'",
        "SELECT foreign_data.language, cards.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'",
        "SELECT T1.language, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'azorius'",
        "SELECT T2.language, T2.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'",
        "SELECT T1.language, T2.type  FROM foreign_data AS T1  INNER JOIN cards AS T2 ON T1.uuid = T2.uuid  WHERE T2.watermark = 'azorius'"
    ],
    "539": [
        "SELECT T1.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts'",
        "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts'",
        "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts'",
        "SELECT u.DisplayName FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts'"
    ],
    "546": [
        "SELECT DISTINCT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL",
        "SELECT DISTINCT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL",
        "SELECT DISTINCT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL",
        "###SQL: SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL",
        "SELECT u.DisplayName FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.ClosedDate IS NOT NULL",
        "SELECT DISTINCT U.DisplayName  FROM posts AS P  INNER JOIN users AS U ON P.OwnerUserId = U.Id  WHERE P.ClosedDate IS NOT NULL"
    ],
    "630": [
        "SELECT T2.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'John Salvatier'",
        "SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN postHistory AS T3 ON T2.Id = T3.PostId INNER JOIN users AS T4 ON T3.UserDisplayName = T4.DisplayName WHERE T4.DisplayName = 'John Salvatier'",
        "SELECT T3.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'John Salvatier'",
        "SELECT T4.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN postLinks AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T3.RelatedPostId = T4.Id WHERE T1.DisplayName = 'John Salvatier'",
        "SELECT T3.TagName FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T1.DisplayName = 'John Salvatier'",
        "SELECT DISTINCT T3.TagName  FROM users AS T1  INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId  INNER JOIN postLinks AS T4 ON T2.Id = T4.PostId  INNER JOIN tags AS T3 ON T4.RelatedPostId = T3.ExcerptPostId  WHERE T1.DisplayName = 'John Salvatier'"
    ],
    "1170": [
        "SELECT COUNT(*) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E.`Examination Date` IS NULL OR (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.`First Date`)) >= 1",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE (STRFTIME('%Y', Examination.`Examination Date`) - STRFTIME('%Y', Patient.`First Date`)) >= 1",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E.`Examination Date` IS NULL OR (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.`First Date`)) >= 1",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ID IS NULL OR CAST(strftime('%Y', T2.`Examination Date`) AS INTEGER) - CAST(strftime('%Y', T1.`First Date`) AS INTEGER) >= 1",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 LEFT JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` IS NOT NULL AND (strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`First Date`)) >= 1",
        "SELECT COUNT(DISTINCT P.ID)  FROM Patient AS P  LEFT JOIN Examination AS E ON P.ID = E.ID  WHERE E.ID IS NULL OR (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.`First Date`) >= 1)"
    ],
    "910": [
        "SELECT T1.lat, T1.lng FROM circuits AS T1 WHERE T1.name = 'Silverstone Circuit'",
        "SELECT C.lat, C.lng FROM circuits AS C WHERE C.name = 'Silverstone Circuit'",
        "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 WHERE T1.name = 'Silverstone Circuit'",
        "SELECT T1.lat, T1.lng FROM circuits AS T1 WHERE T1.name = 'Silverstone Circuit'",
        "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"
    ],
    "401": [
        "SELECT CAST(COUNT(CASE WHEN isOnlineOnly = 1 THEN id END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards WHERE frameEffects = 'legendary'",
        "SELECT CAST(COUNT(CASE WHEN isOnlineOnly = 1 THEN id END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary'",
        "SELECT (COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary'",
        "SELECT CAST(COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary'",
        "SELECT 100.0 * COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END) / COUNT(id) AS percentage FROM cards WHERE frameEffects LIKE '%legendary%'",
        "SELECT (COUNT(CASE WHEN isOnlineOnly = 1 THEN 1 END) * 100.0 / COUNT(id)) AS percentage  FROM cards  WHERE frameEffects = 'legendary'"
    ],
    "266": [
        "SELECT COUNT(molecule.molecule_id) AS total_carcinogenic_molecules, molecule.molecule_id FROM molecule WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030' AND molecule.label = '+'",
        "SELECT COUNT(molecule_id) AS 'total carcinogenic molecules', molecule_id FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'",
        "SELECT COUNT(molecule_id) AS total_carcinogenic_molecules, molecule_id FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'",
        "SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'",
        "SELECT COUNT(*) FROM molecule T1 WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR030' AND T1.label = '+'",
        "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'"
    ],
    "278": [
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-'",
        "SELECT COUNT(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-'",
        "SELECT COUNT(T1.molecule_id) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'",
        "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'"
    ],
    "1318": [
        "SELECT T1.link_to_event FROM attendance T1 GROUP BY T1.link_to_event ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1",
        "SELECT T1.event_name FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
        "SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1",
        "SELECT T1.link_to_event FROM attendance AS T1 GROUP BY T1.link_to_event ORDER BY COUNT(T1.link_to_event) DESC LIMIT 1",
        "SELECT T1.link_to_event FROM attendance T1 GROUP BY T1.link_to_event ORDER BY COUNT(T1.link_to_event) DESC LIMIT 1",
        "SELECT T2.event_name FROM event AS T2 INNER JOIN (SELECT link_to_event, COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS T1 ON T1.link_to_event = T2.event_id WHERE T1.attendance_count = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event))"
    ],
    "669": [
        "SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl')",
        "SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl')",
        "SELECT MIN(CreationDate) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl'",
        "SELECT MIN(v.CreationDate) FROM votes AS v INNER JOIN users AS u ON v.UserId = u.Id WHERE u.DisplayName = 'chl'",
        "SELECT MIN(v.CreationDate) FROM votes AS v JOIN users AS u ON v.UserId = u.Id WHERE u.DisplayName = 'chl'",
        "SELECT MIN(votes.CreationDate) FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'chl'"
    ],
    "940": [
        "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.time IS NOT NULL AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND EXISTS (SELECT 1 FROM results AS T4 WHERE T4.driverId = T1.driverId)",
        "SELECT COUNT(DISTINCT results.driverId) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008) AND results.time IS NOT NULL AND (SELECT COUNT(raceId) FROM results WHERE driverId = results.driverId) > 0",
        "SELECT COUNT(DISTINCT D.driverId) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008) AND R.time IS NOT NULL",
        "SELECT COUNT(DISTINCT results.driverId) FROM results WHERE results.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Chinese Grand Prix') AND results.time IS NOT NULL",
        "SELECT COUNT(DISTINCT R.driverId) FROM results R JOIN races RA ON R.raceId = RA.raceId WHERE RA.year = 2008 AND RA.name = 'Chinese Grand Prix' AND R.time IS NOT NULL AND R.driverId IN (SELECT driverId FROM results)",
        "SELECT COUNT(DISTINCT T1.driverId)  FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL"
    ],
    "1519": [
        "SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "SELECT transactions_1k.ProductID FROM transactions_1k WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00'",
        "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'",
        "SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '18:34:00'",
        "SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'"
    ],
    "1230": [
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250",
        "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250",
        "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250",
        "SELECT DISTINCT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250",
        "SELECT DISTINCT P.ID  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Admission = '-' AND L.CPK < 250"
    ],
    "1355": [
        "SELECT z.state FROM member AS m INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'",
        "SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
        "SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
        "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "SELECT Z.state FROM member AS M JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison'",
        "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"
    ],
    "1394": [
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')",
        "SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')",
        "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 WHERE T1.link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')",
        "SELECT COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'",
        "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'"
    ],
    "1276": [
        "SELECT DISTINCT E.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA >= 8",
        "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA >= 8",
        "SELECT DISTINCT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA >= 8",
        "SELECT DISTINCT T2.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8",
        "SELECT P.Diagnosis FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.DNA >= 8",
        "SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.DNA >= 8"
    ],
    "1283": [
        "SELECT COUNT(P.ID) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M'",
        "SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 AND P.SEX = 'M'",
        "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
        "SELECT COUNT(*) FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT < 60 AND T2.SEX = 'M'",
        "SELECT COUNT(*) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT < 60 AND T2.SEX = 'M'"
    ],
    "576": [
        "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!'",
        "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!'",
        "SELECT c.UserDisplayName FROM comments c WHERE c.Text = 'thank you user93!'",
        "SELECT DISTINCT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'",
        "SELECT T2.DisplayName FROM comments AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'",
        "SELECT U.DisplayName FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'thank you user93!'"
    ],
    "1522": [
        "SELECT c.Currency FROM yearmonth AS y INNER JOIN customers AS c ON y.CustomerID = c.CustomerID WHERE y.Date = '201306' AND y.Consumption = 214582.17",
        "SELECT customers.Currency FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Consumption = 214582.17 AND yearmonth.Date LIKE '201306%'",
        "SELECT DISTINCT c.Currency FROM transactions_1k AS t INNER JOIN yearmonth AS y ON t.CustomerID = y.CustomerID INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Price = 214582.17 AND y.Date = '201306'",
        "SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption = 214582.17 AND T2.Date LIKE '201306%'",
        "SELECT C.Currency FROM customers C JOIN transactions_1k T ON C.CustomerID = T.CustomerID JOIN yearmonth Y ON T.CustomerID = Y.CustomerID WHERE Y.Date = '201306' GROUP BY Y.CustomerID HAVING SUM(T.Amount) = 214582.17",
        "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '201306%' AND T1.Consumption = 214582.17"
    ],
    "1467": [
        "SELECT e.event_name, SUM(b.spent) AS total_amount_spent FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name",
        "SELECT SUM(b.spent) AS total_amount_spent, e.event_name FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name",
        "SELECT event.event_name, SUM(budget.spent) AS total_amount_spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name",
        "SELECT SUM(budget.spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'",
        "SELECT SUM(b.spent) AS total_spent, e.event_name FROM budget AS b JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name",
        "SELECT SUM(b.spent) AS total_spent, e.event_name  FROM budget AS b  INNER JOIN event AS e ON b.link_to_event = e.event_id  WHERE b.category = 'Speaker Gifts'  GROUP BY e.event_name"
    ],
    "983": [
        "SELECT C.name, C.url FROM constructors C JOIN constructorStandings CS ON C.constructorId = CS.constructorId WHERE C.nationality = 'Italian' ORDER BY CS.points DESC LIMIT 1",
        "SELECT C.url FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE C.nationality = 'Italian' ORDER BY CS.points DESC LIMIT 1",
        "SELECT C.name, C.url FROM constructors AS C WHERE C.nationality = 'Italian' ORDER BY (SELECT MAX(points) FROM constructorStandings AS CS WHERE CS.constructorId = C.constructorId) DESC LIMIT 1",
        "SELECT T1.name, T2.points, T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "SELECT C.url FROM constructorStandings AS CS JOIN constructors AS C ON CS.constructorId = C.constructorId WHERE C.nationality = 'Italian' ORDER BY CS.points DESC LIMIT 1",
        "SELECT T1.name, T1.url  FROM constructors AS T1  INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId  WHERE T1.nationality = 'Italian'  GROUP BY T1.constructorId  ORDER BY SUM(T2.points) DESC  LIMIT 1"
    ],
    "1266": [
        "SELECT Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RNP NOT IN ('-', '+-') AND Patient.Birthday IS NOT NULL ORDER BY Patient.Birthday DESC LIMIT 1",
        "SELECT P.Birthday FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1",
        "SELECT MAX(P.Birthday) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-')",
        "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1",
        "SELECT T1.Birthday FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1",
        "SELECT MAX(P.Birthday) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RNP NOT IN ('-', '+-')"
    ],
    "122": [
        "SELECT district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990'",
        "SELECT district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990",
        "SELECT district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990",
        "SELECT T1.A2, T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "SELECT d.A2, d.A3 FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990",
        "SELECT T3.A2, T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = 4990"
    ],
    "1435": [
        "SELECT event.event_name FROM event WHERE event.status = 'Closed' AND event.type = 'Game' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20'",
        "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
        "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
        "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
        "SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20'",
        "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'"
    ],
    "467": [
        "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT T3.baseSetSize FROM sets AS T3 INNER JOIN set_translations AS T2 ON T3.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'",
        "SELECT baseSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.baseSetSize FROM sets AS S JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'",
        "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'"
    ],
    "943": [
        "SELECT (COUNT(CASE WHEN time IS NOT NULL THEN 1 END) * 1.0 / COUNT(*)) AS completion_rate FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)",
        "SELECT (COUNT(CASE WHEN time IS NOT NULL THEN 1 END) * 1.0 / COUNT(*)) AS completion_rate FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')",
        "SELECT (COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 END) * 1.0) / COUNT(T1.raceId) AS completion_rate FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix'",
        "SELECT CAST(SUM(CASE WHEN R.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(R.raceId) FROM results R INNER JOIN races RA ON R.raceId = RA.raceId WHERE RA.year = 2008 AND RA.name = 'Australian Grand Prix'",
        "SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 END) AS REAL) / COUNT(T1.raceId) AS completion_rate FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "SELECT (CAST(COUNT(CASE WHEN time IS NOT NULL THEN raceId END) AS REAL) / COUNT(raceId)) AS completion_rate FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)"
    ],
    "1057": [
        "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match M JOIN Country C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'",
        "SELECT AVG(M.home_team_goal) AS average_home_team_goal FROM Match M JOIN League L ON M.league_id = L.id WHERE L.country_id = (SELECT id FROM Country WHERE name = 'Poland') AND M.season = '2010/2011'",
        "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011'",
        "SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'",
        "SELECT AVG(T1.home_team_goal) FROM Match T1 JOIN Country T2 ON T1.country_id = T2.id WHERE T2.name = 'Poland' AND T1.season = '2010/2011'",
        "SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.country_id = (SELECT id FROM Country WHERE name = 'Poland') AND M.season = '2010/2011'"
    ],
    "1016": [
        "SELECT PS.duration FROM pitStops AS PS INNER JOIN results AS R ON PS.raceId = R.raceId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'Austrian Grand Prix' AND R.fastestLapTime IS NOT NULL",
        "SELECT p.duration FROM pitStops AS p INNER JOIN results AS r ON p.raceId = r.raceId WHERE r.fastestLapTime IS NOT NULL AND r.driverId = (SELECT r2.driverId FROM results AS r2 INNER JOIN races AS ra ON r2.raceId = ra.raceId WHERE ra.name = 'Austrian Grand Prix' ORDER BY r2.fastestLapTime ASC LIMIT 1)",
        "SELECT PS.duration FROM pitStops AS PS INNER JOIN lapTimes AS LT ON PS.raceId = LT.raceId INNER JOIN races AS R ON PS.raceId = R.raceId WHERE R.name = 'Austrian Grand Prix' AND LT.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = R.raceId)",
        "SELECT T1.duration FROM pitStops AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T2.position = 1 AND T2.raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix')",
        "SELECT T3.duration FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId JOIN pitStops T3 ON T1.driverId = T3.driverId AND T1.raceId = T3.raceId WHERE T2.name = 'Austrian Grand Prix' AND T1.fastestLap = (SELECT MAX(T1.fastestLapTime) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix')",
        "SELECT T2.duration FROM pitStops AS T2 INNER JOIN races AS T1 ON T2.raceId = T1.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId INNER JOIN results AS T4 ON T1.raceId = T4.raceId WHERE T3.name = 'Austrian Grand Prix' AND T4.time = (SELECT MIN(T5.time) FROM results AS T5 INNER JOIN races AS T6 ON T5.raceId = T6.raceId INNER JOIN circuits AS T7 ON T6.circuitId = T7.circuitId WHERE T7.name = 'Austrian Grand Prix')"
    ],
    "1319": [
        "SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"
    ],
    "506": [
        "SELECT CAST(SUM(CASE WHEN S.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE T.language = 'Japanese'",
        "SELECT (SUM(sets.isNonFoilOnly = 1) * 100.0 / COUNT(sets.id)) AS percentage FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese'",
        "SELECT CAST(SUM(CASE WHEN S.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T.language) AS percentage FROM sets AS S INNER JOIN set_translations AS T ON S.code = T.setCode WHERE T.language = 'Japanese'",
        "SELECT CAST(SUM(CASE WHEN cards.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN foreign_data.language = 'Japanese' THEN 1 ELSE 0 END) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid",
        "SELECT (SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_non_foil FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "SELECT (SUM(CASE WHEN sets.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_non_foil  FROM foreign_data  INNER JOIN sets ON foreign_data.setCode = sets.code  WHERE foreign_data.language = 'Japanese'"
    ],
    "358": [
        "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT borderColor, name FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'"
    ],
    "1346": [
        "SELECT T1.phone FROM member AS T1 WHERE T1.first_name = 'Carlo' AND T1.last_name = 'Jacobs'",
        "SELECT T1.phone FROM member AS T1 WHERE T1.first_name = 'Carlo' AND T1.last_name = 'Jacobs'",
        "SELECT member.phone FROM member WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs'",
        "SELECT T1.phone FROM member AS T1 WHERE T1.first_name = 'Carlo' AND T1.last_name = 'Jacobs'",
        "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
        "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"
    ],
    "1292": [
        "SELECT T3.`aCL IgA`, T3.`aCL IgG`, T3.`aCL IgM` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T2.ID = T3.ID WHERE T2.SEX = 'F' AND T1.UA > 6.5 ORDER BY T1.UA DESC LIMIT 1",
        "SELECT MAX(E.`aCL IgG`), MAX(E.`aCL IgM`), MAX(E.`aCL IgA`) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'F' AND L.UA <= 6.5",
        "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.SEX = 'F' AND E.UA = (SELECT MAX(UA) FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE SEX = 'F') AND UA > 6.5)",
        "SELECT T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.SEX = 'F' AND T3.UA > 6.5 ORDER BY T3.UA DESC LIMIT 1",
        "SELECT T1.ID, T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA` FROM Patient T1 JOIN Laboratory T3 ON T1.ID = T3.ID JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T3.UA > 6.5 ORDER BY T3.UA DESC LIMIT 1",
        "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA`  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  INNER JOIN Examination AS T3 ON T1.ID = T3.ID  WHERE T1.SEX = 'F' AND T2.UA > 6.50 AND T2.UA = (SELECT MAX(UA) FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE SEX = 'F'))"
    ],
    "625": [
        "SELECT COUNT(Id) FROM users WHERE Location LIKE 'New York%'",
        "SELECT COUNT(*) FROM users WHERE Location = 'New York'",
        "SELECT COUNT(DISTINCT Id) FROM users WHERE Location LIKE 'New York%'",
        "SELECT COUNT(DISTINCT Id) FROM users WHERE Location = 'New York'",
        "SELECT COUNT(*) AS UserCount FROM users WHERE Location = 'New York'",
        "SELECT COUNT(*) FROM users WHERE Location = 'New York'"
    ],
    "545": [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL",
        "SELECT COUNT(posts.Id) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL",
        "SELECT COUNT(*) FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
        "SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL"
    ],
    "383": [
        "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white'",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND uuid IN (SELECT uuid FROM legalities WHERE status = 'Banned')",
        "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white'",
        "SELECT COUNT(*) FROM cards T1 JOIN legalities T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'white' AND T2.status = 'Banned'",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'"
    ],
    "1176": [
        "SELECT Examination.ANA FROM Examination WHERE Examination.ID = 3605340 AND Examination.`Examination Date` = '1996-12-02'",
        "SELECT E.ANA FROM Examination AS E WHERE E.ID = 3605340 AND E.`Examination Date` = '1996-12-02'",
        "SELECT E.ANA FROM Examination AS E WHERE E.ID = 3605340 AND E.`Examination Date` = '1996-12-02'",
        "SELECT T1.ANA FROM Examination AS T1 WHERE T1.ID = 3605340 AND T1.`Examination Date` = '1996-12-02'",
        "SELECT T1.`ANA` FROM Examination T1 WHERE T1.ID = 3605340 AND T1.`Examination Date` = '1996-12-02'",
        "SELECT T1.`ANA` FROM `Examination` AS T1 INNER JOIN `Patient` AS T2 ON T1.ID = T2.ID WHERE T2.ID = 3605340 AND T1.`Examination Date` = '1996-12-02'"
    ],
    "1128": [
        "SELECT c.name, AVG(p.weight) AS average_weight FROM Player AS p INNER JOIN Match AS m ON p.player_api_id IN (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11) INNER JOIN Country AS c ON m.country_id = c.id GROUP BY c.name ORDER BY average_weight DESC LIMIT 1",
        "SELECT Country.name, AVG(Player.weight) AS average_weight FROM Player INNER JOIN Team ON Player.player_fifa_api_id = Team.team_fifa_api_id INNER JOIN League ON Team.team_fifa_api_id = League.country_id INNER JOIN Country ON League.country_id = Country.id GROUP BY Country.id ORDER BY average_weight DESC LIMIT 1",
        "SELECT c.name, AVG(p.weight) AS average_weight FROM Player AS p INNER JOIN Team AS t ON p.player_api_id = t.team_api_id INNER JOIN League AS l ON t.team_api_id = l.country_id INNER JOIN Country AS c ON l.country_id = c.id GROUP BY c.name ORDER BY average_weight DESC LIMIT 1",
        "SELECT Country.name FROM Country INNER JOIN League ON Country.id = League.country_id INNER JOIN Team ON League.id = Team.team_fifa_api_id INNER JOIN Player ON Team.team_api_id = Player.team_api_id INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id GROUP BY Country.name HAVING AVG(Player_Attributes.weight) = (SELECT MAX(avg_weight) FROM (SELECT AVG(weight) AS avg_weight FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id INNER JOIN Team ON Player.team_api_id = Team.team_api_id INNER JOIN League ON Team.team_fifa_api_id = League.id INNER JOIN Country ON League.country_id = Country.id GROUP BY Country.name))",
        "SELECT C.id FROM Player P JOIN Match M ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11, M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) JOIN Country C ON M.country_id = C.id GROUP BY C.id ORDER BY AVG(P.weight) DESC LIMIT 1",
        "SELECT T2.name  FROM Country AS T2  INNER JOIN League AS T3 ON T2.id = T3.country_id  INNER JOIN Team AS T4 ON T3.id = T4.team_api_id  INNER JOIN Player AS T1 ON T4.team_api_id = T1.player_api_id  GROUP BY T2.name  ORDER BY AVG(T1.weight) DESC  LIMIT 1"
    ],
    "1087": [
        "SELECT COUNT(PA.player_api_id) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70",
        "SELECT COUNT(P.player_id) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70",
        "SELECT COUNT(*) FROM Player AS p INNER JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 AND pa.volleys > 70",
        "SELECT COUNT(DISTINCT T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 AND T2.volleys > 70",
        "SELECT COUNT(*) FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70",
        "SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volley > 70"
    ],
    "1167": [
        "SELECT COUNT(Laboratory.ID) * 1.0 / 12 AS average_male_patients FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31'",
        "SELECT COUNT(Laboratory.ID) * 1.0 / 12 AS average_male_patients FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M'",
        "SELECT COUNT(Laboratory.ID) / 12.0 AS average_male_patients FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31'",
        "SELECT CAST(COUNT(Laboratory.ID) AS REAL) / 12 FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M'",
        "SELECT COUNT(L.ID) / 12.0 AS average_tests_per_month FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31'",
        "SELECT COUNT(Laboratory.ID) / 12.0 AS average_male_patients FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M'"
    ],
    "1492": [
        "SELECT (COUNT(*) * 100.0 / SUM(CASE WHEN Segment = 'KAM' THEN 1 ELSE 0 END)) AS PercentageInEUR FROM customers WHERE Segment = 'KAM' AND Currency = 'EUR'",
        "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(CustomerID)) AS PercentageOfKAMInEUR FROM customers WHERE Segment = 'KAM'",
        "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfKAMUsingEuro FROM customers WHERE Segment = 'KAM'",
        "SELECT CAST(COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'",
        "SELECT (CAST((SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'KAM' AND Currency = 'EUR') AS REAL) / CAST((SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'KAM') AS REAL)) * 100 AS PercentageOfKAMUsingEuro",
        "SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Segment = 'KAM')) AS percentage FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Currency = 'EUR'"
    ],
    "530": [
        "SELECT DISTINCT cards.frameVersion, cards.name, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
        "SELECT DISTINCT cards.frameVersion, cards.name, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
        "SELECT DISTINCT frameVersion, C.name, L.status FROM cards AS C LEFT JOIN legalities AS L ON C.uuid = L.uuid WHERE C.artist = 'Allen Williams' AND (L.status = 'Banned' OR L.status IS NULL)",
        "SELECT cards.frameVersion, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
        "SELECT DISTINCT T1.frameVersion, T2.id FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' OR T2.status = 'Banned'",
        "SELECT DISTINCT T1.frameVersion, T2.name  FROM cards AS T1  LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE T1.artist = 'Allen Williams' AND T2.status = 'Banned'"
    ],
    "464": [
        "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
        "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
        "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
        "SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.uuid = T2.uuid WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "SELECT T1.name FROM cards T1 INNER JOIN sets T2 ON T1.setCode = T2.code INNER JOIN set_translations T3 ON T2.code = T3.setCode WHERE T3.translation = 'Hauptset Zehnte Edition'",
        "SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'"
    ],
    "1410": [
        "SELECT member.first_name || ' ' || member.last_name AS full_name, SUM(expense.cost) AS total_cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, SUM(expense.cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T3.cost) AS total_cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name",
        "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member AS m JOIN expense AS e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_cost  FROM member AS T1  LEFT JOIN expense AS T2 ON T1.member_id = T2.link_to_member  WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'  GROUP BY T1.first_name, T1.last_name"
    ],
    "394": [
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(DISTINCT id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"
    ],
    "985": [
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId INNER JOIN results AS R ON D.driverId = R.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.name = 'French Grand Prix' AND L.lap = 3 ORDER BY L.time DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId INNER JOIN races AS R ON L.raceId = R.raceId WHERE R.name = 'French Grand Prix' AND L.lap = 3 ORDER BY L.time DESC LIMIT 1",
        "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId INNER JOIN races AS R ON L.raceId = R.raceId WHERE R.name = 'French Grand Prix' AND L.lap = 3 ORDER BY L.time DESC LIMIT 1",
        "SELECT T1.driverId, T2.time FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time DESC LIMIT 1",
        "SELECT T1.driverId FROM lapTimes T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
        "SELECT T3.forename, T3.surname, MAX(T1.time) AS slowest_time  FROM lapTimes AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.name = 'French Grand Prix' AND T1.lap = 3  GROUP BY T3.driverId  ORDER BY slowest_time DESC  LIMIT 1"
    ],
    "57": [
        "SELECT T2.Phone, T2.Ext FROM (SELECT T1.cds, T1.AvgScrWrite, ROW_NUMBER() OVER (ORDER BY T1.AvgScrWrite DESC) AS Rank FROM satscores AS T1) AS RankedScores INNER JOIN schools AS T2 ON RankedScores.cds = T2.CDSCode WHERE RankedScores.Rank = 333",
        "SELECT schools.Phone, schools.Ext FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332",
        "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 1 OFFSET 332",
        "SELECT T1.Phone, T1.Ext FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrWrite DESC LIMIT 1 OFFSET 332",
        "SELECT T2.Phone, T2.Ext FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite IS NOT NULL ORDER BY T1.AvgScrWrite DESC LIMIT 1 OFFSET 332",
        "SELECT s.Phone, s.Ext  FROM (SELECT cds, AvgScrWrite, ROW_NUMBER() OVER (ORDER BY AvgScrWrite DESC) AS rank        FROM satscores) AS ranked_scores  INNER JOIN schools AS s ON ranked_scores.cds = s.cds  WHERE ranked_scores.rank = 333"
    ],
    "274": [
        "SELECT element FROM atom WHERE molecule_id = 'TR001' ORDER BY element",
        "SELECT element FROM atom WHERE molecule_id = 'TR001' ORDER BY element",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001'",
        "SELECT T1.element FROM atom AS T1 WHERE T1.molecule_id = 'TR001'",
        "SELECT T1.element FROM atom AS T1 WHERE T1.molecule_id = 'TR001'",
        "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001'"
    ],
    "808": [
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "SELECT T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"
    ],
    "403": [
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage, T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage, T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name",
        "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) AS percentage, cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid GROUP BY cards.name",
        "SELECT CAST(SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage, T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name",
        "SELECT foreign_data.name, (SELECT COUNT(*) FROM cards) AS total_cards, (SELECT COUNT(*) FROM foreign_data WHERE language = 'Spanish') AS spanish_cards, (SELECT COUNT(*) FROM foreign_data WHERE language = 'Spanish') * 100.0 / (SELECT COUNT(*) FROM cards) AS percentage FROM foreign_data WHERE language = 'Spanish'",
        "SELECT (COUNT(CASE WHEN language = 'Spanish' THEN 1 END) * 100.0 / COUNT(*)) AS percentage, name FROM foreign_data GROUP BY name"
    ],
    "1159": [
        "SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
        "SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALB < 3.5",
        "SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.ALB < 3.5",
        "SELECT P.ID, P.SEX, P.Diagnosis  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.ALB < 3.5"
    ],
    "409": [
        "SELECT COUNT(*) FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid JOIN rulings AS R ON C.uuid = R.uuid WHERE L.format = 'premodern' AND R.text = 'This is a triggered mana ability.' AND C.side IS NULL",
        "SELECT COUNT(*) FROM cards AS C JOIN legalities AS L ON C.uuid = L.uuid WHERE L.format = 'premodern' AND C.side IS NULL AND C.uuid IN (SELECT uuid FROM rulings WHERE text = 'This is a triggered mana ability.')",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.side IS NULL",
        "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.side IS NULL",
        "SELECT COUNT(*) FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T2.text = 'This is a triggered mana ability.' AND T1.side IS NULL AND T1.uuid IN (SELECT uuid FROM legalities WHERE format = 'premodern')",
        "SELECT COUNT(*) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'premodern' AND T1.side IS NULL AND T2.text = 'This is a triggered mana ability.'"
    ],
    "1443": [
        "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'",
        "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31'",
        "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31'",
        "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01T00:00:00' AND '2020-03-31T23:59:59'",
        "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31'",
        "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'"
    ],
    "1439": [
        "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Agriculture and Applied Sciences' AND T2.major_name = 'Business'",
        "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
        "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
        "SELECT M.phone FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Business' AND J.college = 'College of Agriculture and Applied Sciences'",
        "SELECT T1.phone FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "SELECT T1.phone  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'"
    ],
    "1026": [
        "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.season = '2015/2016' AND (T2.home_team_goal - T2.away_team_goal) < 0 GROUP BY T1.team_long_name ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT T3.name FROM Team AS T3 INNER JOIN Match AS T1 ON T3.team_api_id = T1.home_team_api_id WHERE T1.season = '2015/2016' GROUP BY T3.name HAVING SUM(CASE WHEN T1.home_team_goal < T1.away_team_goal THEN 1 ELSE 0 END) = (SELECT MIN(HomeLosses) FROM (SELECT COUNT(*) AS HomeLosses FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id))",
        "SELECT T1.home_team_api_id, COUNT(*) AS lost_matches FROM Match AS T1 WHERE (T1.home_team_goal - T1.away_team_goal) < 0 AND T1.season = '2015/2016' GROUP BY T1.home_team_api_id ORDER BY lost_matches ASC LIMIT 1",
        "SELECT home_team_api_id, COUNT(*) AS losses FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY losses ASC LIMIT 1",
        "SELECT home_team_api_id FROM Match WHERE season = '2015/2016' AND (home_team_goal - away_team_goal) < 0 GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT home_team_api_id, COUNT(*) AS losses FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY losses ASC LIMIT 1"
    ],
    "768": [
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'"
    ],
    "1415": [
        "SELECT T2.position FROM member AS T2 INNER JOIN major AS T1 ON T2.link_to_major = T1.major_id WHERE T1.major_name = 'Business'",
        "SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business')",
        "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'",
        "SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'",
        "SELECT T1.position FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'",
        "SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'"
    ],
    "639": [
        "SELECT (COUNT(T1.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Community')) AS percentage FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T2.TagName = 'r' AND T1.OwnerDisplayName = 'Community'",
        "SELECT (COUNT(DISTINCT P.Id) * 100.0 / COUNT(DISTINCT P2.Id)) AS percentage FROM posts P JOIN postLinks PL ON P.Id = PL.PostId JOIN tags T ON PL.RelatedPostId = T.Id JOIN users U ON P.OwnerUserId = U.Id WHERE T.TagName = 'r' AND U.DisplayName = 'Community'",
        "SELECT CAST(COUNT(CASE WHEN tags.TagName = 'r' THEN posts.Id END) AS REAL) * 100 / COUNT(CASE WHEN users.DisplayName = 'Community' THEN posts.Id END) AS percentage FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId INNER JOIN tags ON postLinks.RelatedPostId = tags.Id INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Community'",
        "SELECT CAST(COUNT(T2.PostId) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN tags AS T3 ON T2.RelatedPostId = T3.Id INNER JOIN users AS T4 ON T1.OwnerUserId = T4.Id WHERE T3.TagName = 'r' AND T4.DisplayName = 'Community'",
        "SELECT (COUNT(T1.Id) * 100.0 / (SELECT COUNT(T2.Id) FROM posts T2 WHERE T2.OwnerDisplayName = 'Community')) AS percentage FROM tags T1 WHERE T1.TagName = 'r'",
        "SELECT (COUNT(T2.PostId) * 100.0 / NULLIF(COUNT(T1.Id), 0)) AS percentage  FROM posts AS T1  LEFT JOIN postLinks AS T2 ON T1.Id = T2.PostId  LEFT JOIN tags AS T3 ON T2.RelatedPostId = T3.ExcerptPostId  WHERE T1.OwnerDisplayName = 'Community'  AND T3.TagName = 'r'"
    ],
    "914": [
        "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
        "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
        "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
        "SELECT COUNT(driverId) FROM drivers WHERE code IS NULL",
        "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
        "SELECT COUNT(*) FROM drivers WHERE code IS NULL"
    ],
    "1375": [
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "SELECT T1.first_name, T1.last_name FROM member AS T1  INNER JOIN major AS T2  ON T1.link_to_major = T2.major_id  WHERE T2.department = 'School of Applied Sciences, Technology and Education'"
    ],
    "908": [
        "SELECT T2.laps, T1.name, T2.year, T3.location FROM races AS T2 INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN races AS T1 ON T2.raceId = T1.raceId ORDER BY T2.laps DESC LIMIT 1",
        "SELECT races.name, races.year, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId ORDER BY races.laps DESC LIMIT 1",
        "SELECT T1.name AS race, T1.year, T2.location AS circuit_location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.laps = (SELECT MAX(laps) FROM races)",
        "SELECT T1.name, T1.year, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T1.raceId = T3.raceId ORDER BY T3.laps DESC LIMIT 1",
        "SELECT r.name, r.year, c.location FROM results AS res JOIN races AS r ON res.raceId = r.raceId JOIN circuits AS c ON r.circuitId = c.circuitId ORDER BY res.laps DESC LIMIT 1",
        "SELECT R.name, R.year, C.location  FROM results AS Res  INNER JOIN races AS R ON Res.raceId = R.raceId  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  WHERE Res.laps = (SELECT MAX(laps) FROM results)"
    ],
    "875": [
        "SELECT T2.url, T1.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901",
        "SELECT seasons.url, races.year FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901",
        "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 910",
        "SELECT T2.url FROM races AS T1 JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901",
        "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901"
    ],
    "1294": [
        "SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS E ON T1.ID = E.ID WHERE T2.CRE < 1.5 AND E.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE CRE < 1.5))",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5 AND T2.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination)",
        "SELECT T1.ID FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T2.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination T3 JOIN Laboratory T4 ON T3.ID = T4.ID WHERE T4.CRE < 1.5)",
        "SELECT T1.ID FROM Laboratory AS T1  INNER JOIN Examination AS T2 ON T1.ID = T2.ID  WHERE T1.CRE < 1.5 AND T2.aCL IgA = (SELECT MAX(T3.aCL IgA) FROM Laboratory AS T3 WHERE T3.ID = T1.ID AND T3.CRE < 1.5)"
    ],
    "920": [
        "SELECT DISTINCT R.year FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE C.name = 'Silverstone Circuit'",
        "SELECT DISTINCT R.year FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE C.circuitRef = 'silverstone'",
        "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'",
        "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'",
        "SELECT DISTINCT T2.year FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.circuitRef = 'silverstone'",
        "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'"
    ],
    "1365": [
        "SELECT T3.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.remaining = (SELECT MIN(remaining) FROM budget)",
        "SELECT e.expense_description FROM expense AS e JOIN budget AS b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget)",
        "SELECT T3.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.remaining = (SELECT MIN(remaining) FROM budget)",
        "SELECT T1.expense_description FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id ORDER BY T2.remaining LIMIT 1",
        "SELECT E.expense_description FROM budget B JOIN expense E ON B.budget_id = E.link_to_budget WHERE B.remaining = (SELECT B2.remaining FROM budget B2 ORDER BY B2.remaining ASC LIMIT 1)",
        "SELECT T2.expense_description  FROM expense AS T2  WHERE T2.link_to_budget = (SELECT T1.budget_id FROM budget AS T1 ORDER BY T1.remaining ASC LIMIT 1)"
    ],
    "1317": [
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 INNER JOIN event T2 ON T1.link_to_event = T2.event_id INNER JOIN member T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id JOIN member T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women's Soccer' AND T3.t_shirt_size = 'Medium'",
        "SELECT COUNT(T3.member_id) FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women's Soccer' AND T3.t_shirt_size = 'Medium'",
        "SELECT COUNT(T1.link_to_member)  FROM attendance AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id  WHERE T2.event_name = 'Women\\'s Soccer' AND T3.t_shirt_size = 'Medium'"
    ],
    "1460": [
        "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT member.first_name || ' ' || member.last_name AS full_name, expense.cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.cost  FROM member AS T1  INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member  WHERE T2.expense_description = 'Water, Veggie tray, supplies'"
    ],
    "933": [
        "SELECT T1.positionOrder FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Chinese Grand Prix'",
        "SELECT results.positionOrder FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Chinese Grand Prix'",
        "SELECT Res.positionOrder FROM results AS Res INNER JOIN races AS R ON Res.raceId = R.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.name = 'Chinese Grand Prix'",
        "SELECT T1.positionOrder FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE CONCAT(T2.forename, ' ', T2.surname) = 'Lewis Hamilton' AND T3.name = 'Chinese Grand Prix'",
        "SELECT T3.positionOrder FROM results T3 JOIN drivers T1 ON T3.driverId = T1.driverId JOIN races T2 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "SELECT T3.positionOrder  FROM results AS T3  INNER JOIN drivers AS T1 ON T3.driverId = T1.driverId  INNER JOIN races AS T2 ON T3.raceId = T2.raceId  WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008"
    ],
    "1488": [
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1",
        "SELECT T1.CustomerID, MAX(T2.Consumption) AS MaxConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY MaxConsumption DESC LIMIT 1",
        "SELECT T1.CustomerID, T2.Consumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' ORDER BY T2.Consumption DESC LIMIT 1",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption  FROM customers AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Segment = 'KAM'  GROUP BY T1.CustomerID  ORDER BY TotalConsumption DESC  LIMIT 1"
    ],
    "883": [
        "SELECT COUNT(raceId) AS total_races FROM races WHERE year = 2005; SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "SELECT COUNT(*) AS race_count, GROUP_CONCAT(name ORDER BY name DESC) AS race_names FROM races WHERE year = 2005",
        "SELECT COUNT(raceId) AS total_races, GROUP_CONCAT(name ORDER BY name DESC) AS race_names FROM races WHERE year = 2005",
        "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "SELECT COUNT(raceId) AS race_count, name FROM races WHERE year = 2005 GROUP BY name ORDER BY name DESC",
        "SELECT COUNT(*) AS race_count, GROUP_CONCAT(name ORDER BY name DESC) AS race_names FROM races WHERE year = 2005"
    ],
    "164": [
        "SELECT T1.client_id FROM account AS T1 JOIN \"order\" AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 32423",
        "SELECT T1.client_id FROM account AS T1 JOIN \"order\" AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 32423",
        "SELECT client.client_id, client.gender FROM order INNER JOIN account ON order.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE order.order_id = 32423",
        "SELECT T1.client_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.order_id = 32423",
        "SELECT client.client_id FROM order AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN disp AS T3 ON T2.account_id = T3.account_id JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.order_id = 32423",
        "SELECT T2.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T1.order_id = 32423"
    ],
    "1408": [
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
        "SELECT SUM(T1.cost) FROM expense AS T1 WHERE T1.expense_description = 'Parking'",
        "SELECT SUM(expense.cost) AS total_cost FROM expense WHERE expense.expense_description = 'Parking'",
        "SELECT SUM(expense.cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Parking'",
        "SELECT SUM(cost) AS total_cost_spent FROM expense WHERE expense_description = 'Parking'",
        "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'"
    ],
    "930": [
        "SELECT R.name FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' ORDER BY Res.rank ASC LIMIT 1",
        "SELECT T1.raceId FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1",
        "SELECT T1.name, MIN(T2.rank) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' GROUP BY T1.name ORDER BY MIN(T2.rank) LIMIT 1",
        "SELECT T1.raceId, T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1",
        "SELECT T1.raceId FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1",
        "SELECT T3.name FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T1.rank = (SELECT MIN(rank) FROM results WHERE driverId = T2.driverId)"
    ],
    "1301": [
        "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Thrombosis = 0",
        "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.Thrombosis = 0 AND T2.CPK < 250",
        "SELECT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.Thrombosis = 0 AND T2.CPK < 250",
        "SELECT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250",
        "SELECT DISTINCT P.ID  FROM Examination AS E  INNER JOIN Laboratory AS L ON E.ID = L.ID  WHERE E.Thrombosis = 0 AND L.CPK < 250"
    ],
    "176": [
        "SELECT L.amount AS amount_of_debt, L.status AS payment_status FROM loan AS L INNER JOIN disp AS D ON L.account_id = D.account_id WHERE D.client_id = 992",
        "SELECT T1.amount, T1.status FROM loan AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 992 AND T1.status IN ('D', 'C')",
        "SELECT L.amount AS amount_of_debt, L.status AS payment_status FROM loan AS L INNER JOIN disp AS D ON L.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE C.client_id = 992",
        "SELECT l.amount, l.status FROM loan AS l WHERE l.account_id IN (SELECT d.account_id FROM disp AS d WHERE d.client_id = 992)",
        "SELECT l.amount, l.status FROM disp d JOIN loan l ON d.account_id = l.account_id WHERE d.client_id = 992",
        "SELECT T1.amount, T1.status FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 992"
    ],
    "473": [
        "SELECT IIF(sets.isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Adarkar Valkyrie'",
        "SELECT sets.isForeignOnly FROM sets INNER JOIN cards ON sets.code = cards.setCode WHERE cards.name = 'Adarkar Valkyrie'",
        "SELECT IIF(sets.isForeignOnly = 1, 'YES', 'NO') FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie'",
        "SELECT sets.name, sets.isForeignOnly FROM cards JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie' AND sets.isForeignOnly = 1",
        "SELECT S.isForeignOnly FROM cards AS C JOIN sets AS S ON C.setCode = S.code WHERE C.name = 'Adarkar Valkyrie'",
        "SELECT sets.isForeignOnly FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie' AND sets.isForeignOnly = 1"
    ],
    "1247": [
        "SELECT COUNT(DISTINCT T1.ID) AS male_patients_with_abnormal_FG FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)",
        "SELECT COUNT(DISTINCT P.ID) AS male_patients, COUNT(DISTINCT CASE WHEN L.FG <= 150 OR L.FG >= 450 THEN P.ID END) AS abnormal_fibrinogen FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC > 3.5 AND L.WBC < 9.0",
        "SELECT COUNT(DISTINCT P.ID) AS how_many_male_patients, SUM(CASE WHEN L.FG <= 150 OR L.FG >= 450 THEN 1 ELSE 0 END) AS how_many_abnormal_fibrinogen_level FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC > 3.5 AND L.WBC < 9.0",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC > 3.5 AND L.WBC < 9.0 AND (L.FG <= 150 OR L.FG >= 450)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC > 3.5 AND L.WBC < 9.0 AND (L.FG <= 150 OR L.FG >= 450)"
    ],
    "859": [
        "SELECT Q.q1 FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE D.forename = 'Bruno' AND D.surname = 'Senna' AND Q.raceId = 354",
        "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354",
        "SELECT Q.q1 FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 354 AND D.forename = 'Bruno' AND D.surname = 'Senna'",
        "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "SELECT T2.q1 FROM qualifying AS T2 JOIN drivers AS T1 ON T1.driverId = T2.driverId WHERE T1.forename = 'Bruno' AND T1.surname = 'Senna' AND T2.raceId = 354",
        "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354"
    ],
    "1339": [
        "SELECT AVG(e.cost) FROM expense AS e INNER JOIN member AS m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (strftime('%m', e.expense_date) = '09' OR strftime('%m', e.expense_date) = '10')",
        "SELECT AVG(e.cost) FROM expense AS e JOIN member AS m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (strftime('%m', e.expense_date) = '09' OR strftime('%m', e.expense_date) = '10')",
        "SELECT AVG(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND (strftime('%m', expense.expense_date) = '09' OR strftime('%m', expense.expense_date) = '10')",
        "SELECT CAST(SUM(T1.cost) AS REAL) / COUNT(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Elijah' AND T2.last_name = 'Allen' AND strftime('%m', T1.expense_date) IN ('09', '10')",
        "SELECT AVG(T1.cost) FROM expense T1 JOIN member T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Elijah' AND T2.last_name = 'Allen' AND (strftime('%m', T1.expense_date) = '09' OR strftime('%m', T1.expense_date) = '10')",
        "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Elijah' AND T2.last_name = 'Allen' AND (STRFTIME('%m', T1.expense_date) = '09' OR STRFTIME('%m', T1.expense_date) = '10')"
    ],
    "119": [
        "SELECT account.account_id, district.A2 AS district_name, district.A3 AS district_region FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1993%' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT account.account_id, district.A2 AS district_name, district.A3 AS district_region FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1993%' AND account.frequency = 'POPLATEK PO OBRATU'",
        "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE a.date LIKE '93%' AND a.frequency = 'POPLATEK PO OBRATU'",
        "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "SELECT T1.account_id, T2.A2, T2.A3 FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id WHERE T1.date LIKE '93%' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "SELECT T1.account_id, T3.A2 AS district_name, T3.A3 AS district_region  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE STRFTIME('%Y', T1.date) = '1993' AND T2.frequency = 'POPLATEK PO OBRATU'"
    ],
    "1115": [
        "SELECT (PA1.overall_rating - PA2.overall_rating) * 100.0 / PA1.overall_rating AS percentage FROM Player P1 JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id JOIN Player P2 JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P1.player_name = 'Landon Donovan' AND P2.player_name = 'Jordan Bowery' AND PA1.date = '2013-07-12' AND PA2.date = '2013-07-12'",
        "SELECT (PA1.overall_rating - PA2.overall_rating) * 100.0 / PA1.overall_rating AS percentage FROM Player P1 JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id JOIN Player P2 JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P1.player_name = 'Landon Donovan' AND P2.player_name = 'Jordan Bowery' AND PA1.date = '2013-07-12 00:00:00' AND PA2.date = '2013-07-12 00:00:00'",
        "SELECT (SELECT PA1.overall_rating FROM Player P1 INNER JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Landon Donovan' AND PA1.date = '2013-07-12') - (SELECT PA2.overall_rating FROM Player P2 INNER JOIN Player_Attributes PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.player_name = 'Jordan Bowery' AND PA2.date = '2013-07-12') / (SELECT PA1.overall_rating FROM Player P1 INNER JOIN Player_Attributes PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Landon Donovan' AND PA1.date = '2013-07-12') * 100 AS percentage",
        "SELECT CAST((SUM(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating ELSE 0 END) - SUM(CASE WHEN P.player_name = 'Jordan Bowery' THEN PA.overall_rating ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating ELSE 0 END) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Landon Donovan', 'Jordan Bowery') AND PA.date = '2013-07-12 00:00:00'",
        "SELECT (CAST((Landon.overall_rating - Bowery.overall_rating) AS FLOAT) / Landon.overall_rating) * 100 AS percentage FROM (SELECT player_api_id, overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') AS Landon, (SELECT player_api_id, overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12') AS Bowery",
        "SELECT ( (Landon.rating - Bowery.rating) / Landon.rating * 100 ) AS percentage FROM      (SELECT overall_rating AS rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') AS Landon,     (SELECT overall_rating AS rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12') AS Bowery"
    ],
    "1009": [
        "SELECT T1.driverId, T1.duration FROM pitStops T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2011",
        "SELECT d.driverRef, p.duration FROM pitStops p JOIN drivers d ON p.driverId = d.driverId JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix'",
        "SELECT pitStops.duration FROM pitStops INNER JOIN races ON pitStops.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2011",
        "SELECT T1.duration, T1.driverId FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2011",
        "SELECT PS.driverId, PS.duration FROM pitStops AS PS JOIN races AS R ON PS.raceId = R.raceId WHERE R.name = 'Australian Grand Prix' AND R.year = 2011",
        "SELECT D.surname, P.duration  FROM pitStops AS P  INNER JOIN races AS R ON P.raceId = R.raceId  INNER JOIN drivers AS D ON P.driverId = D.driverId  WHERE R.year = 2011 AND R.name = 'Australian Grand Prix'"
    ],
    "1516": [
        "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
        "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'",
        "SELECT COUNT(T1.CustomerID) FROM transactions_1k AS T1 JOIN customers AS C ON T1.CustomerID = C.CustomerID WHERE C.Currency = 'CZK' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'",
        "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'",
        "SELECT COUNT(T1.TransactionID)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-26'  AND T1.Time < '13:00:00'  AND T2.Currency = 'CZK'"
    ],
    "412": [
        "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Matthew D. Wilson' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND foreign_data.language = 'French'",
        "SELECT foreign_data.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND foreign_data.language = 'French' AND cards.artist = 'Matthew D. Wilson'",
        "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND foreign_data.language = 'French' AND cards.artist = 'Matthew D. Wilson'",
        "SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'French' AND T2.type LIKE '%Creature%' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.artist = 'Matthew D. Wilson'",
        "SELECT FD.name FROM foreign_data FD JOIN cards C ON FD.uuid = C.uuid WHERE FD.language = 'French' AND C.type LIKE 'Creature%' AND C.layout = 'normal' AND C.borderColor = 'black' AND C.artist = 'Matthew D. Wilson'",
        "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson' AND T2.language = 'French'"
    ],
    "729": [
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT AVG(height_cm) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND height_cm IS NOT NULL AND height_cm != 0",
        "SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"
    ],
    "593": [
        "SELECT COUNT(DISTINCT badges.UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name IN ('Supporter', 'Teacher') AND users.Location = 'New York'",
        "SELECT COUNT(DISTINCT badges.UserId) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE (badges.Name = 'Supporter' OR badges.Name = 'Teacher') AND users.Location = 'New York'",
        "SELECT COUNT(DISTINCT u.Id) FROM users AS u JOIN badges AS b ON u.Id = b.UserId WHERE u.Location = 'New York' AND b.Name IN ('Supporter', 'Teacher') GROUP BY u.Id HAVING COUNT(DISTINCT b.Name) = 2",
        "SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
        "SELECT COUNT(DISTINCT T2.Id) FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'New York' AND T1.Name IN ('Teacher', 'Supporter') GROUP BY T2.Id HAVING COUNT(DISTINCT T1.Name) = 2",
        "SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T2 INNER JOIN users AS T1 ON T2.UserId = T1.Id WHERE T1.Location = 'New York' AND T2.Name IN ('Supporter', 'Teacher') GROUP BY T1.UserId HAVING COUNT(T2.Name) = 2"
    ],
    "794": [
        "SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY T1.attribute_value DESC LIMIT 1",
        "SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY T1.attribute_value DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Speed')",
        "SELECT T1.id FROM superhero T1 JOIN hero_attribute T2 ON T1.id = T2.hero_id JOIN attribute T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "SELECT T2.superhero_name  FROM hero_attribute AS T1  INNER JOIN superhero AS T2 ON T1.hero_id = T2.id  WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed')  AND T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed'))"
    ],
    "129": [
        "SELECT district.A2 AS district_name, SUM(trans.amount) AS total_withdrawals FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.A2 ORDER BY total_withdrawals DESC LIMIT 10",
        "SELECT district.A2 AS district_name, SUM(trans.amount) AS total_withdrawals FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.A2 ORDER BY total_withdrawals DESC LIMIT 10",
        "SELECT district.A2, SUM(trans.amount) AS total_withdrawal FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.A2 ORDER BY total_withdrawal DESC LIMIT 10",
        "SELECT T1.A2, T2.amount FROM district AS T1 INNER JOIN account AS A ON T1.district_id = A.district_id INNER JOIN trans AS T2 ON A.account_id = T2.account_id WHERE T2.type = 'VYDAJ' AND T2.date LIKE '1996-01%' ORDER BY T2.amount DESC LIMIT 10",
        "SELECT d.A2, SUM(t.amount) AS total_withdrawal FROM trans AS t JOIN account AS a ON t.account_id = a.account_id JOIN district AS d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawal DESC LIMIT 10",
        "SELECT T2.A2 AS district_name, SUM(T1.amount) AS total_withdrawals  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%'  GROUP BY T2.A2  ORDER BY total_withdrawals DESC  LIMIT 10"
    ],
    "1407": [
        "SELECT budget_id, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "SELECT B.link_to_event, B.amount FROM budget AS B WHERE B.category = 'Advertisement' ORDER BY B.amount DESC LIMIT 3",
        "SELECT budget_id, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "SELECT amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "SELECT budget.budget_id, budget.amount FROM budget WHERE budget.category = 'Advertising' ORDER BY budget.amount DESC LIMIT 3",
        "SELECT * FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3"
    ],
    "620": [
        "SELECT u.Views FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'",
        "SELECT u.Views FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'",
        "SELECT users.Views FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0'",
        "SELECT COUNT(T2.Views) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'",
        "SELECT U.Views FROM badges B JOIN users U ON B.UserId = U.Id WHERE B.Date = '2010-07-19 19:39:08.0'",
        "SELECT SUM(u.Views) FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0'"
    ],
    "960": [
        "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
        "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
        "SELECT AVG(results.fastestLapSpeed) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
        "SELECT AVG(CAST(T1.fastestLapSpeed AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
        "SELECT AVG(T2.fastestLapSpeed) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009",
        "SELECT AVG(T1.fastestLapSpeed)  FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009"
    ],
    "455": [
        "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "SELECT cards.name FROM cards WHERE cards.isPromo = 1 AND cards.side IS NOT NULL",
        "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"
    ],
    "1456": [
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_spent FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY total_spent DESC LIMIT 5",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5",
        "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5",
        "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_spending  FROM member AS T1  INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member  GROUP BY T1.member_id, full_name  ORDER BY total_spending DESC  LIMIT 5"
    ],
    "1138": [
        "SELECT C.name FROM League L JOIN Country C ON L.country_id = C.id WHERE L.name = 'Poland Ekstraklasa'",
        "SELECT C.name FROM Country C JOIN League L ON C.id = L.country_id WHERE L.name = 'Poland Ekstraklasa'",
        "SELECT C.name FROM Country C JOIN League L ON C.id = L.country_id WHERE L.name = 'Poland Ekstraklasa'",
        "SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa'",
        "SELECT C.name FROM League L JOIN Country C ON L.country_id = C.id WHERE L.name = 'Poland Ekstraklasa'",
        "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Poland Ekstraklasa'"
    ],
    "818": [
        "SELECT (COUNT(CASE WHEN G.id = 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_female_bad_superheroes FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE A.id = 2",
        "SELECT (SUM(CASE WHEN G.id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE A.id = 2",
        "SELECT (CAST(COUNT(CASE WHEN T3.gender_id = 2 THEN 1 END) AS REAL) * 100 / COUNT(*)) AS female_percentage FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 2",
        "SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.id = 2",
        "SELECT (SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS female_percentage FROM superhero AS T1 WHERE T1.alignment_id = 2",
        "SELECT (SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS female_percentage  FROM superhero AS T1  INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id  WHERE T2.id = 2"
    ],
    "537": [
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie'",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie'",
        "SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'csgillespie'",
        "SELECT COUNT(posts.Id) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')"
    ],
    "1229": [
        "SELECT COUNT(DISTINCT T1.ID) AS how_many_patients, COUNT(DISTINCT CASE WHEN (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 50 THEN T1.ID END) AS how_many_age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50",
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', COUNT(DISTINCT CASE WHEN (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 50 THEN P.ID END) AS 'how many age' FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (STRFTIME('%Y', current_timestamp) - STRFTIME('%Y', T1.Birthday)) > 50",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50",
        "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TG >= 200 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) > 50"
    ],
    "110": [
        "SELECT disp.disp_id FROM disp INNER JOIN trans ON disp.account_id = trans.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02'",
        "SELECT T2.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'",
        "SELECT disp.disp_id, disp.client_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02'",
        "SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 5100 AND T2.date = '1998-09-02'",
        "SELECT T2.disp_id FROM trans AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'",
        "SELECT T2.disp_id  FROM trans AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  WHERE T1.amount = 5100 AND T1.date = '1998-09-02'"
    ],
    "1059": [
        "SELECT player_name FROM Player WHERE height > 180",
        "SELECT player_name FROM Player WHERE height > 180",
        "SELECT player_name FROM Player WHERE height > 180",
        "SELECT player_name FROM Player WHERE height > 180",
        "SELECT player_name FROM Player WHERE height > 180",
        "SELECT player_name FROM Player WHERE height > 180"
    ],
    "616": [
        "SELECT c.Score FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0'",
        "SELECT comments.Score FROM comments WHERE comments.CreationDate = '2010-07-19 19:19:56.0'",
        "SELECT c.Score AS \"the comment's rating score\", p.Id AS \"the post\" FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0'",
        "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreationDate = '2010-07-19 19:19:56.0'",
        "SELECT T2.Score FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreaionDate = '2010-07-19 19:19:56.0'",
        "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreaionDate = '2010-07-19 19:19:56.0'"
    ],
    "812": [
        "SELECT DISTINCT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
        "SELECT T1.full_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
        "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "SELECT T1.full_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5"
    ],
    "1002": [
        "SELECT D.forename || ' ' || D.surname AS \"full name of the youngest racer\", D.nationality, R.name AS \"race name\" FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId INNER JOIN races AS R ON Q.raceId = R.raceId WHERE D.dob = (SELECT MAX(dob) FROM drivers) LIMIT 1",
        "SELECT D.forename || ' ' || D.surname AS \"full name of the youngest racer\", D.nationality, R.name AS \"name of the race to which he/she first joined\" FROM drivers D JOIN results R ON D.driverId = R.driverId WHERE D.dob = (SELECT MAX(dob) FROM drivers) LIMIT 1",
        "SELECT D.forename || ' ' || D.surname AS full_name, D.nationality, R.name AS first_race_name FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId INNER JOIN races AS R ON Q.raceId = (SELECT raceId FROM qualifying WHERE driverId = D.driverId ORDER BY qualifyId LIMIT 1) WHERE D.dob = (SELECT MAX(dob) FROM drivers)",
        "SELECT T1.forename, T1.surname, T1.nationality, T2.name FROM drivers AS T1 JOIN results AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T3.driverId LIMIT 1",
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T3.name AS race_name FROM drivers T1 JOIN results T2 ON T1.driverId = T2.driverId JOIN races T3 ON T2.raceId = T3.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) LIMIT 1",
        "SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T2.name AS race_name  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T1.dob = (SELECT MAX(dob) FROM drivers)  ORDER BY T2.raceId  LIMIT 1"
    ],
    "571": [
        "SELECT COUNT(p.Id) * 1.0 / COUNT(v.Id) AS times FROM posts AS p LEFT JOIN votes AS v ON p.Id = v.PostId WHERE p.OwnerUserId = 24",
        "SELECT COUNT(posts.Id) * 1.0 / COUNT(votes.Id) AS times FROM posts LEFT JOIN votes ON posts.Id = votes.PostId WHERE posts.OwnerUserId = 24",
        "SELECT COUNT(posts.Id) * 1.0 / COUNT(votes.Id) AS times, COUNT(posts.Id) AS number_of_posts, COUNT(votes.Id) AS number_of_votes FROM posts LEFT JOIN votes ON posts.Id = votes.PostId WHERE posts.OwnerUserId = 24",
        "SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) FROM posts LEFT JOIN votes ON posts.OwnerUserId = votes.UserId WHERE posts.OwnerUserId = 24",
        "SELECT COUNT(T1.Id) * 1.0 / COUNT(T2.Id) AS PostsToVotesRatio FROM posts T1 LEFT JOIN votes T2 ON T1.OwnerUserId = 24 AND T2.UserId = 24",
        "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) * 1.0 / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS Ratio"
    ],
    "1476": [
        "SELECT (SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END) AS difference FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date BETWEEN '201201' AND '201212'",
        "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Consumption ELSE 0 END) AS difference FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212'",
        "SELECT (SELECT SUM(y.Consumption) FROM yearmonth y INNER JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201201' AND '201212') - (SELECT SUM(y.Consumption) FROM yearmonth y INNER JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND y.Date BETWEEN '201201' AND '201212') AS difference_in_gas_consumption",
        "SELECT CAST(SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Consumption ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Consumption ELSE 0 END) AS REAL) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212'",
        "SELECT SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END) AS ConsumptionDifference FROM yearmonth Y JOIN customers C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201201' AND '201212'",
        "SELECT COALESCE(SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption END), 0) - COALESCE(SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption END), 0) AS Consumption_Difference  FROM yearmonth AS Y  INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID  WHERE Y.Date BETWEEN '201201' AND '201212'"
    ],
    "1418": [
        "SELECT DISTINCT type FROM event WHERE location = 'MU 215'",
        "SELECT DISTINCT T2.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215'",
        "SELECT T4.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "SELECT type FROM event WHERE location = 'MU 215'",
        "SELECT T2.category FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "SELECT DISTINCT B.category FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.location = 'MU 215'"
    ],
    "725": [
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Icon Comics'",
        "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"
    ],
    "1124": [
        "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high'",
        "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high'",
        "SELECT DISTINCT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high'",
        "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high'",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high'",
        "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'"
    ],
    "255": [
        "SELECT ROUND(CAST(SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) * 100 AS REAL) / COUNT(bond.bond_id), 5) AS proportion FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
        "SELECT (SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)) AS proportion FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
        "SELECT CAST(COUNT(CASE WHEN T3.label = '+' THEN T3.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) AS proportion_single_bonds_carcinogenic FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_type = '-'",
        "SELECT CAST(SUM(CASE WHEN T3.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM bond AS T2 INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.bond_type = '-'",
        "SELECT ROUND((SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(B.bond_id), 5) AS proportion FROM bond B JOIN molecule M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-'",
        "SELECT ROUND(SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(B.bond_id), 5) AS proportion FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-'"
    ],
    "923": [
        "SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.country = 'Italy'",
        "SELECT COUNT(*) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy'",
        "SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.country = 'Italy'",
        "SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'",
        "SELECT COUNT(T1.raceId) FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'",
        "SELECT COUNT(T2.raceId) FROM races AS T2 INNER JOIN circuits AS T1 ON T2.circuitId = T1.circuitId WHERE T1.country = 'Italy'"
    ],
    "1078": [
        "SELECT player_name, birthday FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada'))",
        "SELECT player_name FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada'))",
        "SELECT player_name FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada'))",
        "SELECT player_name FROM Player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday ASC LIMIT 1",
        "SELECT id FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1"
    ],
    "182": [
        "SELECT COUNT(DISTINCT C.client_id) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T.amount > 4000 AND T.k_symbol = 'SIPO'",
        "SELECT COUNT(DISTINCT client.client_id) FROM client JOIN trans ON client.client_id = trans.account_id JOIN order ON trans.account_id = order.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND order.k_symbol = 'SIPO' AND order.amount > 4000",
        "SELECT COUNT(DISTINCT C.client_id) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN order AS O ON A.account_id = O.account_id WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND O.k_symbol = 'SIPO' AND O.amount > 4000",
        "SELECT COUNT(*) FROM client AS T1 INNER JOIN trans AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T2.amount > 4000 AND T2.k_symbol = 'SIPO'",
        "SELECT COUNT(DISTINCT C.client_id) FROM client C JOIN order O ON C.client_id = (SELECT D.client_id FROM disp D WHERE D.account_id = O.account_id) WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND O.amount > 4000 AND O.k_symbol = 'SIPO'",
        "SELECT COUNT(DISTINCT T1.client_id)  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN trans AS T3 ON T2.account_id = T3.account_id  INNER JOIN order AS T4 ON T2.account_id = T4.account_id  WHERE T1.gender = 'M'  AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31'  AND T4.amount > 4000  AND T4.k_symbol = 'SIPO'"
    ],
    "1248": [
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG < 150 OR L.FG > 450)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG < 150 OR L.FG > 450)",
        "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG <= 150 OR L.FG >= 450)",
        "###SQL: SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday > '1980-01-01' AND E.FG < 150",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG <= 150 OR T2.FG >= 450)",
        "SELECT COUNT(DISTINCT T1.ID)  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450)"
    ],
    "244": [
        "SELECT CASE WHEN MAX(double_bond_count) > 0 THEN (SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_type = '=' GROUP BY molecule_id ORDER BY COUNT(bond_id) DESC LIMIT 1)) ELSE '-' END AS is_carcinogenic FROM (SELECT molecule_id, COUNT(bond_id) AS double_bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery",
        "SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 JOIN (SELECT molecule_id, COUNT(*) AS double_bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id ORDER BY double_bond_count DESC LIMIT 1) AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT CASE WHEN T2.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM (SELECT T1.molecule_id, COUNT(T1.bond_id) AS double_bond_count FROM bond AS T1 WHERE T1.bond_type = '=' GROUP BY T1.molecule_id ORDER BY double_bond_count DESC LIMIT 1) AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
        "SELECT T1.molecule_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1",
        "SELECT T2.label FROM (SELECT T1.molecule_id, COUNT(*) AS double_bond_count FROM bond T1 WHERE T1.bond_type = '=' GROUP BY T1.molecule_id ORDER BY double_bond_count DESC LIMIT 1) AS T3 JOIN molecule T2 ON T3.molecule_id = T2.molecule_id",
        "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT bond.molecule_id, COUNT(*) AS bond_count FROM bond WHERE bond.bond_type = '=' GROUP BY bond.molecule_id ORDER BY bond_count DESC LIMIT 1) AS T2 ON T1.molecule_id = T2.molecule_id"
    ],
    "745": [
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'"
    ],
    "644": [
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"
    ],
    "788": [
        "SELECT (CAST(SUM(CASE WHEN G.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE P.publisher_name = 'Marvel Comics'",
        "SELECT (SUM(CASE WHEN G.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE P.publisher_name = 'Marvel Comics'",
        "SELECT (CAST(COUNT(CASE WHEN T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 END) AS REAL) * 100 / COUNT(*)) AS percentage_female_heroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT CAST(SUM(CASE WHEN T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.publisher_name) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "SELECT (CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(s.publisher_id)) * 100 AS percent FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN gender g ON s.gender_id = g.id WHERE p.publisher_name = 'Marvel Comics'",
        "SELECT (SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS female_percentage  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  WHERE T2.publisher_name = 'Marvel Comics'"
    ],
    "1299": [
        "SELECT COUNT(DISTINCT P.ID) AS how_many_patients, COUNT(E.Symptoms) AS how_many_symptoms FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID) AS how_many_patients, COUNT(E.Symptoms) AS how_many_symptoms FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID) AS 'how many patients', COUNT(E.Symptoms) AS 'how many symptoms' FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T2.Symptoms IS NOT NULL",
        "SELECT COUNT(*) FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL",
        "SELECT COUNT(DISTINCT P.ID)  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.TG < 200 AND P.Symptoms IS NOT NULL"
    ],
    "1438": [
        "SELECT J.college FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.first_name = 'Katy' AND M.link_to_major = 'rec1N0upiVLy5esTO'",
        "SELECT M.college FROM major AS M INNER JOIN member AS T ON M.major_id = T.link_to_major WHERE T.first_name = 'Katy' AND T.link_to_major = 'rec1N0upiVLy5esTO'",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO'",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'",
        "SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'"
    ],
    "1263": [
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT <= 29 OR L.HCT >= 52 ORDER BY (SELECT MAX(E.`aCL IgA`) FROM Examination AS E WHERE E.ID = P.ID) DESC LIMIT 1",
        "SELECT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT < 29 OR L.HCT > 52 ORDER BY E.`aCL IgA` DESC LIMIT 1",
        "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT < 29 OR L.HCT > 52 ORDER BY (SELECT MAX(`aCL IgA`) FROM Examination WHERE Examination.ID = P.ID) DESC LIMIT 1",
        "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 OR T2.HCT > 52 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
        "SELECT T2.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 OR T2.HCT > 52 ORDER BY T1.`aCL IgA` DESC LIMIT 1",
        "SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.HCT <= 29 OR T1.HCT >= 52 ORDER BY T1.`aCL IgA` DESC LIMIT 1"
    ],
    "1025": [
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1",
        "SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1",
        "SELECT L.name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1",
        "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1",
        "SELECT T2.name FROM League AS T2 INNER JOIN (SELECT league_id, SUM(home_team_goal + away_team_goal) as total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) AS T1 ON T1.league_id = T2.id WHERE total_goals = (SELECT MAX(total_goals) FROM (SELECT league_id, SUM(home_team_goal + away_team_goal) as total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id))"
    ],
    "789": [
        "SELECT AVG(weight_kg) AS average_weight FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "SELECT AVG(weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "SELECT AVG(weight_kg) AS average_weight FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
        "SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')",
        "SELECT AVG(weight_kg) FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien' AND T1.weight_kg IS NOT NULL",
        "SELECT AVG(weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'"
    ]
}